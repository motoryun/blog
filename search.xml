<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>统计全国重名最多的前100个</title>
      
      <link href="/2024/06/02/%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E9%87%8D%E5%90%8D%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D100%E4%B8%AA/"/>
      <url>/2024/06/02/%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E9%87%8D%E5%90%8D%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D100%E4%B8%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里面试：全国14亿个姓名，统计出重名最多的前100个"><a href="#阿里面试：全国14亿个姓名，统计出重名最多的前100个" class="headerlink" title="阿里面试：全国14亿个姓名，统计出重名最多的前100个"></a>阿里面试：全国14亿个姓名，统计出重名最多的前100个</h1><blockquote><p>全国14亿人的数据中，统计出重名人数最多的前100位姓名</p></blockquote><p>最近有小伙伴在面试阿里，遇到这个面试题。小伙伴没有系统的去梳理和总结，所以支支吾吾的说了几句，面试官不满意，面试挂了。</p><p><strong>TOP N面试题是常见的算法题。</strong></p><p>TOP N 统计的面试题，是一道非常常见的题目，大家一定要掌握好。</p><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述:"></a>1. 问题描述:</h2><p>我们需要从全国14亿人的数据中，统计出重名人数最多的前100位姓名</p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析:"></a>2. 问题分析:</h2><p>我们的目标：是找到重名人数最多的前100个姓名,</p><p>这意味着需要两步：</p><ul><li><p>需要有一个高效的数据结构来统计每个名字出现的次数,</p></li><li><p>并快速找到出现次数最多的前100个名字.</p></li></ul><p>所以这个问题就转化成了下一个问题： 使用一种低成本、高性能的数据结构，来统计每个名字出现的次数。</p><h2 id="3-如何选择一种最低成本、最高性能的数据结构？"><a href="#3-如何选择一种最低成本、最高性能的数据结构？" class="headerlink" title="3. 如何选择一种最低成本、最高性能的数据结构？"></a>3. 如何选择一种最低成本、最高性能的数据结构？</h2><p>常规的数据结构，选型如下:</p><ul><li><strong>数组</strong>:</li></ul><p>如果姓名的字符集范围很大(支持所有的Unicode字符)，那么，需要极大且稀疏的数组,导致内存浪费严重,也不适合处理动态长度和多样性的字符串集合</p><ul><li><p><strong>链表</strong>:</p><p>链表的插入和查找的操作时间复杂度为O(N), 并且，在大规模数据下性能低下,也不适合快速查找的场景</p></li><li><p><strong>跳表</strong>:</p></li></ul><p>跳表的插入、删除和查找操作的平均事件复杂度都是O(logN)，</p><p>跳表式空间换时间的思想，主要是它需要额外的空间来维护多级索引，每个元素在最坏的情况下需要额外的存储空间，导致总的空间复杂度为O(N log N),</p><p>在频繁的插入和查询的场景中，效率不高。</p><p>来到我们现在这个场景，统计每个名字出现的次数时，不如哈希表在时间和空间的效率高效，哈希表的O(1)时间复杂度更适合大规模的数据频繁的插入和查询。</p><ul><li><strong>哈希表:</strong></li></ul><p>哈希表的插入和查找的时间复杂度都是O(1),</p><p>但是在极端的情况下，哈希冲突会导致时间复杂度退化到O(N)，</p><p>在空间效率中，哈希表需要额外的空间来维护键值对，来到这个场景，空间效率和哈希冲突都有潜在风险，</p><p>最重要的是哈希表不能共享前缀，在处理大量的具有共同前缀的数据时候，也不适合。</p><ul><li><strong>平衡二叉搜索树(如AVL树或红黑树)</strong>:</li></ul><p>能够维护有序数据,支持快速的插入、删除和查找操作,但在字符串的比较上,性能不如哈希表和Trie高效</p><ul><li><strong>前缀树</strong>:</li></ul><p>前缀树通过共享前缀节点,节省了大量存储空间, 实现了成本的最低化</p><p>前缀树对于字符串操作非常高效, 在这个问题中, 有很多名字共享相同前缀, Trie的结构能有效利用这一特点。</p><p>经过上面的分析,能够看到Trie更适合统计每个名字出现的次数</p><h2 id="4-如何快速筛选出Top-100？"><a href="#4-如何快速筛选出Top-100？" class="headerlink" title="4. 如何快速筛选出Top 100？"></a>4. 如何快速筛选出Top 100？</h2><p>当知道了所有姓名出现的次数之后,、怎么样快速筛选出其中出现次数最多的前100个?</p><p>首先想到的是直接排序。</p><p>这个问题中,对14亿数据直接排序会有效率的问题，操作非常耗时。</p><p>所以直接排序， 这种方法不可取。</p><p>我们的目标是找到次数最多的前100个,可以利用堆的性质来完成。</p><p>小顶堆总是保持堆顶为当前堆中最小的元素，这样可以确保当新的元素插入时，如果新元素大于堆顶元素，堆顶元素会被替换掉</p><p>使用小顶堆的步骤:</p><p>1.初始化一个小顶堆:设为100</p><p>2.遍历每个姓名及其出现的次数:</p><ul><li><p>如果堆的大小小于100，将当前姓名及其出现次数插入堆中。</p></li><li><p>如果当前姓名的出现次数大于堆顶元素的出现次数，则移除堆顶元素，并将当前姓名及其出现次数插入堆中。</p></li></ul><p>3.遍历完所有的姓名后,堆中即为重名人数最多的前100个姓名</p><p>所以解决这个问题使用了前缀树 + 小顶堆</p><h2 id="5-前缀树Trie树介绍"><a href="#5-前缀树Trie树介绍" class="headerlink" title="5. 前缀树Trie树介绍"></a>5. 前缀树Trie树介绍</h2><p>在计算机科学中，trie，又称前缀树或字典树，使用一些单词来构建Trie树,如下图所示:</p><p><img src="/./2024/06/02/%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E9%87%8D%E5%90%8D%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D100%E4%B8%AA/1.png"></p><p>从图片中可以看到一些有意思的特性:</p><ul><li><p>根节点没有数据</p></li><li><p>从根节点到某一个节点,将他们的路径进行连接就组成了对应的字符串</p></li></ul><p>定义:</p><blockquote><p>Trie树，又称为前缀树或字典树, 是一种用于高效存储和检索字符串集合的数据结构, 每个节点代表一个字符, 边表示从一个字符到另一个字符的路径, Trie树通过共享相同前缀的节点来节省存储空间</p></blockquote><p>Trie树是一种有序树，用于保存关联数组，其中的键通常是字符串。</p><p>与二叉查找树不同，Trie树 的 键不是直接保存在节点中，而是由节点在树中的位置决定。</p><p>一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。</p><p>一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p>trie中的键通常是字符串，但也可以是其它的结构。</p><p>trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。</p><p>比如，bitwise trie中的键是一串位元，可以用于表示整数或者内存地址</p><p><strong>Trie树基本性质</strong></p><p>1，根节点不包含字符，除根节点意外每个节点只包含一个字符。</p><p>2，从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。</p><p>3，每个节点的所有子节点包含的字符串不相同。</p><p><strong>Trie树优点</strong>：</p><p>可以最大限度地减少无谓的字符串比较，故可以用于词频统计和大量字符串排序。</p><p>跟哈希表比较：</p><p>1，最坏情况时间复杂度比hash表好</p><p>2，没有冲突，除非一个key对应多个值（除key外的其他信息）</p><p>3，自带排序功能（类似Radix Sort），中序遍历trie可以得到排序。</p><p><strong>Trie树缺点</strong>：</p><p>当所有关键字都不具有相同或类似的前缀，空间消耗过大.</p><h2 id="6-Trie树的基本操作"><a href="#6-Trie树的基本操作" class="headerlink" title="6. Trie树的基本操作:"></a>6. Trie树的基本操作:</h2><ul><li><p>插入:将一个字符串逐字符插入到Trie树中</p></li><li><p>查找:检查Trie树中是否存在某个字符串</p></li><li><p>前缀匹配:查找所有以某个前缀开头的字符串</p></li><li><p>删除:从Trie树中删除一个字符串</p></li></ul><h2 id="7-Trie树的应用场景"><a href="#7-Trie树的应用场景" class="headerlink" title="7. Trie树的应用场景:"></a>7. Trie树的应用场景:</h2><p>1.字符串检索:</p><ul><li><p>应用场景:快速检索字典中的单词</p></li><li><p>使用原因:Trie树通过逐字符匹配,可以在O(L)时间内完成字符串的检索,其中L是字符串的长度,比传统的线性搜索更加高效</p></li></ul><p>2.自动补全:</p><ul><li><p>应用场景:搜索引擎和输入法中的自动补全功能</p></li><li><p>适用原因:Trie树可以通过前缀查找快速提供所有以给定前缀开头的单词,有效提升用户输入体验</p></li></ul><p>3.前缀匹配:</p><ul><li><p>应用场景:寻找以特定前缀开头的所有字符串,如电话号码前缀匹配</p></li><li><p>适用原因:Trie树天生适合处理前缀匹配问题,可以在O(L)时间内找到所有以特定前缀开头的字符串</p></li></ul><p>4.词频统计:</p><ul><li><p>应用场景:文本分析中统计单词出现频率</p></li><li><p>适用原因:Trie树可以在插入过程中记录每个单词的出现次数,通过遍历Trie树可以快速统计所有单词的频率</p></li></ul><p>为什么适合这些场景:</p><p>5.多模式匹配:</p><ul><li><p>应用场景:从文本中同时搜索多个模式(模式匹配算法)</p></li><li><p>适用原因:Trie树可以构建多个模式的结构,通过一次遍历文本同时匹配多个模式,提高匹配效率</p></li></ul><p>为什么适用于这些场景:</p><p>1.空间效率:</p><ul><li><p>共享前缀:Trie树通过共享前缀节点，减少了重复存储相同前缀的空间开销。</p></li><li><p>节省内存:对于大量前缀相同的字符串集合，Trie树显著节省内存使用。</p></li></ul><p>2.时间效率:</p><ul><li><p>O(L)复杂度:插入、查找和前缀匹配操作的时间复杂度为O(L),其中L是字符串的长度,显著提高了操作效率</p></li><li><p>快速检索:相比于其他线性结构(如数组或链表),Trie树在处理大量字符串时更快</p></li></ul><h2 id="8-Trie树的代码实现"><a href="#8-Trie树的代码实现" class="headerlink" title="8. Trie树的代码实现:"></a>8. Trie树的代码实现:</h2><p>以下是一个 参考代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line">class TrieNode &#123;  </span><br><span class="line">    Map&lt;Character, TrieNode&gt; children;  </span><br><span class="line">    int count;  </span><br><span class="line">  </span><br><span class="line">    public TrieNode() &#123;  </span><br><span class="line">        children = new HashMap&lt;&gt;();  </span><br><span class="line">        count = 0;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class Trie &#123;  </span><br><span class="line">    private TrieNode root;  </span><br><span class="line">  </span><br><span class="line">    public Trie() &#123;  </span><br><span class="line">        root = new TrieNode();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void insert(String name) &#123;  </span><br><span class="line">        TrieNode node = root;  </span><br><span class="line">        for (char ch : name.toCharArray()) &#123;  </span><br><span class="line">            node = node.children.computeIfAbsent(ch, k -&gt; new TrieNode());  </span><br><span class="line">        &#125;  </span><br><span class="line">        node.count++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void getAllNames(TrieNode node, StringBuilder prefix, PriorityQueue&lt;NameCount&gt; minHeap, int k) &#123;  </span><br><span class="line">        if (node == null) return;  </span><br><span class="line">        if (node.count &gt; 0) &#123;  </span><br><span class="line">            if (minHeap.size() &lt; k) &#123;  </span><br><span class="line">                minHeap.offer(new NameCount(prefix.toString(), node.count));  </span><br><span class="line">            &#125; else if (node.count &gt; minHeap.peek().count) &#123;  </span><br><span class="line">                minHeap.poll();  </span><br><span class="line">                minHeap.offer(new NameCount(prefix.toString(), node.count));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        for (Map.Entry&lt;Character, TrieNode&gt; entry : node.children.entrySet()) &#123;  </span><br><span class="line">            prefix.append(entry.getKey());  </span><br><span class="line">            getAllNames(entry.getValue(), prefix, minHeap, k);  </span><br><span class="line">            prefix.deleteCharAt(prefix.length() - 1);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public PriorityQueue&lt;NameCount&gt; getTopKNames(int k) &#123;  </span><br><span class="line">        PriorityQueue&lt;NameCount&gt; minHeap = new PriorityQueue&lt;&gt;(k);  </span><br><span class="line">        getAllNames(root, new StringBuilder(), minHeap, k);  </span><br><span class="line">        return minHeap;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class NameCount implements Comparable&lt;NameCount\&gt; &#123;  </span><br><span class="line">    String name;  </span><br><span class="line">    int count;  </span><br><span class="line">  </span><br><span class="line">    public NameCount(String name, int count) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.count = count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int compareTo(NameCount other) &#123;  </span><br><span class="line">        return Integer.compare(this.count, other.count);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return name + &quot;: &quot; + count;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">        String\[\] names = &#123;&quot;张伟&quot;, &quot;王伟伟&quot;, &quot;王芳&quot;, &quot;李伟&quot;, &quot;李娜&quot;&#125;; // 示例数据  </span><br><span class="line">        int k = 100; // 找到前100个重名人数最多的姓名  </span><br><span class="line">  </span><br><span class="line">        Trie trie = new Trie();  </span><br><span class="line">        for (String name : names) &#123;  </span><br><span class="line">            trie.insert(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        PriorityQueue&lt;NameCount&gt; topKNames = trie.getTopKNames(k);  </span><br><span class="line">        while (!topKNames.isEmpty()) &#123;  </span><br><span class="line">            System.out.println(topKNames.poll());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-TOP-N问题发散"><a href="#9-TOP-N问题发散" class="headerlink" title="9. TOP N问题发散:"></a>9. TOP N问题发散:</h2><p>上面的问题进行改进一下, 如果我们对内存有一个限制,比如:要求内存的使用不能超过2G,</p><p>注意，这里的内存受限，尽量使用磁盘处理。</p><blockquote><p>这里使用hashmap，而不适用 trie树的原因是？</p><p>trie树是按照字符为粒度组织树的节点的，进行磁盘操作性能不高，而且进行磁盘操作时算法更加复杂。</p><p>hashmap 是以key为单位操作的， 磁盘操作的效率高。而且 hashmap 统计的时候，代码简洁清晰。</p></blockquote><p>尽管我们hashmap，也不能直接将所有数据加载到内存中处理,</p><p>所以可以采取分治的策略,使用外部排序和哈希映射的方法,</p><p>以下是详细的步骤:</p><p>1.分块读取数据:将14亿条记录分成多个较小的块,每次读取一部分数据到内存中进行处理</p><p>2.哈希映射统计词频:对每个块的数据进行哈希映射,统计每个名字出现的次数,将结果写入到磁盘文件</p><p>3.合并词频统计结果:读取所有中间文件,合并词频统计结果,得到全局的词频统计</p><p>4.使用小顶堆找出前100个重复最多的名字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.\*;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line">class NameCount implements Comparable&lt;NameCount\&gt; &#123;  </span><br><span class="line">    String name;  </span><br><span class="line">    int count;  </span><br><span class="line">  </span><br><span class="line">    public NameCount(String name, int count) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">        this.count = count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int compareTo(NameCount other) &#123;  </span><br><span class="line">        return Integer.compare(this.count, other.count);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return name + &quot;: &quot; + count;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public class ExternalMemoryTopK &#123;  </span><br><span class="line">    private static final int CHUNK\_SIZE = 1000000; // 每个块处理100万条记录  </span><br><span class="line">  </span><br><span class="line">    public static void main(String\[\] args) throws IOException &#123;  </span><br><span class="line">        String inputFile = &quot;names.txt&quot;;  </span><br><span class="line">        String outputFile = &quot;top100names.txt&quot;;  </span><br><span class="line">        int k = 100;  </span><br><span class="line">  </span><br><span class="line">        // 第一步：分块读取数据并统计词频  </span><br><span class="line">        int chunkIndex = 0;  </span><br><span class="line">        BufferedReader reader = new BufferedReader(new FileReader(inputFile));  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line = reader.readLine()) != null) &#123;  </span><br><span class="line">            Map&lt;String, Integer&gt; frequencyMap = new HashMap&lt;&gt;();  </span><br><span class="line">            int lineCount = 0;  </span><br><span class="line">            while (line != null &amp;&amp; lineCount &lt; CHUNK\_SIZE) &#123;  </span><br><span class="line">                frequencyMap.put(line, frequencyMap.getOrDefault(line, 0) + 1);  </span><br><span class="line">                line = reader.readLine();  </span><br><span class="line">                lineCount++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            writeFrequencyMapToFile(frequencyMap, &quot;chunk\_&quot; + chunkIndex + &quot;.txt&quot;);  </span><br><span class="line">            chunkIndex++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        reader.close();  </span><br><span class="line">  </span><br><span class="line">        // 第二步：合并所有块的词频统计结果  </span><br><span class="line">        Map&lt;String, Integer&gt; globalFrequencyMap = new HashMap&lt;&gt;();  </span><br><span class="line">        for (int i = 0; i &lt; chunkIndex; i++) &#123;  </span><br><span class="line">            mergeFrequencyMapFromFile(globalFrequencyMap, &quot;chunk\_&quot; + i + &quot;.txt&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 第三步：使用小顶堆找出前100个重复最多的名字  </span><br><span class="line">        PriorityQueue&lt;NameCount&gt; minHeap = new PriorityQueue&lt;&gt;(k);  </span><br><span class="line">        for (Map.Entry&lt;String, Integer&gt; entry : globalFrequencyMap.entrySet()) &#123;  </span><br><span class="line">            if (minHeap.size() &lt; k) &#123;  </span><br><span class="line">                minHeap.offer(new NameCount(entry.getKey(), entry.getValue()));  </span><br><span class="line">            &#125; else if (entry.getValue() &gt; minHeap.peek().count) &#123;  </span><br><span class="line">                minHeap.poll();  </span><br><span class="line">                minHeap.offer(new NameCount(entry.getKey(), entry.getValue()));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 输出结果  </span><br><span class="line">        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));  </span><br><span class="line">        while (!minHeap.isEmpty()) &#123;  </span><br><span class="line">            writer.write(minHeap.poll().toString());  </span><br><span class="line">            writer.newLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">        writer.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static void writeFrequencyMapToFile(Map&lt;String, Integer&gt; frequencyMap, String filename) throws IOException &#123;  </span><br><span class="line">        BufferedWriter writer = new BufferedWriter(new FileWriter(filename));  </span><br><span class="line">        for (Map.Entry&lt;String, Integer&gt; entry : frequencyMap.entrySet()) &#123;  </span><br><span class="line">            writer.write(entry.getKey() + &quot; &quot; + entry.getValue());  </span><br><span class="line">            writer.newLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">        writer.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static void mergeFrequencyMapFromFile(Map&lt;String, Integer&gt; globalFrequencyMap, String filename) throws IOException &#123;  </span><br><span class="line">        BufferedReader reader = new BufferedReader(new FileReader(filename));  </span><br><span class="line">        String line;  </span><br><span class="line">        while ((line = reader.readLine()) != null) &#123;  </span><br><span class="line">            String\[\] parts = line.split(&quot; &quot;);  </span><br><span class="line">            String name = parts\[0\];  </span><br><span class="line">            int count = Integer.parseInt(parts\[1\]);  </span><br><span class="line">            globalFrequencyMap.put(name, globalFrequencyMap.getOrDefault(name, 0) + count);  </span><br><span class="line">        &#125;  </span><br><span class="line">        reader.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-topK问题-典型的解题思路"><a href="#10-topK问题-典型的解题思路" class="headerlink" title="10. topK问题,典型的解题思路"></a>10. topK问题,典型的解题思路</h2><p>这是一种典型的topK问题,一般的问法如下：</p><p>从一堆数据中选出多少个最大或最小数？</p><p>解题思想：</p><ol><li><p>先统计数量, 使用前缀树，hashmap等</p></li><li><p>再用小顶堆或者 大顶堆</p></li></ol><p>取大用小，取小用大。简单来说就是取最大的K个数就用小顶堆，取最小的K个数，就用大顶堆</p><p>取海量数据里面最小的K个数？</p><p>要找出数组中最小的K个数，就要构造一个有K个元素的大顶堆，因为大顶堆的堆顶值是最大的，其它元素和堆顶的元素比较，大于堆顶的元素，换一个元素继续，小于堆顶的元素，将堆顶元素出堆，将更小的元素插入堆顶，如此反复，堆里面就是最小的数</p><p>取海量数据里面最大的K个数？</p><p>要找出数组中最大的K个数，就要构造一个有K个元素的小顶堆，因为小顶堆的堆顶值是最小的，其它元素和堆顶的元素比较，大于堆顶的元素，堆顶的元素出堆，将元素插入到小顶堆，将更大的元素换到堆中，如此反复，堆里面就是最大的数</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Edge浏览器中使用免费的ChatGPT</title>
      
      <link href="/2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/"/>
      <url>/2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/</url>
      
        <content type="html"><![CDATA[<h1 id="Microsoft-Edge浏览器中使用免费的ChatGPT"><a href="#Microsoft-Edge浏览器中使用免费的ChatGPT" class="headerlink" title="Microsoft Edge浏览器中使用免费的ChatGPT"></a>Microsoft Edge浏览器中使用免费的ChatGPT</h1><h2 id="一、双击打开浏览器"><a href="#一、双击打开浏览器" class="headerlink" title="一、双击打开浏览器 "></a>一、双击打开浏览器 <img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/1.png"></h2><p>找到：扩展，打开</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/2.png"></p><h2 id="二、打开Microsoft-Edge加载项"><a href="#二、打开Microsoft-Edge加载项" class="headerlink" title="二、打开Microsoft Edge加载项"></a>二、打开Microsoft Edge加载项</h2><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/3.png"></p><h2 id="三、Move-tab新标签-获取免费ChatGPT"><a href="#三、Move-tab新标签-获取免费ChatGPT" class="headerlink" title="三、Move tab新标签 获取免费ChatGPT"></a>三、Move tab新标签 获取免费ChatGPT</h2><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/4.png"></p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/5.png"></p><h2 id="四、启用Move-tab。启用ChatGPT。"><a href="#四、启用Move-tab。启用ChatGPT。" class="headerlink" title="四、启用Move tab。启用ChatGPT。"></a>四、启用Move tab。启用ChatGPT。</h2><p>扩展</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/6.png"></p><p>管理扩展</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/7.png"></p><p>启用</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/8.png"></p><h2 id="五、新建标签页，使用GPT"><a href="#五、新建标签页，使用GPT" class="headerlink" title="五、新建标签页，使用GPT"></a>五、新建标签页，使用GPT</h2><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/9.png"></p><h2 id="六、使用举例"><a href="#六、使用举例" class="headerlink" title="六、使用举例"></a>六、使用举例</h2><p>提问</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/10.png"></p><p>GPT回复</p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/11.png"></p><p><img src="/./2024/06/01/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84ChatGPT/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>百亿流量红包系统</title>
      
      <link href="/2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="百亿流量红包系统，如何架构？（字节面试真题）"><a href="#百亿流量红包系统，如何架构？（字节面试真题）" class="headerlink" title="百亿流量红包系统，如何架构？（字节面试真题）"></a>百亿流量红包系统，如何架构？（字节面试真题）</h1><h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>在读者交流群(50+)中，最近有小伙伴拿到了一线互联网企业如得物、阿里、滴滴、极兔、有赞、希音、百度、网易、美团的面试资格，遇到很多很重要的架构类&#x2F;设计类的场景题：</p><blockquote><p>1.如何设计百亿流量高并发红包系统 ，请说出你的方案？</p><p>2.听说你会架构设计，请问一下如果让你来设计百亿流量红包系统，说说你的架构设计方案。</p></blockquote><p>最近有小伙伴在面试字节，又遇到了红包架构问题。小伙伴支支吾吾的说了几句，面试挂了。</p><p>所以，给大家做一下系统化、体系化的梳理，使得大家内力猛增，可以充分展示一下大家雄厚的 “技术肌肉”，<strong>让面试官爱到 “不能自已、口水直流”</strong>，然后实现”offer直提”。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><p><strong>- 说在前面</strong></p><p><strong>- 本文目录</strong></p><p>- 红包架构背景</p><h5 id="红包系统和秒杀系统的对比"><a href="#红包系统和秒杀系统的对比" class="headerlink" title="-红包系统和秒杀系统的对比"></a>-红包系统和秒杀系统的对比</h5><p><strong>- 红包系统功能分析</strong></p><p>- 功能1：包红包</p><p>- 功能2：发红包</p><p>- 功能3：抢红包</p><p>- 功能4：拆红包</p><h5 id="微信红包的业务特点"><a href="#微信红包的业务特点" class="headerlink" title="-微信红包的业务特点"></a>-微信红包的业务特点</h5><h5 id="微信红包的技术难点"><a href="#微信红包的技术难点" class="headerlink" title="-微信红包的技术难点"></a>-微信红包的技术难点</h5><p>- 红包系统概要设计</p><h5 id="系统功能说明"><a href="#系统功能说明" class="headerlink" title="-系统功能说明"></a>-系统功能说明</h5><p><strong>- 数据库设计</strong></p><h5 id="发红包"><a href="#发红包" class="headerlink" title="-发红包"></a>-发红包</h5><h5 id="抢红包"><a href="#抢红包" class="headerlink" title="-抢红包"></a>-抢红包</h5><p><strong>- 红包系统详细设计</strong></p><p>- 红包整体架构</p><p>- 高并发常用解决方案</p><p>- 1- 使用内存替代实时的DB</p><p>- 2- 使用乐观锁替代悲观锁</p><h5 id="JVM-CAS-乐观锁方案"><a href="#JVM-CAS-乐观锁方案" class="headerlink" title="-JVM CAS 乐观锁方案"></a>-JVM CAS 乐观锁方案</h5><p><strong>- 微信红包系统的高并发解决方案</strong></p><h5 id="1-分而治之：系统架构设计垂直Set化。"><a href="#1-分而治之：系统架构设计垂直Set化。" class="headerlink" title="-1- 分而治之：系统架构设计垂直Set化。"></a>-1- 分而治之：系统架构设计垂直Set化。</h5><h5 id="2-解决DB并发：逻辑Server层将请求排队。"><a href="#2-解决DB并发：逻辑Server层将请求排队。" class="headerlink" title="-2- 解决DB并发：逻辑Server层将请求排队。"></a>-2- 解决DB并发：逻辑Server层将请求排队。</h5><h5 id="3-系统性能稳定性保障：双维度分库分表设计。"><a href="#3-系统性能稳定性保障：双维度分库分表设计。" class="headerlink" title="-3- 系统性能稳定性保障：双维度分库分表设计。"></a>-3- 系统性能稳定性保障：双维度分库分表设计。</h5><h5 id="红包分配算法"><a href="#红包分配算法" class="headerlink" title="- 红包分配算法"></a>- 红包分配算法</h5><h5 id="1-实时拆分"><a href="#1-实时拆分" class="headerlink" title="-1- 实时拆分"></a>-1- 实时拆分</h5><h5 id="2-预先生成"><a href="#2-预先生成" class="headerlink" title="-2- 预先生成"></a>-2- 预先生成</h5><h5 id="3-二倍均值法"><a href="#3-二倍均值法" class="headerlink" title="-3- 二倍均值法"></a>-3- 二倍均值法</h5><p><strong>- 红包系统高可用架构设计</strong></p><h5 id="1-系统可用性影响因素"><a href="#1-系统可用性影响因素" class="headerlink" title="-1 - 系统可用性影响因素"></a>-1 - 系统可用性影响因素</h5><h5 id="2-红包系统可用性设计方向"><a href="#2-红包系统可用性设计方向" class="headerlink" title="-2 - 红包系统可用性设计方向"></a>-2 - 红包系统可用性设计方向</h5><h5 id="3-业务逻辑层-部署方案设计"><a href="#3-业务逻辑层-部署方案设计" class="headerlink" title="-3 - 业务逻辑层 - 部署方案设计"></a>-3 - 业务逻辑层 - 部署方案设计</h5><h5 id="4-业务逻辑层-异步化设计"><a href="#4-业务逻辑层-异步化设计" class="headerlink" title="-4 - 业务逻辑层 - 异步化设计"></a>-4 - 业务逻辑层 - 异步化设计</h5><h5 id="5-订单存储层-故障自愈"><a href="#5-订单存储层-故障自愈" class="headerlink" title="-5 - 订单存储层 - 故障自愈"></a>-5 - 订单存储层 - 故障自愈</h5><h5 id="6-订单存储层-平行扩容设计"><a href="#6-订单存储层-平行扩容设计" class="headerlink" title="-6 - 订单存储层 - 平行扩容设计"></a>-6 - 订单存储层 - 平行扩容设计</h5><p>- 总结</p><h3 id="红包架构背景"><a href="#红包架构背景" class="headerlink" title="红包架构背景"></a>红包架构背景</h3><p>红包是一种 瞬时流量很大的应用， 会在很短的时间内，产生巨大的瞬时流量，</p><p>所以，作为架构师来说，这种场景有很大的架构挑战</p><p>以2017年除夕为例，微信红包峰值QPS在76w左右，除夕当天收发微信红包的数量为142亿个。</p><p>这种百亿级别的数据量、100Wqps级别的超高并发，而且整个系统核心功能和支付相关，需要做好高并发、高可用、高可靠。</p><blockquote><p>特别说明：红包架构也是高端面试的核心场景题, 后面也会以视频的形式，对这些架构的一系列的架构场景题目，做系统化的介绍。</p><p>架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h4 id="红包系统和秒杀系统的对比-1"><a href="#红包系统和秒杀系统的对比-1" class="headerlink" title="红包系统和秒杀系统的对比"></a>红包系统和秒杀系统的对比</h4><p>我们先了解下微信红包支付的流程。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/1.png"><br>在上面的红包流程中，核心业务包含包红包、发红包、抢红包、拆红包</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/2.png"><br>其中最关键的步骤是</p><ul><li><p>发红包</p></li><li><p>抢红包。</p></li></ul><p>在整个体系中，红包系统 是 支付系统的商户，红包这个商户出售的是钱。</p><p>所以，用户发红包在红包系统 使用微信支付购买一份 红包商品，红包系统 将钱发放到相对应的微信群，供参与者领取。</p><p>微信群里的用户抢红包，得到的是商品里边的 零钱。</p><p>在整个体系中，红包系统 和支付系统 之间的关系是商家和第三方支付平台的关系。</p><p>红包的流程，很类似 商品“秒杀”活动。</p><ul><li><p>包红包类似秒杀商品管理</p></li><li><p>发红包类似“秒杀”活动的商品上架；</p></li><li><p>抢红包等同于“秒杀”活动中的查询库存；</p></li><li><p>拆红包对应“秒杀”活动中用户的“秒杀”动作。</p></li></ul><p>不过除了上面的相同点之外，红包业务 与 “秒杀”活动相比，还具备自身的特点：</p><p>首先，抢红包 比 “秒杀”有更海量的并发要求。假设同一时间有 10 万个群里的用户同时在发红包，那就相当于同一时间有 10 万个“秒杀”活动发布出去。10 万个微信群里的用户同时抢红包，将产生海量的并发请求。</p><p>其次，微信红包业务要求更严格的安全级别。红包业务本质上是资金交易。资金交易业务比普通商品“秒杀”活动有更高的安全级别要求。</p><ul><li><p><strong>“秒杀”时可以允许存在“超卖”（即实际被抢的商品数量比计划的库存多）、“少卖”（即实际被抢的商户数量比计划的库存少）的情况。</strong></p></li><li><p><strong>但是对于 红包，不允许存在“超卖”、“少卖”。</strong></p></li></ul><blockquote><p>特别说明：红包架构也是高端面试的核心场景题, 后面也会以视频的形式，对这些架构的一系列的架构场景题目，做系统化的介绍。</p><p>架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h2 id="红包系统功能分析"><a href="#红包系统功能分析" class="headerlink" title="红包系统功能分析"></a>红包系统功能分析</h2><p>接下来，40岁老架构带大家，从架构师视角开始红包系统的功能分析。</p><p>微信红包和微信支付之间的交互，与普通商家与微信支付的交互一样，需要经过多个步骤。</p><ul><li><p>用户发红包时，进入微信红包下一笔订单，系统记录发红包用户、发红包金额、红包数量和要发送到的用微信群。</p></li><li><p>然后微信红包系统请求微信支付服务器进行下单，用户使用微信支付进行支付。</p></li><li><p>支付成功后，微信支付后台系统通知微信红包后台系统支付成功结果，微信红包后台系统收到通知后推送微信红包消息到微信群。</p></li><li><p>微信群里用户便可抢红包。</p></li><li><p>用户发现红包还有剩余，就可以拆剩下的红包</p></li></ul><p>这就是微信红包和微信支付的关系以及交互过程。</p><h3 id="功能1：包红包"><a href="#功能1：包红包" class="headerlink" title="功能1：包红包"></a>功能1：包红包</h3><p>系统给每个红包分配一个唯一ID，也就是发红包的订单号，然后将红包发送给用户，红包的个数，红包金额写入到存储。</p><h3 id="功能2：发红包"><a href="#功能2：发红包" class="headerlink" title="功能2：发红包"></a>功能2：发红包</h3><p>用户使用微信支付完成付款，微信红包后台收到微信支付成功的通知。红包系统将红包发送订单状态更新，更新为用户已支付，并写入用户发红包记录表，这样用户可以在钱包中找到用户的发红包流水和收发红包的记录，之后微信红包系统调用微信通知，将微信红包信息发送到微信群。</p><h3 id="功能3：抢红包"><a href="#功能3：抢红包" class="headerlink" title="功能3：抢红包"></a>功能3：抢红包</h3><p>微信群中的用户收到红包消息之后，点开红包，开始抢红包，这个过程微信红包系统会检查红包是否已经被抢完，是否已经过期，是否已经抢过等验证逻辑。</p><h3 id="功能4：拆红包"><a href="#功能4：拆红包" class="headerlink" title="功能4：拆红包"></a>功能4：拆红包</h3><p>拆红包是整个发红包流程最复杂的一个操作，需要查询这个红包的红包订单，判断用户是否可以拆包，计算本次可拆到的红包金额，并记录抢红包流水。</p><p>拆红包包括如下步骤：</p><ul><li><p>1）查询这个红包发送订单，判断用户是否可拆，然后计算本次可拆到的红包金额；</p></li><li><p>2）然后写入一条抢红包记录。如果把拆红包过程，类比为一个秒杀活动的过程，相当于扣库存与写入秒杀记录的过程；</p></li><li><p>3）更新库存对应于更新红包发送订单，写入秒杀记录对应于写入这个红包的领取红包记录；</p></li><li><p>4）另外，还要写入用户整体的红包领取记录；</p></li><li><p>5）最后请求微信支付系统给拆到红包用户转入零钱，成功后更新抢红包的订单状态为已转账成功。</p></li></ul><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/5.png"></p><p>拆红包过程类似于一个秒杀活动的过程，需要做好库存扣减和秒杀记录的操作。</p><p>更新库存就是更新红包发送的订单，写入秒杀记录就是写入红包领取的信息流水。</p><p>还需要以用户为中心记录用户整体的红包领取记录。</p><p>最后调用支付系统将拆红包后的金额转入用户零钱中，成功之后更新抢红包的订单状态为转账成功。</p><blockquote><p>所以，在看此文之前，最好看看的高并发三部曲的Java高并发核心编程卷3*（注意是最新的清华大学出版社出版的加强版），里边有秒杀架构，可以作为知识铺垫。</p></blockquote><h4 id="微信红包的业务特点-1"><a href="#微信红包的业务特点-1" class="headerlink" title="微信红包的业务特点"></a>微信红包的业务特点</h4><p>微信红包，特别是群红包，业务形态上类似于普通商品的”秒杀”活动。</p><ul><li><p>包红包类似秒杀商品管理</p></li><li><p>发红包类似“秒杀”活动的商品上架；</p></li><li><p>抢红包等同于“秒杀”活动中的查询库存；</p></li><li><p>拆红包对应“秒杀”活动中用户的“秒杀”动作。</p><p>微信红包在业务形态上和普通商品”秒杀”活动相比，还有自身特点：</p></li></ul><ol><li><p><strong>海量并发请求</strong>：微信红包用户在微信群发一个红包，等同于在网上发布一次商品”秒杀”活动，假设同时有10万个群的用户同时发红包，那就相当于同一时间有10万个”秒杀”活动发布。10万个微信群的用户同时抢红包，将产生海量并发请求。</p></li><li><p><strong>更严格的安全级别</strong>：微信红包业务本质上是资金交易，微信红包是微信支付的一个商户，提供资金流转服务，用户发红包相当于在微信红包这个商户上使用微信支付购买了一笔”钱”，且收货地址是微信群。当用户支付成功后，红包”发货”到微信群里，群里的用户拆开红包后，微信红包提供了将”钱”转入拆红包用户微信零钱的服务。</p></li><li><p><strong>订单层南北独立体系</strong>：微信红包系统采用南北独立体系的订单层设计，即数据在南北两个系统中不同步。用户就近接入系统，请求发红包时，系统会根据用户所在地分配订单到南或北的系统，并在订单号上打上南北标识。这种设计有助于分摊流量，降低系统风险。</p></li><li><p><strong>流量闭环</strong>：在抢红包、拆红包、查红包详情列表时，接入层会根据红包单号上的南北标识，将流量分别引导到对应的南北系统闭环。这意味着，无论是发红包还是抢红包，用户都能够在就近的系统中完成操作，无需跨城，提高了系统的响应速度和稳定性。</p></li><li><p><strong>用户数据处理</strong>：微信红包系统的用户数据采取写多读少、全量保存的策略。用户数据的查询入口在微信钱包中，相对隐藏，访问量不会太大，且被视为可旁路的非关键信息，实时性要求不高。这种设计方式可以减少数据存储的压力，提高系统性能。</p></li><li><p><strong>实时计算红包金额</strong>：</p><p>微信红包的金额是在拆红包时实时计算的，而不是预先分配的。系统会在拆红包时取0.01到剩余平均值*2之间的数值作为红包金额。</p><p>这种实时计算的方式基于内存进行，不需要额外的存储空间，且计算效率很高。</p><p>同时，为了保证操作的原子性，拆包过程中使用了CAS（Compare-and-Swap）算法，确保每次只有一个并发用户拆包成功。如果拆包CAS失败，系统会自动进行重试，但也可能在重试过程中被其他用户抢得先机而空手而归。</p></li><li><p><strong>架构演进</strong>：随着微信红包功能的不断发展和用户量的增长，其系统架构也经历了不断的演进和优化。从最初的数据库硬抗整个流量，到后来的使用缓存（cache）抗流量，再到现在的南北独立体系等设计，都是为了更好地应对高并发、提升系统性能和稳定性。</p><p>资金交易业务比普通商品”秒杀”有更高的安全级别要求，普通的商品”秒杀”由商户提供，库存是商户预设，”秒杀”允许存在超卖和少卖的情况，但对于微信红包，用户发100元的红包绝对不可以拆出101元，以及只被领取99元时，剩下的1元在24小时过期后要精准退还给发红包用户。</p><p>总的来说，微信红包系统架构的设计充分考虑了用户量、并发量、性能要求等因素，通过南北独立体系、流量闭环、用户数据处理、实时计算红包金额以及架构演进等多种手段，保证了系统的稳定运行和良好用户体验。</p></li></ol><h4 id="微信红包的技术难点-1"><a href="#微信红包的技术难点-1" class="headerlink" title="微信红包的技术难点"></a>微信红包的技术难点</h4><p>微信红包系统架构的技术难点主要体现在以下几个方面：</p><ol><li><p><strong>高并发难点</strong>：</p><p>微信红包在特定时间（如春节、节假日等）会面临极高的并发量，如何有效地处理这些并发请求，保证系统的稳定性和响应速度，是红包系统架构设计的关键挑战之一。</p></li><li><p><strong>资金安全难点</strong>：</p><p>红包系统涉及到资金的转移和存储，因此资金安全是系统设计的重中之重。如何确保资金安全，防止被攻击或篡改，是系统架构设计中需要重点考虑的问题。</p><p>红包业务涉及资金交易，所以一定不能出现超卖、少卖的情况。</p></li></ol><ul><li><p>超卖：发了 10 块钱，结果抢到了 11 块钱，多的钱只能系统补上，如此为爱发电应用估计早就下架了；</p></li><li><p>少卖：发了 10 块钱，只抢了 9 块，多的钱得原封不动地退还用户，否则第二天就接到法院传单了。</p></li></ul><ol start="4"><li><p><strong>用户体验难点</strong></p><p>红包系统需要保证良好的用户体验，包括响应速度、公平性（先抢先得）、成功率等。</p><p>如何在高并发场景下保证用户体验，是系统架构设计的重要目标。</p><p>了解下微信红包的用户体验 的4大核心：摇&#x2F;发&#x2F;抢&#x2F;拆。</p></li></ol><ul><li><p>摇：摇的流畅</p></li><li><p>快：抢的要快</p></li><li><p>爽：拆的爽</p></li><li><p>稳：能分享出去</p></li></ul><ol start="6"><li><p><strong>数据一致性难点</strong>：</p><p>红包系统需要保证数据的一致性，包括红包库存数据、用户账户数据等。如何在高并发场景下保证数据的一致性，是系统架构设计的重要挑战。</p></li></ol><ul><li><p>参与用户越多，并发 DB 请求越大，数据越容易出现事务问题，所以系统得做好<strong>事务一致性</strong>；</p></li><li><p>抢红包系统涉及金钱交易，所以事务级别要求更高，<strong>不能出现脏数据</strong>。</p></li></ul><ol start="8"><li><p><strong>系统扩展性难点</strong>：</p><p>随着用户量和业务量的增长，红包系统需要具备良好的扩展性，能够方便地增加新的功能或提升性能。</p><p>如何设计可扩展的系统架构，是系统架构设计的重要考虑因素。</p><p>为了解决这些技术难点，我们可以采用多种技术手段，如分而治之、负载均衡、读写分离、水平切分、垂直切分等，来提升系统的性能和稳定性。同时，系统还采用了柔性服务、系统降级等策略，来保证在有限资源下满足用户的核心需求。</p></li></ol><h3 id="红包系统概要设计"><a href="#红包系统概要设计" class="headerlink" title="红包系统概要设计"></a>红包系统概要设计</h3><h4 id="系统功能说明-1"><a href="#系统功能说明-1" class="headerlink" title="系统功能说明"></a>系统功能说明</h4><p>抢红包功能允许用户在群聊中发送任意个数和金额的红包，群成员可以抢到随机金额的红包，但要<strong>保证每个用户的红包金额不小于 0.01 元</strong>。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/3.png"><br>抢红包的详细交互流程如下：</p><ol><li><p>用户接收到抢红包通知，点击通知打开群聊页面；</p></li><li><p>用户点击抢红包，后台服务验证用户资格，确保用户尚未领取过此红包；</p></li><li><p>若用户资格验证通过，后台服务分配红包金额并存储领取记录；</p></li><li><p>用户在微信群中看到领取金额，红包状态更新为“已领取”；</p></li><li><p>异步调用支付接口，将红包金额更新到钱包里。</p></li></ol><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><strong>红包表：redpack</strong></p><p>红包表用来记录用户发了多少红包，以及需要维护的剩余金额，</p><p>红包表：redpack的字段如下：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>主键，红包ID。</td></tr><tr><td>user_id</td><td>发送红包的用户id。</td></tr><tr><td>total_amount</td><td>红包总金额。</td></tr><tr><td>surplus_amount</td><td>红包剩余金额。</td></tr><tr><td>total</td><td>红包总数。</td></tr><tr><td>surplus_total</td><td>剩余红包总数。</td></tr></tbody></table><p><strong>红包记录表：redpack_record</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>主键，记录id。</td></tr><tr><td>redpack_id</td><td>红包id。</td></tr><tr><td>user_id</td><td>用户id。</td></tr><tr><td>amount</td><td>抢到的金额。</td></tr></tbody></table><h4 id="发红包-1"><a href="#发红包-1" class="headerlink" title="发红包"></a>发红包</h4><p>设置完红包参数后，微信支付，完成付款，然后收到付款成功通知，红包系统更新红包订单状态，更新为已支付，并写入红包发送记录表。</p><p>这样用户可以将用户的红包信息和红包的收发记录发出，红包系统调用微信通知，将红包信息发送到微信群。</p><p>发红包的交互步骤如下：</p><ol><li><p>用户设置红包的总金额和个数后，在红包表中增加一条数据，开始发红包；</p></li><li><p>为了保证实时性和抢红包的效率，在 Redis 中增加一条记录，<strong>存储红包 ID 和总人数 n</strong>；</p></li><li><p>抢红包消息推送给所有群成员。</p></li></ol><h4 id="抢红包-1"><a href="#抢红包-1" class="headerlink" title="抢红包"></a>抢红包</h4><p>微信群用户收到红包后，点开，红包系统会校验红包是否被抢完，是否过期。</p><p>微信红包的抢红包和拆红包是两个分离的服务，用户点击抢红包后需要进行两次操作。</p><p>这也是为什么明明有时候抢到了红包，点开后却发现<strong>该红包已经被领取完了</strong>。</p><p>抢红包的交互步骤如下：</p><ol><li><p>抢红包：抢操作在 Redis 缓存层完成，通过原子递减的操作来更新红包个数，个数递减为 0 后就说明抢光了。</p></li><li><p>拆红包：拆红包时，首先会实时计算金额，一般是通过二倍均值法实现（即 0.01 到剩余平均值的 2 倍之间）。</p></li><li><p>红包记录：用户获取红包金额后，通过数据库的事务操作累加已经领取的个数和金额，并更新红包表和记录表。</p></li><li><p>转账：为了提升效率，最终的转账为异步操作，这也是为什么在春节期间，红包领取后不能立即在余额中看到的原因。</p></li></ol><h2 id="红包系统详细设计"><a href="#红包系统详细设计" class="headerlink" title="红包系统详细设计"></a>红包系统详细设计</h2><h3 id="红包整体架构"><a href="#红包整体架构" class="headerlink" title="红包整体架构"></a>红包整体架构</h3><p>如下图所示，是微信红包的系统架构</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/4.png"><br>总体是三层架构：</p><ul><li><p>首先是微信统一接入层，下面是微信红包系统 API，包括发、抢、拆、查红包详情、查红包用户列表。</p></li><li><p>接入层下面，是封装微信红包关键业务的逻辑服务；</p></li><li><p>业务下面数据存储层，微信红包最主要的数据是订单数据，包括发红包订单和拆红包订单两部分。</p></li></ul><p>数据存储层的冷热分离设计：微信红包数据的访问热度，随着时间流逝会急剧降低，也就是数据的访问时间段非常集中，一般红包发出三天后，99% 的用户不会再去点开这个红包了。因此微信红包系统采取按时间做冷热数据分离，降低数据的存储成本，同时提升了热数据的访问性能。</p><p>除了在线计算的三层架构，还有离线处理的数据分析。</p><p>数据分析平台用于对红包数据的分析计算，比如朋友圈里的文章，统计从 某年 1 月 1 日到 2017 年 1 月一个用户总共抢红包的金额，在全国的排名情况，发红包数最多的城市等。</p><p>数据分析平台另外一个作用就是对账，红包的订单和微信支付的订单需要对账，以保证最终资金的一致性；</p><ul><li><p>订单的数据和订单的 cache 需要做对账，以保证数据的完整性；</p></li><li><p>订单数据和用户的收发记录需要对账，以保证用户列表完整性。</p></li></ul><h3 id="高并发常用解决方案"><a href="#高并发常用解决方案" class="headerlink" title="高并发常用解决方案"></a>高并发常用解决方案</h3><p>普通商品秒杀系统，解决高并发问题的方案，大致有以下2种：</p><h3 id="1-使用内存替代实时的DB"><a href="#1-使用内存替代实时的DB" class="headerlink" title="1- 使用内存替代实时的DB"></a>1- 使用内存替代实时的DB</h3><p>将实时扣库存的行为上移到内存Cache中，内存Cache操作成功直接给Server返回成功，然后异步落DB持久化。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/8.png"><br>这个方案的优缺点如下：</p><blockquote><p>优点：用内存操作替代磁盘操作，提高了并发性能。</p><p>缺点：在内存操作成功DB持久化失败，或者内存Cache故障的情况下，DB持久化会丢数据，不适合微信红包这种资金交易系统。</p></blockquote><h3 id="2-使用乐观锁替代悲观锁"><a href="#2-使用乐观锁替代悲观锁" class="headerlink" title="2- 使用乐观锁替代悲观锁"></a>2- 使用乐观锁替代悲观锁</h3><p><strong>什么是悲观锁呢？</strong></p><p>所谓悲观锁，是关系数据库管理系统里的一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作对某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。对应于上文分析中的“并发请求抢锁”行为。</p><p><strong>什么是乐观锁呢？</strong></p><p>所谓乐观锁，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p><p>乐观锁分为DB乐观锁和 JVM CAS 乐观锁。</p><p>DB乐观锁的具体应用方法，是在 DB 的“库存”记录中维护一个版本号。</p><p>商品“秒杀”系统中，在更新“库存”的操作进行前，先去 DB 获取当前版本号。</p><p>在更新库存的事务提交时，检查该版本号是否已被其他事务修改。如果版本没被修改，则提交事务，且版本号加 1；如果版本号已经被其他事务修改，则回滚事务，并给上层报错。</p><p>DB乐观锁可以提高DB的并发处理能力，但是如果应用于微信红包系统，则会存在下面三个问题：</p><ol><li><p>如果拆红包采用乐观锁，那么在并发抢到相同版本号的拆红包请求中，只有一个能拆红包成功，其他的请求将事务回滚并返回失败，给用户报错，用户体验完全不可接受。</p></li><li><p>如果采用乐观锁，将会导致第一时间同时拆红包的用户有一部分直接返回失败，反而那些“手慢”的用户，有可能因为并发减小后拆红包成功，这会带来用户体验上的负面影响。</p></li><li><p>如果采用乐观锁的方式，会带来大数量的无效更新请求、事务回滚，给 DB 造成不必要的额外压力。</p></li></ol><h4 id="JVM-CAS-乐观锁方案-1"><a href="#JVM-CAS-乐观锁方案-1" class="headerlink" title="JVM CAS 乐观锁方案"></a>JVM CAS 乐观锁方案</h4><p>出于性能原因，微信红包系统使用 JVM CAS 乐观锁，而不是DB乐观锁的方式解决并发抢锁问题。</p><p>微信红包的金额是在拆红包时实时计算的，而不是预先分配的。系统会在拆红包时取0.01到剩余平均值*2之间的数值作为红包金额。</p><p>这种实时计算的方式基于JVM 内存进行，不需要额外的存储空间，且计算效率很高。</p><p>同时，为了保证操作的原子性，拆包过程中使用了CAS（Compare-and-Swap）算法，确保每次只有一个并发用户拆包成功。如果拆包CAS失败，系统会自动进行重试，但也可能在重试过程中被其他用户抢得先机而空手而归。</p><p>如何保证同一个红包由同一个节点去拆包呢？将同一个红包 ID 的所有请求 stick 到同一台 Server，这个后面介绍。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h2 id="微信红包系统的高并发解决方案"><a href="#微信红包系统的高并发解决方案" class="headerlink" title="微信红包系统的高并发解决方案"></a>微信红包系统的高并发解决方案</h2><p>综合上面的分析，我们的红包系统针对相应的技术难点，采用如下3个方案，解决高并发问题。</p><h5 id="1-分而治之：系统架构设计垂直Set化。-1"><a href="#1-分而治之：系统架构设计垂直Set化。-1" class="headerlink" title="1- 分而治之：系统架构设计垂直Set化。"></a>1- 分而治之：系统架构设计垂直Set化。</h5><p><strong>什么是Set（单元）化架构呢?</strong></p><blockquote><p>单元化架构是一种将系统划分为多个独立的、自包含的单元的部署架构，每个单元都能够完成所有业务操作，包含所有业务所需的服务以及分配给该单元的数据。这种架构将单元作为部署的基本单位，在全站所有机房中部署多个单元，每个机房内的单元数目不固定，但任一单元均部署系统所需的全部应用。数据则是全量数据按照某种维度划分后的一部分。与传统意义上的SOA（服务化）架构不同，单元化架构下，服务仍然是分层的，但每一层中的任意一个节点都属于且仅属于某一个单元，上层调用下层时，仅会选择本单元内的节点。</p></blockquote><p><strong>通俗的理解为</strong>：</p><p>单元化架构，简单来说，就是把系统拆分成若干个独立的单元，每个单元都包含了完成业务操作所需的所有服务和数据。这些单元可以独立部署、管理和监控，就像一个个小房子，每个房子都有自己的客厅、卧室和厨房（服务），也有自己的食物和水（数据）。</p><p>如下图，是一种单元化架构设计。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/6.png"></p><p>微信红包用户发一个红包时，微信红包系统生成一个 ID 作为这个红包的唯一标识。</p><p>接下来这个红包的所有发红包、抢红包、拆红包、查询红包详情等操作，都根据这个 ID 关联。</p><p>红包系统根据这个红包 ID，按一定的规则（如按 ID 尾号取模等），垂直上下切分。</p><p>切分后，一个垂直链条上的逻辑 Server 服务器、DB 统称为一个 SET。</p><p>各个 SET 之间相互独立，互相解耦。并且同一个红包 ID 的所有请求，包括发红包、抢红包、拆红包、查详情详情等，垂直 stick 到同一个 SET 内处理，高度内聚。</p><p>通过这样的方式，系统将所有红包请求这个巨大的洪流分散为多股小流，互不影响，分而治之，如下图所示。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/7.png"><br>这个方案解决了同时存在海量事务级操作的问题，将<strong>海量化为小量</strong>。</p><h5 id="2-解决DB并发：逻辑Server层将请求排队。-1"><a href="#2-解决DB并发：逻辑Server层将请求排队。-1" class="headerlink" title="2- 解决DB并发：逻辑Server层将请求排队。"></a>2- 解决DB并发：逻辑Server层将请求排队。</h5><p>红包系统是资金交易系统，DB 操作的事务性无法避免，所以会存在“并发抢锁”问题。但是如果到达 DB 的事务操作（也即拆红包行为）不是并发的，而是串行的，就不会存在“并发抢锁”的问题了。</p><p>按这个思路，为了使拆红包的事务操作串行地进入 DB，只需要将请求在 Server 层以 FIFO（先进先出）的方式排队，就可以达到这个效果。从而问题就集中到 Server 的 FIFO 队列设计上。</p><p>红包系统设计了分布式的、轻巧的、灵活的 FIFO 队列方案。其具体实现如下：</p><p><strong>1）将同一个红包 ID 的所有请求 stick 到同一台 Server。</strong></p><p>上面 SET 化方案已经介绍，同个红包 ID 的所有请求，按红包 ID stick 到同个 SET 中。</p><p>不过在同个 SET 中，会存在多台 Server 服务器同时连接同一台 DB（基于容灾、性能考虑，需要多台 Server 互备、均衡压力）。</p><p>为了使同一个红包 ID 的所有请求，stick 到同一台 Server 服务器上，在 SET 化的设计之外，微信红包系统添加了一层基于红包 ID hash 值的分流，如下图所示。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><p><strong>2）设计单机请求排队方案。</strong></p><p>将 stick 到同一台 Server 上的所有请求在被接收进程接收后，按红包 ID 进行排队。</p><p>然后串行地进入 worker 进程（执行业务逻辑）进行处理，从而达到排队的效果，如下图所示。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/9.png"><br><strong>3）增加 Redis缓存 控制并发。</strong></p><p>为了防止 Server 中的请求队列过载导致队列被降级，从而所有请求拥进 DB，系统增加了与 Server 服务器同机部署的 Redis ，用于控制拆同一个红包的请求并发数。</p><p>具体来说，利用 Redis 的 CAS 原子累增操作，控制同时进入 DB 执行拆红包事务的请求数，超过预先设定数值则直接拒绝服务。用于 DB 负载升高时的降级体验。</p><p>通过以上三个措施，系统有效地控制了 DB 的“并发抢锁”情况。</p><h5 id="3-系统性能稳定性保障：双维度分库分表设计。-1"><a href="#3-系统性能稳定性保障：双维度分库分表设计。-1" class="headerlink" title="3- 系统性能稳定性保障：双维度分库分表设计。"></a>3- 系统性能稳定性保障：双维度分库分表设计。</h5><p>红包系统的分库表规则，初期是根据红包 ID 的 hash 值分为多库多表。</p><p>随着红包数据量逐渐增大，单表数据量也逐渐增加。而 DB 的性能与单表数据量有一定相关性。当单表数据量达到一定程度时，DB 性能会有大幅度下降，影响系统性能稳定性。</p><p>采用冷热分离，将历史冷数据与当前热数据分开存储，可以解决这个问题。</p><p>处理微信红包数据的冷热分离时，系统在以红包 ID 维度分库表的基础上，增加了以循环天分表的维度，形成了双维度分库表的特色。</p><p>具体来说，就是分库表规则像 db_xx.t_y_dd 设计，其中，xx&#x2F;y 是红包 ID 的 hash 值后三位，dd 的取值范围在 01~31，代表一个月天数最多 31 天。</p><p>通过这种双维度分库表方式，解决了 DB 单表数据量膨胀导致性能下降的问题，保障了系统性能的稳定性。同时，在热冷分离的问题上，又使得数据搬迁变得简单而优雅。</p><p>综上所述，微信红包系统在解决高并发问题上的设计，主要采用了 <strong>SET 化分治</strong>、<strong>请求排队</strong>、<strong>双维度分库表</strong>等方案，使得单组 DB 的并发性能大幅度提升，取得了很好的效果。</p><h4 id="红包分配算法-1"><a href="#红包分配算法-1" class="headerlink" title="红包分配算法"></a>红包分配算法</h4><p>抢红包后，我们需要进行拆红包，接下来我们讨论一下红包系统的红包分配算法。</p><p>红包金额分配时，由于是随机分配，所以有两种实现方案：<strong>实时拆分和预先生成</strong></p><h5 id="1-实时拆分-1"><a href="#1-实时拆分-1" class="headerlink" title="1- 实时拆分"></a>1- 实时拆分</h5><p>实时拆分，指的是在<strong>抢红包时实时计算</strong>每个红包的金额，以实现红包的拆分过程。</p><p>这个对系统性能和拆分算法要求较高，例如拆分过程要一直保证后续待拆分红包的金额不能为空，不容易做到拆分的红包金额服从<strong>正态分布</strong>规律。</p><h5 id="2-预先生成-1"><a href="#2-预先生成-1" class="headerlink" title="2- 预先生成"></a>2- 预先生成</h5><p>预先生成，指的是在红包<strong>开抢之前</strong>已经完成了红包的<strong>金额拆分</strong>，抢红包时只是依次取出拆分好的红包金额。</p><p>这种方式对拆分算法要求较低，可以拆分出随机性很好的红包金额，但通常需要结合队列使用。</p><h5 id="3-二倍均值法-1"><a href="#3-二倍均值法-1" class="headerlink" title="3- 二倍均值法"></a>3- 二倍均值法</h5><p>综合上述优缺点考虑，以及微信群聊中的人数不多（目前最高 500 人），所以我们采用实时拆分的方式，用<strong>二倍均值法</strong>来生成随机红包，只满足随机即可，不需要正态分布。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">使用二倍均值法生成的随机数，每次随机金额会在  0.01 ~ 剩余平均值\*2 之间。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设当前红包剩余金额为 10 元，剩余个数为 5，<strong>10&#x2F;5 &#x3D; 2</strong>，则当前用户可以抢到的红包金额为：<strong>0.01 ~ 4</strong> 元之间。</p><p>以下是使用Java实现的二倍均值算法，在红包分配场景中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class RedPacketDistribution &#123;  </span><br><span class="line">  </span><br><span class="line">    public static List&lt;BigDecimal&gt; distribute(BigDecimal totalAmount, int totalCount) &#123;  </span><br><span class="line">        // 校验总金额是否为正  </span><br><span class="line">        if (totalAmount.compareTo(BigDecimal.ZERO) &lt;= 0) &#123;  </span><br><span class="line">            throw new IllegalArgumentException(&quot;Invalid parameter, totalAmount must be positive.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        // 校验红包总数是否至少为1  </span><br><span class="line">        if (totalCount &lt; 1) &#123;  </span><br><span class="line">            throw new IllegalArgumentException(&quot;Invalid parameter, totalCount must be at least 1.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        List&lt;BigDecimal&gt; redPacketList = new ArrayList&lt;&gt;(totalCount);  </span><br><span class="line">        BigDecimal remainingAmount = totalAmount.multiply(BigDecimal.valueOf(2)); // 初始化为总金额的两倍  </span><br><span class="line">        ThreadLocalRandom random = ThreadLocalRandom.current(); // 使用线程安全的随机数生成器  </span><br><span class="line">  </span><br><span class="line">        for (int i = 0; i &lt; totalCount - 1; i++) &#123;  </span><br><span class="line">            // 随机获取一个幸运值，范围在\[0, 当前剩余金额)  </span><br><span class="line">            BigDecimal luckValue = BigDecimal.valueOf(random.nextDouble()).multiply(remainingAmount);  </span><br><span class="line">            // 计算并添加实际分配的红包金额（幸运值的一半）  </span><br><span class="line">            BigDecimal amount = luckValue.divide(BigDecimal.valueOf(2), BigDecimal.ROUND\_HALF\_DOWN);  </span><br><span class="line">            redPacketList.add(amount);  </span><br><span class="line">            // 更新剩余金额  </span><br><span class="line">            remainingAmount = remainingAmount.subtract(luckValue);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 最后一个红包直接拿走剩余的全部金额，确保总和正确  </span><br><span class="line">        redPacketList.add(remainingAmount.divide(BigDecimal.valueOf(2), BigDecimal.ROUND\_HALF\_DOWN));  </span><br><span class="line">  </span><br><span class="line">        return redPacketList;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line">        BigDecimal totalAmount = new BigDecimal(&quot;100.00&quot;); // 红包总金额  </span><br><span class="line">        int totalCount = 10;      // 红包个数  </span><br><span class="line">        List&lt;BigDecimal&gt; redPackets = distribute(totalAmount, totalCount);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;Red packet distribution:&quot;);  </span><br><span class="line">        for (BigDecimal amount : redPackets) &#123;  </span><br><span class="line">            System.out.printf(&quot;%.2f, &quot;, amount);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h2 id="红包系统高可用架构设计"><a href="#红包系统高可用架构设计" class="headerlink" title="红包系统高可用架构设计"></a>红包系统高可用架构设计</h2><p>红包业务量级的高速发展，对后台系统架构的可用性要求越来越高。在保障微信红包业务体验的前提下，红包后台系统进行了一系列高可用方面的优化设计。</p><p>要保障红包系统架构的高可用性，可以从多个方面进行优化和设计。以下是一些详细说明：</p><ol><li><strong>系统架构设计</strong>：</li></ol><ul><li><p><strong>信息流、业务流、资金流分离</strong>：红包系统由信息流、业务流、资金流三部分组成，这三部分在组织架构上应由不同的后台团队完成，以提高系统的模块化和可维护性。</p></li><li><p><strong>微服务架构</strong>：采用微服务架构，将红包系统拆分成多个独立的服务，每个服务负责特定的功能，这样可以提高系统的可扩展性和容错性。</p></li><li><p><strong>无状态设计</strong>：确保红包系统的服务是无状态的，即服务不需要保存用户的会话信息，这样可以提高系统的并发处理能力和可靠性。</p></li></ul><ol start="3"><li><strong>高可用性策略</strong>：</li></ol><ul><li><p><strong>冗余部署</strong>：将系统的关键组件部署在多台服务器上，通过搭建主备或者集群的架构来实现冗余。当主服务器出现故障时，备用服务器能够自动接管，保证系统的可用性。</p></li><li><p><strong>负载均衡</strong>：通过将流量分发到多台服务器上，均衡系统的请求负载，提高系统的可用性和扩展性。负载均衡可以通过硬件（如负载均衡器）或者软件（如Nginx、HAProxy）实现。</p></li><li><p><strong>服务容器化</strong>：使用容器技术（如Docker、Kubernetes）将应用程序与其依赖项打包为容器，实现快速部署、弹性扩展和自动化管理。容器化可以提高系统的可移植性、弹性和可伸缩性，从而增加系统的高可用性。</p></li></ul><ol start="5"><li><strong>数据保障</strong>：</li></ol><ul><li><p><strong>数据备份与恢复</strong>：定期对关键数据进行备份，并确保备份的数据可用性。这样，在发生数据丢失或损坏时，可以快速恢复数据，减少系统停机时间。</p></li><li><p><strong>分布式缓存</strong>：使用多级缓存技术（如Redis、Memcached等），将数据分别存储在内存缓存、本地缓存和分布式缓存中，以提高访问速度和降低数据库压力。</p></li><li><p><strong>数据一致性</strong>：使用分布式锁技术来保护红包的领取操作，确保每个用户只能领取一次红包。同时，为了保证数据一致性，可以采用消息队列等技术实现请求的异步处理和结果的返回。</p></li></ul><ol start="7"><li><strong>监控与告警</strong>：</li></ol><ul><li><p><strong>系统监控</strong>：对红包系统的关键指标（如请求量、响应时间、错误率等）进行实时监控，以便及时发现和解决潜在问题。</p></li><li><p><strong>告警机制</strong>：设置合理的告警阈值，当系统出现异常情况时，及时发送告警通知给相关人员，以便快速响应和处理。</p></li></ul><ol start="9"><li><p><strong>安全性保障</strong>：</p><p>通过以上措施的综合应用，可以大大提高红包系统架构的高可用性，确保系统在高峰时段能够稳定、高效地运行。</p></li></ol><ul><li><p><strong>访问控制</strong>：实施严格的访问控制策略，确保只有授权的用户才能访问红包系统。</p></li><li><p><strong>数据加密</strong>：对敏感数据进行加密存储和传输，以防止数据泄露和篡改。</p></li><li><p><strong>安全审计</strong>：定期对红包系统进行安全审计和漏洞扫描，及时修复发现的安全漏洞和隐患。</p></li></ul><h4 id="1-系统可用性影响因素-1"><a href="#1-系统可用性影响因素-1" class="headerlink" title="1 - 系统可用性影响因素"></a>1 - 系统可用性影响因素</h4><p><strong>系统的可用性影响因素可分成两类：</strong></p><ul><li><p>一类计划外；</p><p>计划外包含很多因素，系统用到的所有东西都可能产生故障，都可能成功影响可用性的因素。从这个角度上来讲，可以说故障是无法避免的，系统的运作一定会产生故障，尤其是服务器有成千上万个的时候。</p></li><li><p>一类计划内。</p><p>计划内的影响因素，主要有与升级相关、运维相关的操作，以及日常的备份等。这一类影响因素，通过精细地设计方案，是可以避免对可用性造成影响的。</p></li></ul><h4 id="2-红包系统可用性设计方向-1"><a href="#2-红包系统可用性设计方向-1" class="headerlink" title="2 - 红包系统可用性设计方向"></a>2 - 红包系统可用性设计方向</h4><p>基于上面两个分析结论，可以总结出红包系统的可用性的设计方向。</p><blockquote><p>1.在不能避免意外故障的情况下，尽可能降低出现意外故障时对可用性的影响。</p><p>2.绝大多数计划内的日常维护可以通过方案的设计避免影响可用性，其中平行扩容特指关于存储层的平行扩容。</p></blockquote><p>下面从降低故障影响和微信红包系统的平行扩容两方面进行分析。</p><p>首先是降低意外故障的影响，重点讲解订单存储层在订单 DB 故障的情况下如何降低对红包系统可用性的影响。</p><h4 id="3-业务逻辑层-部署方案设计-1"><a href="#3-业务逻辑层-部署方案设计-1" class="headerlink" title="3 - 业务逻辑层 - 部署方案设计"></a>3 - 业务逻辑层 - 部署方案设计</h4><p>首先是业务逻辑层的部署方案。业务逻辑层是无状态的，微信红包系统的业务逻辑层，部署在两个城市，即两地部署，每一个城市部署至少三个园区，即三个 IDC。并且每个服务需要保证三个 IDC 的部署均衡。另外，三个 IDC 总服务能力需要冗余三分之一，当一个 IDC 出现故障时，服务能力仍然足够。从而达到 IDC 故障不会对可用性产生影响。</p><h4 id="4-业务逻辑层-异步化设计-1"><a href="#4-业务逻辑层-异步化设计-1" class="headerlink" title="4 - 业务逻辑层 - 异步化设计"></a>4 - 业务逻辑层 - 异步化设计</h4><p>如下图所示，微信红包的某些步骤不实时完成也不会影响用户对红包业务可用性的体验。</p><p>比如拆红包，正常的业务流程很长，但关键步骤只有订单相关的几步。</p><p>至于转零钱、写红包记录等操作不需要实时。</p><p>用户抢到红包时，一般不会实时去钱包查看微信零钱，而是在微信群中点开消息查看本次抢到金额和他人抢红包金额。</p><p>所以拆红包时只需要从 cache 查询用户是否拆过红包，然后写入拆红包的订单记录，更新发红包订单，其他的操作都可以异步化。</p><p>当然，不是每个业务都可以进行异步化设计，需要进行业务分析，判断是否存在非关键步骤之外的事情可以将其异步化，并通过异步对账保证最终一致。</p><p>经过上述分析之后，可以采用如下思路与方案：</p><blockquote><p>实现思路：</p><p>1.最简关键路径：简化发红包、拆红包核心流程路径，重点关注与订单相关流程。</p><p>2.快慢分离：将核心流程与其他非关键步骤分离。</p><p>方案：</p><p>1.写用户记录、零钱入账使用MQ异步执行</p><p>2.增加对帐机制保障最终一致。</p></blockquote><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/11.png"><br>如上图所示，微信红包的某些步骤不实时完成也不会影响用户对红包业务可用性的体验。</p><p>比如拆红包，正常的业务流程很长，但关键步骤只有订单相关的几步。</p><p>至于转零钱、写红包记录等操作不需要实时。</p><p>用户抢到红包时，一般不会实时去钱包查看微信零钱，而是在微信群中点开消息查看本次抢到金额和他人抢红包金额。</p><p>所以拆红包时只需要从 cache 查询用户是否拆过红包，然后写入拆红包的订单记录，更新发红包订单，其他的操作都可以异步化。</p><p>当然，不是每个业务都可以进行异步化设计，需要进行业务分析，判断是否存在非关键步骤之外的事情可以将其异步化，并通过异步对账保证最终一致。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h4 id="5-订单存储层-故障自愈-1"><a href="#5-订单存储层-故障自愈-1" class="headerlink" title="5 - 订单存储层 - 故障自愈"></a>5 - 订单存储层 - 故障自愈</h4><p>为解决 DB 间的相互影响，需要将 DB 间相互隔离，订单存储层 SET 化。</p><p>SET 化指订单 DB 和订单接入 SERVER 垂直 stick 一起。业务逻辑层访问订单时，根据订单倒数第二、三位数字找到所属订单 SET，一个 SET 的请求不能路由到其他 SET。</p><p>通过 SET 化得到的好处是，控制 DB 连接数、隔离故障影响和分流并发。</p><p><img src="/./2024/05/28/%E7%99%BE%E4%BA%BF%E6%B5%81%E9%87%8F%E7%BA%A2%E5%8C%85%E7%B3%BB%E7%BB%9F/10.png"><br>如上图所示，所设尾号 90-99 的 SET 故障时，如果业务逻辑服务后续不再生成属于这个 SET 的订单，那后续的业务就可以逐渐恢复。</p><p>也就是在发生故障时，业务逻辑层发布一个版本，屏蔽故障号段的单号生成，就可以恢复业务。</p><p>进一步想，除了人为发版本，有没有方法可以让 DB 故障时自动恢复？</p><p>在 DB 故障导致业务失败时，业务逻辑层可获取到故障 DB 的号段，在发红包时，将这些故障的号段，换一个可用的号段就可恢复业务。</p><p>订单号除了最后三位，前面的部分已能保证该红包唯一性，后面的数字只代表着分库表信息，故障时只需要将最后三位换另外一个 SET 便可自动恢复。</p><p>完成这个设计后，即使 DB 出现故障，业务的可用性也不会有影响。</p><p>这里还有一点，新的发红包请求可避免 DB 故障的影响，但那些故障之前已发出未被领取的红包，红包消息已发送到微信群，单号已确定，拆红包时还是失败。</p><p>对这种情况，由于不会有增量，采用正常的主备切换解决即可。</p><h4 id="6-订单存储层-平行扩容设计-1"><a href="#6-订单存储层-平行扩容设计-1" class="headerlink" title="6 - 订单存储层 - 平行扩容设计"></a>6 - 订单存储层 - 平行扩容设计</h4><p>红包系统的高可用架构设计，主要包括了部署设计、SET 化设计、异步化设计、DB 故障自愈能力建设、平行扩容设计。</p><blockquote><p>以上内容比较复杂，架构团队会录制成为架构视频， 帮助大家做架构拿高薪。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>红包系统是一个高并发的资金交易系统，最大的技术挑战是保障并发性能与资金安全。</p><p>这种全新的技术挑战，传统的“秒杀”系统设计方案已不能完全解决。</p><p>在分析了业界“秒杀”系统解决方案的基础上，红包系统采用了 SET 化、请求排队串行化、双维度分库表等设计，形成了独特的高并发、资金安全系统解决方案。</p><h2 id="说在最后：有问题找老架构取经"><a href="#说在最后：有问题找老架构取经" class="headerlink" title="说在最后：有问题找老架构取经"></a>说在最后：有问题找老架构取经</h2><p>超高并发红包架构，一定是一个超级牛掰的简历亮点项目，黄金项目，稍微晚点把全量的架构方案和视频进行发布。</p><p>这个项目写入简历，面试的时候如果大家能对答如流，如数家珍，基本上 面试官会被你 震惊到、吸引到。</p><p>最终，<strong>让面试官爱到 “不能自已、口水直流”</strong>。offer， 也就来了。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>场景设计面试题</title>
      
      <link href="/2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号-姓名，而B文件存放学号-分数，要求生成文件C，存放姓名和分数。怎么实现？"><a href="#有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号-姓名，而B文件存放学号-分数，要求生成文件C，存放姓名和分数。怎么实现？" class="headerlink" title="有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号+姓名，而B文件存放学号+分数，要求生成文件C，存放姓名和分数。怎么实现？"></a>有A、B两个大文件，每个文件几十G，而内存只有4G，其中A文件存放学号+姓名，而B文件存放学号+分数，要求生成文件C，存放姓名和分数。怎么实现？</h2><ul><li>hash(学号)%1000，A到a0….a1000,B到b0~b1000</li><li>学号相同的人一定hash到相同序号的小文件</li><li>加载序号相同的小文件（比如：读取a2和b2）用map储存再按姓名+分数写入C即可</li></ul><h2 id="秒杀系统怎么设计"><a href="#秒杀系统怎么设计" class="headerlink" title="秒杀系统怎么设计"></a>秒杀系统怎么设计</h2><h3 id="秒杀存在的问题"><a href="#秒杀存在的问题" class="headerlink" title="秒杀存在的问题"></a>秒杀存在的问题</h3><ul><li>高并发、瞬间请求量极大</li><li>黄牛、黑客恶意请求</li><li>链接暴露问题</li><li>数据库压力问题</li><li>库存不足和超卖问题</li></ul><h3 id="如何解决这些问题"><a href="#如何解决这些问题" class="headerlink" title="如何解决这些问题"></a>如何解决这些问题</h3><ul><li>页面静态化<ul><li>秒杀活动的页面，大多数内容都是固定不变的，如商品名称，商品图片等等，可以对活动页面做静态化处理，减少访问服务端的请求。秒杀用户会分布在全国各地，有的在上海，有的在深圳，地域相差很远，网速也各不相同。为了让用户最快访问到活动页面，可以使用CDN（Content Delivery Network，内容分发网络）。CDN可以让用户就近获取所需内容。</li></ul></li><li>按钮至灰控制<ul><li>秒杀活动开始前，按钮一般需要置灰的。只有时间到了，才能变得可以点击。这是防止，秒杀用户在时间快到的前几秒，疯狂请求服务器，然后秒杀时间点还没到，服务器就自己挂了。</li></ul></li><li>服务单一职责<ul><li>我们都知道微服务设计思想，也就是把各个功能模块拆分，功能那个类似的放一起，再用分布式的部署方式。</li><li>如用户登录相关的，就设计个用户服务，订单相关的就搞个订单服务，再到礼物相关的就搞个礼物服务等等。那么，秒杀相关的业务逻辑也可以放到一起，搞个秒杀服务，单独给它搞个秒杀数据库。</li><li>服务单一职责有个好处：如果秒杀没抗住高并发的压力，秒杀库崩了，服务挂了，也不会影响到系统的其他服务。</li></ul></li><li>秒杀链接加盐<ul><li>链接如果明文暴露的话，会有人获取到请求Url，提前秒杀了。因此，需要给秒杀链接加盐。可以把URL动态化，如通过MD5加密算法加密随机的字符串去做url。</li></ul></li><li>限流<ul><li>一般有两种方式限流：nginx限流和redis限流。</li><li>为了防止某个用户请求过于频繁，我们可以对同一用户限流；</li><li>为了防止黄牛模拟几个用户请求，我们可以对某个IP进行限流；</li><li>为了防止有人使用代理，每次请求都更换IP请求，我们可以对接口进行限流。</li><li>为了防止瞬时过大的流量压垮系统，还可以使用阿里的Sentinel、Hystrix组件进行限流。</li></ul></li><li>分布式锁<ul><li>可以使用redis分布式锁解决超卖问题。</li><li>使用Redis的SET EX PX NX + 校验唯一随机值,再删除释放锁。</li><li>为了更严谨，一般也是用lua脚本代替。lua脚本如下：</li></ul></li><li>MQ异步处理<ul><li>如果瞬间流量特别大，可以使用消息队列削峰，异步处理。用户请求过来的时候，先放到消息队列，再拿出来消费。</li></ul></li><li>限流&amp;降级&amp;熔断<ul><li>限流，就是限制请求，防止过大的请求压垮服务器；</li><li>降级，就是秒杀服务有问题了，就降级处理，不要影响别的服务；</li><li>熔断，服务有问题就熔断，一般熔断降级是一起出现。</li></ul></li></ul><h2 id="产品上线出问题怎么定位错误"><a href="#产品上线出问题怎么定位错误" class="headerlink" title="产品上线出问题怎么定位错误"></a>产品上线出问题怎么定位错误</h2><ul><li>复现问题</li><li>top jstack</li></ul><h2 id="大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案"><a href="#大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案" class="headerlink" title="大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案"></a>大量并发查询用户商品信息，MySQL压力大查询慢，保证速度怎么优化方案</h2><p>读写分离</p><h2 id="海量日志数据，提取出某日访问百度次数最多的那个IP。"><a href="#海量日志数据，提取出某日访问百度次数最多的那个IP。" class="headerlink" title="海量日志数据，提取出某日访问百度次数最多的那个IP。"></a>海量日志数据，提取出某日访问百度次数最多的那个IP。</h2><ul><li>可以考虑采用“分而治之”的思想，按照IP地址的Hash(IP)%1024值，把海量IP日志分别存储到1024个小文件中。这样，每个小文件最多包含4MB个IP地址</li><li>对于每一个小文件，可以构建一个IP为key，出现次数为value的Hash map，同时记录当前出现次数最多的那个IP地址</li><li>可以得到1024个小文件中的出现次数最多的IP，再依据常规的排序算法得到总体上出现次数最多的IP；</li></ul><h2 id="给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？"><a href="#给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？" class="headerlink" title="给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？"></a>给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的url？</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><ul><li>遍历文件a，对每个url求取hash(url)%1000，然后根据所取得的值将url分别存储到1000个小文件（记为a0,a1,…,a999）中。这样每个小文件的大约为300M。</li><li>遍历文件b，采取和a相同的方式将url分别存储到1000小文件（记为b0,b1,…,b999）。这样处理后，所有可能相同的url都在对应的小文件（a0vsb0,a1vsb1,…,a999vsb999）中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。</li><li>求每对小文件中相同的url时，可以把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。</li></ul><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>如果允许有一定的误差，使用布隆过滤器</p><h2 id="一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash-x-1000分为小文件再分别加载小文件到内存中处理即可"><a href="#一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash-x-1000分为小文件再分别加载小文件到内存中处理即可" class="headerlink" title="一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash(x)%1000分为小文件再分别加载小文件到内存中处理即可"></a>一般内存不足而需要分析的数据又很大的问题都可以使用分治的思想，将数据hash(x)%1000分为小文件再分别加载小文件到内存中处理即可</h2><h2 id="如何保证接口的幂等性"><a href="#如何保证接口的幂等性" class="headerlink" title="如何保证接口的幂等性"></a>如何保证接口的幂等性</h2><h3 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h3><p>幂等性是系统服务对外一种承诺，承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。</p><h3 id="什么情况下需要幂等"><a href="#什么情况下需要幂等" class="headerlink" title="什么情况下需要幂等"></a>什么情况下需要幂等</h3><p>以SQL为例：</p><ul><li>SELECT col1 FROM tab1 WHER col2&#x3D;2，无论执行多少次都不会改变状态，是天然的幂等。</li><li>UPDATE tab1 SET col1&#x3D;1 WHERE col2&#x3D;2，无论执行成功多少次状态都是一致的，因此也是幂等操作。</li><li>UPDATE tab1 SET col1&#x3D;col1+1 WHERE col2&#x3D;2，每次执行的结果都会发生变化，这种不是幂等的。</li><li>insert into user(userid,name) values(1,’a’) 如userid为唯一主键，即重复操作上面的业务，只会插入一条用户数据，具备幂等性。<ul><li>如userid不是主键，可以重复，那上面业务多次操作，数据都会新增多条，不具备幂等性。</li></ul></li><li>delete from user where userid&#x3D;1，多次操作，结果一样，具备幂等性</li></ul><h3 id="如何保证幂等"><a href="#如何保证幂等" class="headerlink" title="如何保证幂等"></a>如何保证幂等</h3><h4 id="1、token机制"><a href="#1、token机制" class="headerlink" title="1、token机制"></a>1、token机制</h4><ul><li>服务端提供了发送token的接口。我们在分析业务的时候，哪些业务是存在幂等问题的，就必须在执行业务前，先去获取token，服务器会把token保存到redis中。</li><li>然后调用业务接口请求时，把token携带过去，一般放在请求头部。</li><li>服务器判断token是否存在redis中，存在表示第一次请求，然后删除token,继续执行业务。</li><li>如果判断token不存在redis中，就表示是重复操作，直接返回重复标记给client，这样就保证了业务代码，不被重复执行。</li></ul><p><strong>关键点 先删除token，还是后删除token。</strong></p><p>后删除token：如果进行业务处理成功后，删除redis中的token失败了，这样就导致了有可能会发生重复请求，因为token没有被删除。这个问题其实是数据库和缓存redis数据不一致问题，后续会写文章进行讲解。</p><p>先删除token：如果系统出现问题导致业务处理出现异常，业务处理没有成功，接口调用方也没有获取到明确的结果，然后进行重试，但token已经删除掉了，服务端判断token不存在，认为是重复请求，就直接返回了，无法进行业务处理了。</p><p>先删除token可以保证不会因为重复请求，业务数据出现问题。出现业务异常，可以让调用方配合处理一下，重新获取新的token，再次由业务调用方发起重试请求就ok了。</p><p><strong>token机制缺点</strong></p><p>业务请求每次请求，都会有额外的请求（一次获取token请求、判断token是否存在的业务）。其实真实的生产环境中，1万请求也许只会存在10个左右的请求会发生重试，为了这10个请求，我们让9990个请求都发生了额外的请求。</p><h4 id="2、乐观锁机制"><a href="#2、乐观锁机制" class="headerlink" title="2、乐观锁机制"></a>2、乐观锁机制</h4><ul><li>这种方法适合在更新的场景中，update t_goods set count &#x3D; count -1 , version &#x3D; version + 1 where good_id&#x3D;2 and version &#x3D; 1</li><li>根据version版本，也就是在操作库存前先获取当前商品的version版本号，然后操作的时候带上此version号。我们梳理下，我们第一次操作库存时，得到version为1，调用库存服务version变成了2；但返回给订单服务出现了问题，订单服务又一次发起调用库存服务，当订单服务传如的version还是1，再执行上面的sql语句时，就不会执行；因为version已经变为2了，where条件就不成立。这样就保证了不管调用几次，只会真正的处理一次。</li><li>乐观锁主要使用于处理读多写少的问题</li></ul><h4 id="3、唯一主键"><a href="#3、唯一主键" class="headerlink" title="3、唯一主键"></a>3、唯一主键</h4><p>这个机制是利用了数据库的主键唯一约束的特性，解决了在insert场景时幂等问题。但主键的要求不是自增的主键，这样就需要业务生成全局唯一的主键。</p><p>如果是分库分表场景下，路由规则要保证相同请求下，落地在同一个数据库和同一表中，要不然数据库主键约束就不起效果了，因为是不同的数据库和表主键不相关</p><h4 id="4、防重表"><a href="#4、防重表" class="headerlink" title="4、防重表"></a>4、防重表</h4><p>使用订单号orderNo做为去重表的唯一索引，把唯一索引插入去重表，再进行业务操作，且他们在同一个事务中。这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避免了幂等问题。这里要注意的是，去重表和业务表应该在同一库中，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据回滚。这个很好的保证了数据一致性。</p><h4 id="5、唯一ID"><a href="#5、唯一ID" class="headerlink" title="5、唯一ID"></a>5、唯一ID</h4><p>调用接口时，生成一个唯一id，redis将数据保存到集合中（去重），存在即处理过。</p><h2 id="缓存和数据库不一致问题"><a href="#缓存和数据库不一致问题" class="headerlink" title="缓存和数据库不一致问题"></a>缓存和数据库不一致问题</h2><h3 id="更新缓存和更新数据库"><a href="#更新缓存和更新数据库" class="headerlink" title="更新缓存和更新数据库"></a>更新缓存和更新数据库</h3><p>大部分观点认为，做缓存不应该是去更新缓存，而是应该删除缓存，然后由下个请求去去缓存，发现不存在后再读取数据库，写入缓存。观点引用：《分布式之数据库和缓存双写一致性方案解析》孤独烟</p><p>原因一：线程安全角度同时有请求A和请求B进行更新操作，那么会出现（1）线程A更新了数据库（2）线程B更新了数据库（3）线程B更新了缓存（4）线程A更新了缓存这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑。</p><p>原因二：业务场景角度有如下两点：</p><ol><li>如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。</li><li>如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。</li></ol><h3 id="删缓存和更新数据库"><a href="#删缓存和更新数据库" class="headerlink" title="删缓存和更新数据库"></a>删缓存和更新数据库</h3><h4 id="先删缓存，再更新数据库"><a href="#先删缓存，再更新数据库" class="headerlink" title="先删缓存，再更新数据库"></a>先删缓存，再更新数据库</h4><p>该方案会导致请求数据不一致同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:</p><ol><li>请求A进行写操作，删除缓存</li><li>请求B查询发现缓存不存在</li><li>请求B去数据库查询得到旧值</li><li>请求B将旧值写入缓存</li><li>请求A将新值写入数据库上述情况就会导致不一致的情形出现。<br>而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</li></ol><h4 id="先更新数据库，再删缓存"><a href="#先更新数据库，再删缓存" class="headerlink" title="先更新数据库，再删缓存"></a>先更新数据库，再删缓存</h4><p>这种情况不存在并发问题么？不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><ol><li>缓存刚好失效</li><li>请求A查询数据库，得一个旧值</li><li>请求B将新值写入数据库</li><li>请求B删除缓存</li><li>请求A将查到的旧值写入缓存ok，如果发生上述情况，确实是会发生脏数据。 然而，发生这种情况的概率又有多少呢？发生上述情况有一个先天性条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。</li></ol><p>先更新数据库，再删缓存依然会有问题，不过，问题出现的可能性会因为上面说的原因，变得比较低！(补充说明：我用了“先更新数据库，再删缓存”且不设过期时间策略，会不会有问题呢？由于先缓存和更新数据库不是原子的，如果更新了数据库，程序歇逼，就没删缓存，由于没有过期策略，就永远脏数据了。)所以，如果你想实现基础的缓存数据库双写一致的逻辑，那么在大多数情况下，在不想做过多设计，增加太大工作量的情况下，请先更新数据库，再删缓存!</p><h3 id="数据库和缓存数据强一致怎么办"><a href="#数据库和缓存数据强一致怎么办" class="headerlink" title="数据库和缓存数据强一致怎么办"></a>数据库和缓存数据强一致怎么办</h3><p>没有办法做到绝对的一致性，这是由CAP理论决定的，缓存系统适用的场景就是非强一致性的场景，所以它属于CAP中的AP。所以，我们得委曲求全，可以去做到BASE理论中说的最终一致性。</p><p>大佬们给出了到达最终一致性的解决思路，主要是针对上面两种双写策略（先删缓存，再更新数据库&#x2F;先更新数据库，再删缓存）导致的脏数据问题，进行相应的处理，来保证最终一致性。</p><h4 id="缓存延时双删"><a href="#缓存延时双删" class="headerlink" title="缓存延时双删"></a>缓存延时双删</h4><p>步骤</p><ol><li>先删除缓存</li><li>再写数据库</li><li>休眠500毫秒（根据具体的业务时间来定）</li><li>再次删除缓存。</li></ol><h4 id="那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？"><a href="#那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？" class="headerlink" title="那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？"></a>那么，这个休眠500毫秒怎么确定的，具体该休眠多久呢？</h4><p>针对上面的情形，读者应该自行评估自己的项目的读数据业务逻辑的耗时。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上，加几百ms即可。这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p><h4 id="如果你用了mysql的读写分离架构怎么办？"><a href="#如果你用了mysql的读写分离架构怎么办？" class="headerlink" title="如果你用了mysql的读写分离架构怎么办？"></a>如果你用了mysql的读写分离架构怎么办？</h4><p>ok，在这种情况下，造成数据不一致的原因如下，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。</p><ol><li>请求A进行写操作，删除缓存</li><li>请求A将数据写入数据库了，</li><li>请求B查询缓存发现，缓存没有值</li><li>请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值</li><li>请求B将旧值写入缓存</li><li>数据库完成主从同步，从库变为新值上述情形，就是数据不一致的原因。还是使用双删延时策略。只是，睡眠时间修改为在主从同步的延时时间基础上，加几百ms。</li></ol><h4 id="采用这种同步淘汰策略，吞吐量降低怎么办？"><a href="#采用这种同步淘汰策略，吞吐量降低怎么办？" class="headerlink" title="采用这种同步淘汰策略，吞吐量降低怎么办？"></a>采用这种同步淘汰策略，吞吐量降低怎么办？</h4><p>ok，那就将第二次删除作为异步的。自己起一个线程，异步删除。这样，写的请求就不用沉睡一段时间后了，再返回。这么做，加大吞吐量。</p><h4 id="删缓存失败了怎么办：重试机制"><a href="#删缓存失败了怎么办：重试机制" class="headerlink" title="删缓存失败了怎么办：重试机制"></a>删缓存失败了怎么办：重试机制</h4><p>看似问题都已经解决了，但其实，还有一个问题没有考虑到，那就是删除缓存的操作，失败了怎么办？比如延时双删的时候，第二次缓存删除失败了，那不还是没有清除脏数据吗？解决方案就是再加上一个重试机制，保证删除缓存成功</p><p>流程如下所示</p><ol><li>更新数据库数据；</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>自己消费消息，获得需要删除的key</li><li>继续重试删除操作，直到成功然而，</li></ol><p>该方案有一个缺点，对业务线代码造成大量的侵入。</p><p>于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作</p><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>流程如下所示</p><ol><li>更新数据库数据</li><li>数据库会将操作信息写入binlog日志当中</li><li>订阅程序提取出所需要的数据以及key</li><li>另起一段非业务代码，获得该信息</li><li>尝试删除缓存操作，发现删除失败</li><li>将这些信息发送至消息队列</li><li>重新从消息队列中获得该数据，重试操作。</li></ol><h2 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h2><p>SPI 全称为 (Service Provider Interface) ，是JDK内置的一种服务提供发现机制</p><h3 id="SPI-实践"><a href="#SPI-实践" class="headerlink" title="SPI 实践"></a>SPI 实践</h3><p>接下来我们来如何来利用 SPI 实现刚才提到的可拔插 IOC 容器。</p><p>既然刚才都提到了 SPI 的本质就是面向接口编程，所以自然我们首先需要定义一个接口：</p><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="SPI图"></p><p>其中包含了一些 Bean 容器所必须的操作：注册、获取、释放 bean。</p><p>为了让其他人也能实现自己的 IOC 容器，所以我们将这个接口单独放到一个 Module 中，可供他人引入实现。</p><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/2.png"></p><p>所以当我要实现一个单例的 IOC 容器时，我只需要新建一个 Module 然后引入刚才的模块并实现 CicadaBeanFactory 接口即可。</p><p>当然其中最重要的则是需要在 resources 目录下新建一个 META-INF&#x2F;services&#x2F;top.crossoverjie.cicada.base.bean.CicadaBeanFactory 文件，文件名必须得是我们之前定义接口的全限定名（SPI 规范）。<br><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/3.png"></p><p>其中的内容便是我们自己实现类的全限定名：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top.crossoverjie.cicada.bean.ioc.CicadaIoc</span><br></pre></td></tr></table></figure><p>可以想象最终会通过这里的全限定名来反射创建对象。</p><p>只不过这个过程 Java 已经提供 API 屏蔽掉了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CicadaBeanFactory <span class="title function_">getCicadaBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    ServiceLoader&lt;CicadaBeanFactory&gt; cicadaBeanFactories = ServiceLoader.load(CicadaBeanFactory.class);</span><br><span class="line">    <span class="keyword">if</span> (cicadaBeanFactories.iterator().hasNext())&#123;</span><br><span class="line">        <span class="keyword">return</span> cicadaBeanFactories.iterator().next() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CicadaDefaultBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 classpath 中存在我们刚才的实现类（引入实现类的 jar 包），便可以通过 java.util.ServiceLoader 工具类来找到所有的实现类（可以有多个实现类同时存在，只不过通常我们只需要一个）。</p><p>一些都准备好之后，使用自然就非常简单了。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.crossoverjie.opensource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cicada-ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们只需要引入这个依赖便能使用它的实现，当我们想换一种实现方式时只需要更换一个依赖即可。</p><p>这样就做到了不修改一行代码灵活的可拔插选择 IOC 容器了。</p><p>SPI 的一些其他应用</p><p>MySQL 的驱动包也是利用 SPI 来实现自己的连接逻辑。</p><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/4.png"></p><p>总结来说：</p><ul><li>提供一个接口</li><li>在resource下新建META-INF&#x2F;services目录，在目录下新建接口的全限定名文件</li><li>服务方实现接口</li><li>调用ServiceLoad.load()</li></ul><h2 id="什么是RPC？"><a href="#什么是RPC？" class="headerlink" title="什么是RPC？"></a>什么是RPC？</h2><p>RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务</p><ol><li>首先客户端需要告诉服务器，需要调用的函数，这里函数和进程ID存在一个映射，客户端远程调用时，需要查一下函数，找到对应的ID，然后执行函数的代码。</li><li>客户端需要把本地参数传给远程函数，本地调用的过程中，直接压栈即可，但是在远程调用过程中不再同一个内存里，无法直接传递函数的参数，因此需要客户端把参数转换成字节流，传给服务端，然后服务端将字节流转换成自身能读取的格式，是一个序列化和反序列化的过程。</li><li>数据准备好了之后，如何进行传输？网络传输层需要把调用的ID和序列化后的参数传给服务端，然后把计算好的结果序列化传给客户端，因此TCP层即可完成上述过程，gRPC中采用的是HTTP2协议。</li></ol><p>总结一下：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// Client端 </span><br><span class="line">//    Student student = Call(ServerAddr, addAge, student)</span><br><span class="line">1. 将这个调用映射为Call ID。</span><br><span class="line">2. 将Call ID，student（params）序列化，以二进制形式打包</span><br><span class="line">3. 把2中得到的数据包发送给ServerAddr，这需要使用网络传输层</span><br><span class="line">4. 等待服务器返回结果</span><br><span class="line">5. 如果服务器调用成功，那么就将结果反序列化，并赋给student，年龄更新</span><br><span class="line"></span><br><span class="line">// Server端</span><br><span class="line">1. 在本地维护一个Call ID到函数指针的映射call_id_map，可以用Map&lt;String, Method&gt; callIdMap</span><br><span class="line">2. 等待客户端请求</span><br><span class="line">3. 得到一个请求后，将其数据包反序列化，得到Call ID</span><br><span class="line">4. 通过在callIdMap中查找，得到相应的函数指针</span><br><span class="line">5. 将student（params）反序列化后，在本地调用addAge()函数，得到结果</span><br><span class="line">6. 将student结果序列化后通过网络返回给Client</span><br></pre></td></tr></table></figure><ul><li>在微服务的设计中，一个服务A如果访问另一个Module下的服务B，可以采用HTTP REST传输数据，并在两个服务之间进行序列化和反序列化操作，服务B把执行结果返回过来。</li><li>由于HTTP在应用层中完成，整个通信的代价较高，远程过程调用中直接基于TCP进行远程调用，数据传输在传输层TCP层完成，更适合对效率要求比较高的场景，RPC主要依赖于客户端和服务端之间建立Socket链接进行，底层实现比REST更复杂。</li></ul><h3 id="RPC-demo"><a href="#RPC-demo" class="headerlink" title="RPC demo"></a>RPC demo</h3><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCClient</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getRemoteProxyObj</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceInterface, <span class="keyword">final</span> InetSocketAddress addr)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.将本地的接口调用转换成JDK的动态代理，在动态代理中实现接口的远程调用</span></span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(serviceInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;serviceInterface&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            <span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>();</span><br><span class="line">                            socket.connect(addr);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                            output = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">                            output.writeUTF(serviceInterface.getName());</span><br><span class="line">                            output.writeUTF(method.getName());</span><br><span class="line">                            output.writeObject(method.getParameterTypes());</span><br><span class="line">                            output.writeObject(args);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                            input = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">                            <span class="keyword">return</span> input.readObject();</span><br><span class="line">                        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                                socket.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (output != <span class="literal">null</span>)&#123;</span><br><span class="line">                                output.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (input != <span class="literal">null</span>)&#123;</span><br><span class="line">                                input.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceCenter</span> <span class="keyword">implements</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Class&gt; serviceRegistry = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">isRunning</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceCenter</span><span class="params">(<span class="type">int</span> port)</span>&#123;</span><br><span class="line">        ServiceCenter.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>();</span><br><span class="line">        server.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">        System.out.println(<span class="string">&quot;Server Start .....&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                executor.execute(<span class="keyword">new</span> <span class="title class_">ServiceTask</span>(server.accept()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class serviceInterface, Class impl)</span> &#123;</span><br><span class="line">        serviceRegistry.put(serviceInterface.getName(), impl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRunning</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isRunning;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        isRunning = <span class="literal">false</span>;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServiceTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ServiceTask</span><span class="params">(Socket client)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.client = client;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                input = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(client.getInputStream());</span><br><span class="line">                <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> input.readUTF();</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> input.readUTF();</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[]) input.readObject();</span><br><span class="line">                Object[] arguments = (Object[]) input.readObject();</span><br><span class="line">                <span class="type">Class</span> <span class="variable">serviceClass</span> <span class="operator">=</span> serviceRegistry.get(serviceName);</span><br><span class="line">                <span class="keyword">if</span>(serviceClass == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(serviceName + <span class="string">&quot;not found!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> serviceClass.getMethod(methodName, parameterTypes);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(serviceClass.newInstance(), arguments);</span><br><span class="line"></span><br><span class="line">                output = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(client.getOutputStream());</span><br><span class="line">                output.writeObject(result);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(output!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        output.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        input.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        client.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProducerImpl</span> <span class="keyword">implements</span> <span class="title class_">ServiceProducer</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am service producer!!!, the data is &quot;</span>+ data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Server</span> <span class="variable">serviceServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceCenter</span>(<span class="number">8088</span>);</span><br><span class="line">                    serviceServer.register(ServiceProducer.class, ServiceProducerImpl.class);</span><br><span class="line">                    serviceServer.start();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="type">ServiceProducer</span> <span class="variable">service</span> <span class="operator">=</span> RPCClient.getRemoteProxyObj(ServiceProducer.class, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8088</span>));</span><br><span class="line">        System.out.println(service.sendData(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><h3 id="gRPC与REST"><a href="#gRPC与REST" class="headerlink" title="gRPC与REST"></a>gRPC与REST</h3><ul><li>REST通常以业务为导向，将业务对象上执行的操作映射到HTTP动词，格式非常简单，可以使用浏览器进行扩展和传输，通过JSON数据完成客户端和服务端之间的消息通信，直接支持请求&#x2F;响应方式的通信。不需要中间的代理，简化了系统的架构，不同系统之间只需要对JSON进行解析和序列化即可完成数据的传递。</li><li>但是REST也存在一些弊端，比如只支持请求&#x2F;响应这种单一的通信方式，对象和字符串之间的序列化操作也会影响消息传递速度，客户端需要通过服务发现的方式，知道服务实例的位置，在单个请求获取多个资源时存在着挑战，而且有时候很难将所有的动作都映射到HTTP动词。</li><li>正是因为REST面临一些问题，因此可以采用gRPC作为一种替代方案，gRPC 是一种基于二进制流的消息协议，可以采用基于Protocol Buffer的IDL定义grpc API,这是Google公司用于序列化结构化数据提供的一套语言中立的序列化机制，客户端和服务端使用HTTP&#x2F;2以Protocol Buffer格式交换二进制消息。</li><li>gRPC的优势是，设计复杂更新操作的API非常简单，具有高效紧凑的进程通信机制，在交换大量消息时效率高，远程过程调用和消息传递时可以采用双向的流式消息方式，同时客户端和服务端支持多种语言编写，互操作性强；不过gRPC的缺点是不方便与JavaScript集成，某些防火墙不支持该协议。</li><li>注册中心：当项目中有很多服务时，可以把所有的服务在启动的时候注册到一个注册中心里面，用于维护服务和服务器之间的列表，当注册中心接收到客户端请求时，去找到该服务是否远程可以调用，如果可以调用需要提供服务地址返回给客户端，客户端根据返回的地址和端口，去调用远程服务端的方法，执行完成之后将结果返回给客户端。这样在服务端加新功能的时候，客户端不需要直接感知服务端的方法，服务端将更新之后的结果在注册中心注册即可，而且当修改了服务端某些方法的时候，或者服务降级服务多机部署想实现负载均衡的时候，我们只需要更新注册中心的服务群即可。<br><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/5.png"></li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>这里使用SpringBoot+gRPC的形式实现RPC调用过程 项目结构分为三部分：client、grpc、server</p><h4 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h4><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/6.png"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.0.2:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span>io.grpc:protoc-gen-grpc-java:1.2.0:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建.proto文件</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;   <span class="comment">// 语法版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// stub选项</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.shgx.grpc.api&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;RPCDateServiceApi&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义包名</span></span><br><span class="line"><span class="keyword">package</span> com.shgx.grpc.api;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务接口定义，服务端和客户端都要遵守该接口进行通信</span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">RPCDateService</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> getDate (RPCDateRequest) <span class="keyword">returns</span> (RPCDateResponse) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义消息（请求）</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">RPCDateRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> userName = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义消息（响应）</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">RPCDateResponse</span> &#123;</span><br><span class="line">    <span class="type">string</span> serverDate = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mvn complie</p><p>生成代码：<br><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/7.png"></p><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/8.png"></p><p>根据gRPC中的项目配置在client和server两个Module的pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shgx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写GRPCClient</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GRPCClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ManagedChannel</span> <span class="variable">managedChannel</span> <span class="operator">=</span> ManagedChannelBuilder.forAddress( host, serverPort ).usePlaintext().build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RPCDateServiceGrpc.<span class="type">RPCDateServiceBlockingStub</span> <span class="variable">rpcDateService</span> <span class="operator">=</span> RPCDateServiceGrpc.newBlockingStub( managedChannel );</span><br><span class="line">            <span class="type">RPCDateRequest</span> <span class="variable">rpcDateRequest</span> <span class="operator">=</span> RPCDateRequest</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                    .setUserName(<span class="string">&quot;shgx&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">RPCDateResponse</span> <span class="variable">rpcDateResponse</span> <span class="operator">=</span> rpcDateService.getDate( rpcDateRequest );</span><br><span class="line">            System.out.println( rpcDateResponse.getServerDate() );</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            managedChannel.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/9.png"></p><p>按照2.2.3 client的方式添加依赖</p><p>创建RPCDateServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPCDateServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">RPCDateServiceGrpc</span>.RPCDateServiceImplBase&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDate</span><span class="params">(RPCDateRequest request, StreamObserver&lt;RPCDateResponse&gt; responseObserver)</span> &#123;</span><br><span class="line">        <span class="type">RPCDateResponse</span> <span class="variable">rpcDateResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Date now=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;今天是&quot;</span>+<span class="string">&quot;yyyy年MM月dd日 E kk点mm分&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nowTime</span> <span class="operator">=</span> simpleDateFormat.format( now );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rpcDateResponse = RPCDateResponse</span><br><span class="line">                    .newBuilder()</span><br><span class="line">                    .setServerDate( <span class="string">&quot;Welcome &quot;</span> + request.getUserName()  + <span class="string">&quot;, &quot;</span> + nowTime )</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            responseObserver.onError(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            responseObserver.onNext( rpcDateResponse );</span><br><span class="line">        &#125;</span><br><span class="line">        responseObserver.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建GRPCServer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GRPCServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> ServerBuilder.</span><br><span class="line">                forPort(port)</span><br><span class="line">                .addService( <span class="keyword">new</span> <span class="title class_">RPCDateServiceImpl</span>() )</span><br><span class="line">                .build().start();</span><br><span class="line">        System.out.println( <span class="string">&quot;grpc服务端启动成功, 端口=&quot;</span> + port );</span><br><span class="line">        server.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个优秀的RPC框架需要考虑的问题"><a href="#一个优秀的RPC框架需要考虑的问题" class="headerlink" title="一个优秀的RPC框架需要考虑的问题"></a>一个优秀的RPC框架需要考虑的问题</h2><ol><li><code>微服务化</code>应用都基于微服务化，实现资源调用离不开远程调用</li><li><code>多实例问题</code> 一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？— 这时候就需要一个服务注册中心，从服务注册中心获取服务的实例列表，再从中选择一个进行调用。</li><li><code>负载均衡</code> 选哪个调用好呢？这时候就需要负载均衡了，于是又得考虑如何实现复杂均衡</li><li><code>缓存</code> 总不能每次调用时都去注册中心查询实例列表吧，这样效率多低呀，于是又有了缓存，有了缓存，就要考虑缓存的更新问题</li><li><code>异步调用</code> 客户端总不能每次调用完都干等着服务端返回数据吧,于是就要支持异步调用;<ul><li>Future实现</li></ul></li><li><code>版本控制</code> 服务端的接口修改了，老的接口还有人在用，怎么办？总不能让他们都改了吧？这就需要版本控制了；</li><li><code>线程池</code> 服务端总不能每次接到请求都马上启动一个线程去处理吧？于是就需要线程池；</li><li><code>未处理完的请求</code> 服务端关闭时，还没处理完的请求怎么办？是直接结束呢，还是等全部请求处理完再关闭呢？</li></ol><h2 id="什么是DDD？"><a href="#什么是DDD？" class="headerlink" title="什么是DDD？"></a>什么是DDD？</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>要说DDD，不得不先看看MVC，我相信基本上99%的java开发读者，不管你是计科专业出身还是跨专业，初学spring或者springboot的时候，接触到的代码分层都是MVC<br>这说明了MVC有它自身独有的优势：</p><ul><li>开发人员可以只关注整个结构中的其中某一层；</li><li>可以很容易的用新的实现来替换原有层次的实现；</li><li>可以降低层与层之间的依赖；</li><li>有利于标准化；</li><li>利于各层逻辑的复用。</li></ul><p>但是真实情况是这样吗？随着你系统功能迭代，业务逻辑越来越复杂之后。MVC三层中，V层作为数据载体，C层作为逻辑路由都是很薄的一层，大量的代码都堆积在了M层（模型层）。一个service的类，动辄几百上千行，大的甚至几万行，逻辑嵌套复杂，主业务逻辑不清晰。service做的稍微轻量化一点的，代码就像是胶水，把数据库执行逻辑与控制返回给前端的逻辑胶在一起，主次不清晰。<br>一看你的工程，类啊，代码量啊都不少，你甚至不知道如何入手去修改“屎山”一样的代码。</p><h3 id="那么DDD为什么可以去解决以上的问题呢？"><a href="#那么DDD为什么可以去解决以上的问题呢？" class="headerlink" title="那么DDD为什么可以去解决以上的问题呢？"></a>那么DDD为什么可以去解决以上的问题呢？</h3><p>DDD核心思想是什么呢？解耦！让业务不是像炒大锅饭一样混在一起，而是一道道工序复杂的美食，都有他们自己独立的做法。</p><p>DDD的价值观里面，任何业务都是某个业务领域模型的职责体现。A领域只会去做A领域的事情，A领域想去修改B领域，需要找中介（防腐层）去对B领域完成操作。我想完成一个很长的业务逻辑动作，在划分好业务边界之后，交给业务服务的编排者（应用服务）去组织业务模型（聚合）完成逻辑。</p><p>这样，每个服务（领域）只会做自己业务边界内的事情，最小细粒度的去定义需求的实现。原先空空的贫血模型摇身一变变成了充血模型。原理冗长的service里面类似到处set，get值这种与业务逻辑无关的数据载体包装代码，都会被去除，进到应用服务层，你的代码就是你的业务逻辑。逻辑清晰，可维护性高！</p><h3 id="什么样的系统适配DDD"><a href="#什么样的系统适配DDD" class="headerlink" title="什么样的系统适配DDD"></a>什么样的系统适配DDD</h3><p>中小规模的系统，本身业务体量小，功能单一，选择mvc架构无疑是最好的。 项目化交付的系统，研发周期短，一天到晚按照甲方的需求定制功能。</p><p>中大规模系统，产品化模式，业务可持续迭代，可预见的业务逻辑复杂性的系统。</p><h3 id="DDD的代码怎么做"><a href="#DDD的代码怎么做" class="headerlink" title="DDD的代码怎么做"></a>DDD的代码怎么做</h3><p>&#x2F;&#x2F; TODO</p><h2 id="Java实现生产者消费者"><a href="#Java实现生产者消费者" class="headerlink" title="Java实现生产者消费者"></a>Java实现生产者消费者</h2><h3 id="wait-和notify-方法的实现"><a href="#wait-和notify-方法的实现" class="headerlink" title="wait()和notify()方法的实现"></a>wait()和notify()方法的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">FULL</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="string">&quot;lock&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test1.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == FULL) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            LOCK.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                    LOCK.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            LOCK.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                    LOCK.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可重入锁ReentrantLock的实现"><a href="#可重入锁ReentrantLock的实现" class="headerlink" title="可重入锁ReentrantLock的实现"></a>可重入锁ReentrantLock的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">FULL</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//创建一个锁对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//创建两个条件变量，一个为缓冲区非满，一个为缓冲区非空</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test2.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取锁</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == FULL) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notFull.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                    <span class="comment">//唤醒消费者</span></span><br><span class="line">                    notEmpty.signal();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notEmpty.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                    notFull.signal();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻塞队列BlockingQueue的实现"><a href="#阻塞队列BlockingQueue的实现" class="headerlink" title="阻塞队列BlockingQueue的实现"></a>阻塞队列BlockingQueue的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//创建一个阻塞队列</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">BlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test3</span> <span class="variable">test3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test3</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test3.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    blockingQueue.put(<span class="number">1</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    blockingQueue.take();</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号量Semaphore的实现"><a href="#信号量Semaphore的实现" class="headerlink" title="信号量Semaphore的实现"></a>信号量Semaphore的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//创建三个信号量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">notFull</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">notEmpty</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">mutex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test4</span> <span class="variable">test4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test4</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Producer</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(test4.<span class="keyword">new</span> <span class="title class_">Consumer</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    notFull.acquire();</span><br><span class="line">                    mutex.acquire();</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;生产者生产，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mutex.release();</span><br><span class="line">                    notEmpty.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    notEmpty.acquire();</span><br><span class="line">                    mutex.acquire();</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot;消费者消费，目前总共有&quot;</span> + count);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mutex.release();</span><br><span class="line">                    notFull.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java实现BlockQueue"><a href="#Java实现BlockQueue" class="headerlink" title="Java实现BlockQueue"></a>Java实现BlockQueue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有界队列内部固定长度，因此可以用数组实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列的头和尾下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列目前的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockingQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == elements.length)</span><br><span class="line">                notFull.await();</span><br><span class="line">            elements[tail] = e;</span><br><span class="line">            <span class="keyword">if</span> (++tail == elements.length) &#123;</span><br><span class="line">                tail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            notEmpty.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            e = (E) elements[head];</span><br><span class="line">            elements[head] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (++head == elements.length)</span><br><span class="line">                head = <span class="number">0</span>;</span><br><span class="line">            size--;</span><br><span class="line">            notFull.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决哈希冲突的方法"><a href="#解决哈希冲突的方法" class="headerlink" title="解决哈希冲突的方法"></a>解决哈希冲突的方法</h2><h3 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h3><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。</p><p>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。</p><p>开放定址法的缺点在于删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。只到有下个元素插入才能真正删除该元素。</p><h4 id="线行探查法"><a href="#线行探查法" class="headerlink" title="线行探查法"></a>线行探查法</h4><p>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。</p><p>可以参考csdn上flash对该方法的演示：<br><a href="http://student.zjzk.cn/course_ware/data_structure/web/flash/cz/kfdzh.swf">http://student.zjzk.cn/course_ware/data_structure/web/flash/cz/kfdzh.swf</a></p><h4 id="平方探查法"><a href="#平方探查法" class="headerlink" title="平方探查法"></a>平方探查法</h4><p>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²…直到找到空闲单元。</p><p>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。</p><h4 id="双散列函数探查法"><a href="#双散列函数探查法" class="headerlink" title="双散列函数探查法"></a>双散列函数探查法</h4><p>这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。</p><h3 id="链地址法（拉链法）"><a href="#链地址法（拉链法）" class="headerlink" title="链地址法（拉链法）"></a>链地址法（拉链法）</h3><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</p><p>如下一组数字,(32、40、36、53、16、46、71、27、42、24、49、64)哈希表长度为13，哈希函数为H(key)&#x3D;key%13,则链表法结果如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>       </span><br><span class="line"><span class="number">1</span>  -&gt; <span class="number">40</span> -&gt; <span class="number">27</span> -&gt; <span class="number">53</span> </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span>  -&gt; <span class="number">16</span> -&gt; <span class="number">42</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span>  -&gt; <span class="number">32</span> -&gt; <span class="number">71</span></span><br><span class="line"><span class="number">7</span>  -&gt; <span class="number">46</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span> -&gt; <span class="number">36</span> -&gt; <span class="number">49</span></span><br><span class="line"><span class="number">11</span> -&gt; <span class="number">24</span></span><br><span class="line"><span class="number">12</span> -&gt; <span class="number">64</span></span><br></pre></td></tr></table></figure><p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</p><h3 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h3><p>就是同时构造多个不同的哈希函数：</p><p>Hi &#x3D; RHi(key)   i&#x3D; 1,2,3 … k;</p><p>当H1 &#x3D; RH1(key)  发生冲突时，再用H2 &#x3D; RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。</p><h3 id="建立公共溢出区"><a href="#建立公共溢出区" class="headerlink" title="建立公共溢出区"></a>建立公共溢出区</h3><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p><h2 id="排行榜设计"><a href="#排行榜设计" class="headerlink" title="排行榜设计"></a>排行榜设计</h2><h3 id="基于数据库"><a href="#基于数据库" class="headerlink" title="基于数据库"></a>基于数据库</h3><p>基于MySQL，order by</p><p>缺点：</p><ul><li>速度慢</li></ul><h3 id="基于Redis"><a href="#基于Redis" class="headerlink" title="基于Redis"></a>基于Redis</h3><p>主要考察sort set 也就是zset</p><p>zadd添加数据后，zrevrange获取排序后的排名</p><h3 id="类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样"><a href="#类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样" class="headerlink" title="类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样"></a>类似于微信计数榜，如何设计不同用户看到的朋友圈的排行榜不一样</h3><p>key的设计比较重要，比如aa用户和bb用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd step:aa 1000 小明</span><br><span class="line">zadd step:bb 1000 小明</span><br></pre></td></tr></table></figure><p>同理时间也可以通过key的设计解决</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd step:aa:20210929 1000 小明</span><br><span class="line">zadd step:aa:20210929 1000 小明</span><br></pre></td></tr></table></figure><p>但是上述设计会导致每个用户都有一个排行榜，存储的数据巨大，其实可以考虑只在用户查询时通过好友关系去生成</p><p>那朋友圈排行榜的：微信头像、点赞数 怎么获取呢</p><ul><li>可以使用hmset hash储存对象，需要时通过zset储存的key去查询即可</li></ul><h3 id="最近七天排行榜怎么弄"><a href="#最近七天排行榜怎么弄" class="headerlink" title="最近七天排行榜怎么弄"></a>最近七天排行榜怎么弄</h3><p>前面我们说的都是每日排行榜。</p><p>假设面试官要求我们提供一个最近七天、上一周、上一月、上个季度、这一年排行榜啥的，又该怎么搞呢？</p><p>其实这还是在考察你对于 Redis 有序集合 API 的掌握程度。</p><p>也就是这个 API：</p><ul><li>zinterstore&#x2F;zunionstore destination numkeys key [key …] [weights weight [weight …]] [aggregate sum|min|max] 获取交集&#x2F;并集<ul><li>zinterstore&#x2F;zunionstore其实就是交集&#x2F;并集</li><li>destination 将交集&#x2F;并集的结果保存到这个键中</li><li>numkeys 需要做交集&#x2F;并集的集合的个数</li><li>key [key …] 具体参与交集&#x2F;并集的集合</li><li>weights weight [weight …] 每个参与计算的集合的权重。在做交集&#x2F;并集计算时，每个集合中的 member 会把自己的 score 乘以这个权重，默认为 1。</li><li>aggregate sum|min|max 对于各个集合中的相同元素是 sum(求和)、min(取最小值)还是max(取最大值)，默认为 sum。</li></ul></li></ul><p>比如现在有一些数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd sport:ranking:why:20210222 43243 why 2341 mx 8764 les 42321 skr</span><br><span class="line">zadd sport:ranking:why:20210223 57632 why 24354 mx 4231 les 43512 skr 5341 jay</span><br><span class="line">zadd sport:ranking:why:20210224 10026 why 12344 mx 54312 les 34531 skr 43512 jay</span><br><span class="line">zadd sport:ranking:why:20210225 54312 why 32451 mx 23412 les 21341 skr 56321 jay</span><br><span class="line">zadd sport:ranking:why:20210226 3212 why 63421 mx 53652 les 45621 skr 5723 jay</span><br><span class="line">zadd sport:ranking:why:20210227 5462 why 10158 mx 30169 les 48858 skr 66079 jay</span><br><span class="line">zadd sport:ranking:why:20210228 43553 why 4451 mx 7431 les 9563 skr 8232 jay</span><br></pre></td></tr></table></figure><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/10.png"></p><p>现在我们要求出最近 7 天的排行榜，就用下面这行命令，命令有点复杂，但是对着命令格式看，还是很清晰的：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zunionstore sport:ranking:why:last_seven_day 7 sport:ranking:why:20210222 sport:ranking:why:20210223 sport:ranking:why:20210224 sport:ranking:why:20210225 sport:ranking:why:20210226 sport:ranking:why:20210227 sport:ranking:why:20210228 weights 1 1 1 1 1 1 1 aggregate sum</span><br></pre></td></tr></table></figure><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/11.png"></p><p>上面用的是并集，如果我们的要求是对最近 7 天，每天都上传运动数据的人进行排序，就用交集来算。</p><p>命令和上面的一致，只是把 zunionstore 修改为 zinterstore 即可。</p><p>另外为了有对比，合并之后的队列名称也修改一下，命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zinterstore sport:ranking:why:last_seven_day_zinterstore 7 sport:ranking:why:20210222 sport:ranking:why:20210223 sport:ranking:why:20210224 sport:ranking:why:20210225 sport:ranking:why:20210226 sport:ranking:why:20210227 sport:ranking:why:20210228 weights 1 1 1 1 1 1 1 aggregate sum</span><br></pre></td></tr></table></figure><p><img src="/./2024/05/26/%E5%9C%BA%E6%99%AF%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98/12.png"></p><p>知道最近 7 天的做法了，我们又有每一天数据，上一周、上一月、上个季度、这一年排行榜啥的不都是这个套路吗</p><h3 id="亿级用户排行榜"><a href="#亿级用户排行榜" class="headerlink" title="亿级用户排行榜"></a>亿级用户排行榜</h3><h4 id="按段位分桶"><a href="#按段位分桶" class="headerlink" title="按段位分桶"></a>按段位分桶</h4><p>由于数据量比较大，所以需要类似于分成一个个小文件的思想去统计每一部分的数据</p><p>比如游戏里的段位，统计国服前100，可以把王者、大师、砖石、铂金、黄金、白银、青铜 分为不同的桶，每个分段的人在不同的桶里(假设还是用zset存储用户的段位)<br>那计算全服排名即可先计算在某个段位桶的排名x,再获取这个段位桶前的所有桶的大小y1,y2…yn，排名就计算出来了x+y1+y2….yn</p><h5 id="计算top100"><a href="#计算top100" class="headerlink" title="计算top100"></a>计算top100</h5><p>分桶后，直接在段位最大的桶里计算top100即可</p><h4 id="按积分分桶"><a href="#按积分分桶" class="headerlink" title="按积分分桶"></a>按积分分桶</h4><p>[0-5000] [5001-10000] …..[10000000-x]</p><p>这种可能会出现热点问题，比如处于0-5000区间的人会非常多（可能很多人都是没有打排位）用户的落点其实并不是均匀的，那就需要通过其他预测算法去预估每个区间的人数了</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 场景设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Springcloud最热点面试题</title>
      
      <link href="/2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</p><p>Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><h3 id="eureka"><a href="#eureka" class="headerlink" title="eureka"></a>eureka</h3><p>服务治理组件，包括服务端的注册中心和客户端的服务发现机制；</p><h3 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h3><p>基于Hashicorp Consul的服务治理组件。</p><h2 id="服务负载与均衡"><a href="#服务负载与均衡" class="headerlink" title="服务负载与均衡"></a>服务负载与均衡</h2><h3 id="ribbon"><a href="#ribbon" class="headerlink" title="ribbon"></a>ribbon</h3><p>负载均衡的服务调用组件，具有多种负载均衡调用策略；</p><h3 id="loadbalancer"><a href="#loadbalancer" class="headerlink" title="loadbalancer"></a>loadbalancer</h3><h2 id="服务负载与调用"><a href="#服务负载与调用" class="headerlink" title="服务负载与调用"></a>服务负载与调用</h2><h3 id="feign"><a href="#feign" class="headerlink" title="feign"></a>feign</h3><p>基于Ribbon和Hystrix的声明式服务调用组件；</p><h3 id="openFeign"><a href="#openFeign" class="headerlink" title="openFeign"></a>openFeign</h3><p>基于Ribbon和Hystrix的声明式服务调用组件，可以动态创建基于Spring MVC注解的接口实现用于服务调用，在Spring Cloud 2.0中已经取代Feign成为了一等公民。</p><h2 id="服务熔断与降级"><a href="#服务熔断与降级" class="headerlink" title="服务熔断与降级"></a>服务熔断与降级</h2><h3 id="hystrix"><a href="#hystrix" class="headerlink" title="hystrix"></a>hystrix</h3><p>服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；</p><h3 id="resilience4j"><a href="#resilience4j" class="headerlink" title="resilience4j"></a>resilience4j</h3><h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><h3 id="zuul"><a href="#zuul" class="headerlink" title="zuul"></a>zuul</h3><p>API网关组件，对请求提供路由及过滤功能。</p><h3 id="zuul2"><a href="#zuul2" class="headerlink" title="zuul2"></a>zuul2</h3><h3 id="getway"><a href="#getway" class="headerlink" title="getway"></a>getway</h3><p>API网关组件，对请求提供路由及过滤功能。</p><h2 id="服务分布式配置"><a href="#服务分布式配置" class="headerlink" title="服务分布式配置"></a>服务分布式配置</h2><h3 id="springcloud-config"><a href="#springcloud-config" class="headerlink" title="springcloud config"></a>springcloud config</h3><p>集中配置管理工具，分布式系统中统一的外部配置管理，默认使用Git来存储配置，可以支持客户端配置的刷新及加密、解密操作。</p><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h3><p>用于传播集群状态变化的消息总线，使用轻量级消息代理链接分布式系统中的节点，可以用来动态刷新集群中的服务配置。</p><h1 id="springcloudAlibaba"><a href="#springcloudAlibaba" class="headerlink" title="springcloudAlibaba"></a>springcloudAlibaba</h1><h2 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h2><p>Nacos 是一个开源的分布式系统服务发现、配置管理和服务管理平台。它主要包含以下功能：</p><p>服务发现与注册：Nacos 可以管理服务的注册和发现，支持 DNS 和 HTTP&#x2F;RESTful 方式。<br>配置管理：Nacos 可以动态管理配置，支持多种数据类型和版本控制。<br>服务管理：Nacos 可以对服务进行健康检查、流量管理、负载均衡等。</p><h3 id="服务发现与注册"><a href="#服务发现与注册" class="headerlink" title="服务发现与注册"></a>服务发现与注册</h3><p>Nacos 实现服务发现和注册的核心代码位于 nacos&#x2F;naming 目录下，包括以下文件：</p><ul><li>naming-common&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;alibaba&#x2F;nacos&#x2F;api&#x2F;naming: 定义了服务发现和注册的 API 接口和数据模型。</li><li>naming-core&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;alibaba&#x2F;nacos&#x2F;naming: 实现了服务发现和注册的核心逻辑。</li><li>naming-impl&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;alibaba&#x2F;nacos&#x2F;naming: 实现了服务发现和注册的具体实现。</li></ul><p>下面简单介绍一下 Nacos 的服务发现和注册的实现流程。</p><h4 id="服务注册流程"><a href="#服务注册流程" class="headerlink" title="服务注册流程"></a>服务注册流程</h4><p>服务提供者向 Nacos 注册服务时，会调用 NamingService.registerInstance() 方法，该方法会做以下几件事情：</p><ol><li>将服务实例的元数据封装为 Instance 对象，包括服务名、IP、端口号、健康状态、元数据等。</li><li>将 Instance 对象转换为 InstanceEntity 对象，包含了实例 ID 和实例元数据的 JSON 字符串。</li><li>将 InstanceEntity 对象存储到 Nacos 中，可以存储到内存中或者持久化到磁盘中。</li></ol><h4 id="服务发现流程"><a href="#服务发现流程" class="headerlink" title="服务发现流程"></a>服务发现流程</h4><p>服务消费者向 Nacos 发现服务时，会调用 NamingService.getAllInstances() 或 NamingService.selectInstances() 方法，该方法会做以下几件事情：</p><ol><li>从 Nacos 中获取服务实例的元数据，包括服务名、IP、端口号、健康状态、元数据等。</li><li>将元数据封装为 Instance 对象，存储到本地缓存中。</li><li>根据负载均衡算法选择一个服务实例处理请求，可以选择轮询、随机、权重等算法。</li></ol><p>服务发现和注册的核心逻辑在 naming-core 目录下的 com.alibaba.nacos.naming 包中实现，主要包括以下类：</p><ul><li>com.alibaba.nacos.naming.core.InstancesManager: 维护服务实例的元数据和状态信息。</li><li>com.alibaba.nacos.naming.core.Cluster: 维护一个服务的所有实例信息和负载均衡策略。</li><li>com.alibaba.nacos.naming.core.InstanceOperator: 实现了服务实例的注册、注销和更新操作。</li><li>com.alibaba.nacos.naming.core.DomainsManager: 维护多个服务的信息，包括服务名、集群名、命名空间等。</li></ul><p>服务发现和注册的具体实现在 naming-impl 目录下的 com.alibaba.nacos.naming 包中，主要包括以下类：</p><ul><li>com.alibaba.nacos.naming.push.PushService: 实现了服务实例的推送功能。</li><li>com.alibaba.nacos.naming.healthcheck.HealthCheckProcessor: 实现了服务实例的健康检查功能。</li><li>com.alibaba.nacos.naming.misc.GlobalConfig: 存储了一些全局配置，例如默认权重值、心跳间隔</li></ul><h3 id="配置动态刷新"><a href="#配置动态刷新" class="headerlink" title="配置动态刷新"></a>配置动态刷新</h3><p>从远端服务器获取变更数据的主要模式有两种：推（push）和拉（pull）。Push 模式简单来说就是服务端主动将数据变更信息推送给客户端，这种模式优点是时效性好，服务端数据发生变更可以立马通知到客户端，但这种模式需要服务端维持与客户端的心跳连接，会增加服务端实现的复杂度，服务端也需要占用更多的资源来维持与客户端的连接。</p><p>而 Pull 模式则是客户端主动去服务器请求数据，例如，每间隔10ms就向服务端发起请求获取数据。显而易见pull模式存在时效性问题。请求的间隔也不太好设置，间隔太短，对服务器请求压力过大。间隔时间过长，那么必然会造成时效性很差。而且如果配置长时间不更新，并且存在大量的客户端就会产生大量无效的pull请求。</p><p>Nacos 没有采用上述的两种模式，而是采用了长轮询方式结合了推和拉的优点：</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="动态刷新图"></p><p>长轮询也是轮询，因此 Nacos 客户端会默认每10ms向服务端发起请求，当客户端请求服务端时会在请求头上携带长轮询的超时时间，默认是30s。而服务端接收到该请求时会hang住请求，为了防止客户端超时会在请求头携带的超时时间上减去500ms，因此默认会hang住请求29.5s。在这期间如果服务端发生了配置变更会产生相应的事件，监听到该事件后，会响应对应的客户端。这样一来客户端不会频繁发起轮询请求，而服务端也不需要维持与客户端的心跳，兼备了时效性和复杂度。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/2.png" alt="长轮询图"></p><blockquote><p>1.4版本nacos使用Http短连接+长轮询的方式，客户端发起http请求，服务端hold住请求，当配置变更时响应客户端，超时时间30s。<br>2.0版本nacos用gRPC长连接代替了http短连接长轮询。配置同步采用推拉结合的方式。</p></blockquote><h4 id="Nacos-Config-长轮询源码剖析"><a href="#Nacos-Config-长轮询源码剖析" class="headerlink" title="Nacos Config 长轮询源码剖析"></a>Nacos Config 长轮询源码剖析</h4><p>首先，打开 com.alibaba.cloud.nacos.NacosConfigBootstrapConfiguration 这个类，从类名也可以看出该类是Nacos Config的启动配置类，是Nacos Config自动装配的入口。在该类中的 nacosConfigManager 方法实例化了一个 NacosConfigManager 对象，并注册到容器中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> NacosConfigManager <span class="title function_">nacosConfigManager</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosConfigProperties nacosConfigProperties)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosConfigManager</span>(nacosConfigProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 NacosConfigManager 的构造器中调用了 createConfigService 方法，这是一个静态方法用来创建 ConfigService 对象的单例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compatible with old design,It will be perfected in the future.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> ConfigService <span class="title function_">createConfigService</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosConfigProperties nacosConfigProperties)</span> &#123;</span><br><span class="line">    <span class="comment">// 双重检查锁模式的单例</span></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(service)) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (NacosConfigManager.class) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(service)) &#123;</span><br><span class="line">service = NacosFactory.createConfigService(</span><br><span class="line">nacosConfigProperties.assembleConfigServiceProperties());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">log.error(e.getMessage());</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NacosConnectionFailureException</span>(</span><br><span class="line">nacosConfigProperties.getServerAddr(), e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConfigService 的具体实现是 NacosConfigService，在该类的构造器中主要初始化了 HttpAgent 和 ClientWorker 对象。ClientWorker 的构造器中则初始化了几个线程池：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClientWorker</span><span class="params">(<span class="keyword">final</span> HttpAgent agent, <span class="keyword">final</span> ConfigFilterChainManager configFilterChainManager,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Properties properties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.agent = agent;</span><br><span class="line">    <span class="built_in">this</span>.configFilterChainManager = configFilterChainManager;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initialize the timeout parameter</span></span><br><span class="line">    init(properties);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建具有定时执行功能的单线程池，用于定时执行 checkConfigInfo 方法</span></span><br><span class="line">    <span class="built_in">this</span>.executor = Executors.newScheduledThreadPool(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">            t.setName(<span class="string">&quot;com.alibaba.nacos.client.Worker.&quot;</span> + agent.getName());</span><br><span class="line">            t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建具有定时执行功能的且线程数与cpu核数相对应的线程池，用于根据需要动态刷新的配置文件执行 LongPollingRunnable，因此长轮询任务是可以有多个并行的</span></span><br><span class="line">    <span class="built_in">this</span>.executorService = Executors</span><br><span class="line">            .newScheduledThreadPool(Runtime.getRuntime().availableProcessors(), <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                    t.setName(<span class="string">&quot;com.alibaba.nacos.client.Worker.longPolling.&quot;</span> + agent.getName());</span><br><span class="line">                    t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 每10ms执行一次 checkConfigInfo 方法</span></span><br><span class="line">    <span class="built_in">this</span>.executor.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                checkConfigInfo();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;[&quot;</span> + agent.getName() + <span class="string">&quot;] [sub-check] rotate check error&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1L</span>, <span class="number">10L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">    <span class="comment">// 长轮询的超时时间，默认为30秒，此参数会被放到请求头中带到服务端，服务端会根据该参数去做长轮询的hold</span></span><br><span class="line">    timeout = Math.max(ConvertUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),</span><br><span class="line">            Constants.CONFIG_LONG_POLL_TIMEOUT), Constants.MIN_CONFIG_LONG_POLL_TIMEOUT);</span><br><span class="line">    </span><br><span class="line">    taskPenaltyTime = ConvertUtils</span><br><span class="line">            .toInt(properties.getProperty(PropertyKeyConst.CONFIG_RETRY_TIME), Constants.CONFIG_RETRY_TIME);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.enableRemoteSyncConfig = Boolean</span><br><span class="line">            .parseBoolean(properties.getProperty(PropertyKeyConst.ENABLE_REMOTE_SYNC_CONFIG));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check config info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Dispatch taskes.</span></span><br><span class="line">    <span class="comment">// 获取需要监听的文件数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">listenerSize</span> <span class="operator">=</span> cacheMap.size();</span><br><span class="line">    <span class="comment">// Round up the longingTaskCount.</span></span><br><span class="line">    <span class="comment">// 默认一个 LongPollingRunnable 可以处理监听3k个配置文件的变化，超过3k个才会创建新的 LongPollingRunnable</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">longingTaskCount</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(listenerSize / ParamUtil.getPerTaskConfigSize());</span><br><span class="line">    <span class="keyword">if</span> (longingTaskCount &gt; currentLongingTaskCount) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) currentLongingTaskCount; i &lt; longingTaskCount; i++) &#123;</span><br><span class="line">            <span class="comment">// The task list is no order.So it maybe has issues when changing.</span></span><br><span class="line">            executorService.execute(<span class="keyword">new</span> <span class="title class_">LongPollingRunnable</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        currentLongingTaskCount = longingTaskCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LongPollingRunnable 类主要用于检查本地配置，以及长轮询地去服务端获取变更配置的 dataid 和 group，其代码位于 com.alibaba.nacos.client.config.impl.ClientWorker 类，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LongPollingRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> taskId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongPollingRunnable</span><span class="params">(<span class="type">int</span> taskId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskId = taskId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        List&lt;CacheData&gt; cacheDatas = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CacheData&gt;();</span><br><span class="line">        List&lt;String&gt; inInitializingCacheList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// check failover config</span></span><br><span class="line">            <span class="comment">// 遍历本地缓存的配置</span></span><br><span class="line">            <span class="keyword">for</span> (CacheData cacheData : cacheMap.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cacheData.getTaskId() == taskId) &#123;</span><br><span class="line">                    cacheDatas.add(cacheData);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 检查本地配置</span></span><br><span class="line">                        checkLocalConfig(cacheData);</span><br><span class="line">                        <span class="keyword">if</span> (cacheData.isUseLocalConfigInfo()) &#123;</span><br><span class="line">                            cacheData.checkListenerMd5();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOGGER.error(<span class="string">&quot;get local config info error&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// check server config</span></span><br><span class="line">            <span class="comment">// 通过长轮询检查服务端配置</span></span><br><span class="line">            List&lt;String&gt; changedGroupKeys = checkUpdateDataIds(cacheDatas, inInitializingCacheList);</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(changedGroupKeys)) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">&quot;get changedGroupKeys:&quot;</span> + changedGroupKeys);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (String groupKey : changedGroupKeys) &#123;</span><br><span class="line">                String[] key = GroupKey.parseKey(groupKey);</span><br><span class="line">                <span class="type">String</span> <span class="variable">dataId</span> <span class="operator">=</span> key[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> key[<span class="number">1</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">tenant</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (key.length == <span class="number">3</span>) &#123;</span><br><span class="line">                    tenant = key[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String[] ct = getServerConfig(dataId, group, tenant, <span class="number">3000L</span>);</span><br><span class="line">                    <span class="type">CacheData</span> <span class="variable">cache</span> <span class="operator">=</span> cacheMap.get(GroupKey.getKeyTenant(dataId, group, tenant));</span><br><span class="line">                    cache.setContent(ct[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> != ct[<span class="number">1</span>]) &#123;</span><br><span class="line">                        cache.setType(ct[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;[&#123;&#125;] [data-received] dataId=&#123;&#125;, group=&#123;&#125;, tenant=&#123;&#125;, md5=&#123;&#125;, content=&#123;&#125;, type=&#123;&#125;&quot;</span>,</span><br><span class="line">                            agent.getName(), dataId, group, tenant, cache.getMd5(),</span><br><span class="line">                            ContentUtils.truncateContent(ct[<span class="number">0</span>]), ct[<span class="number">1</span>]);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NacosException ioe) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String</span><br><span class="line">                            .format(<span class="string">&quot;[%s] [get-update] get changed config exception. dataId=%s, group=%s, tenant=%s&quot;</span>,</span><br><span class="line">                                    agent.getName(), dataId, group, tenant);</span><br><span class="line">                    LOGGER.error(message, ioe);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (CacheData cacheData : cacheDatas) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!cacheData.isInitializing() || inInitializingCacheList</span><br><span class="line">                        .contains(GroupKey.getKeyTenant(cacheData.dataId, cacheData.group, cacheData.tenant))) &#123;</span><br><span class="line">                    cacheData.checkListenerMd5();</span><br><span class="line">                    cacheData.setInitializing(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inInitializingCacheList.clear();</span><br><span class="line">            </span><br><span class="line">            executorService.execute(<span class="built_in">this</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// If the rotation training task is abnormal, the next execution time of the task will be punished</span></span><br><span class="line">            LOGGER.error(<span class="string">&quot;longPolling error : &quot;</span>, e);</span><br><span class="line">            executorService.schedule(<span class="built_in">this</span>, taskPenaltyTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有个 checkUpdateDataIds 方法，用于获取发生变更了的配置文件的dataId列表，它同样位于 ClientWorker 内。如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fetch the dataId list from server.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheDatas              CacheDatas for config infomations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inInitializingCacheList initial cache lists.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String include dataId and group (ps: it maybe null).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception Exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;String&gt; <span class="title function_">checkUpdateDataIds</span><span class="params">(List&lt;CacheData&gt; cacheDatas, List&lt;String&gt; inInitializingCacheList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼接出配置文件的唯一标识</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (CacheData cacheData : cacheDatas) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cacheData.isUseLocalConfigInfo()) &#123;</span><br><span class="line">            sb.append(cacheData.dataId).append(WORD_SEPARATOR);</span><br><span class="line">            sb.append(cacheData.group).append(WORD_SEPARATOR);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(cacheData.tenant)) &#123;</span><br><span class="line">                sb.append(cacheData.getMd5()).append(LINE_SEPARATOR);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(cacheData.getMd5()).append(WORD_SEPARATOR);</span><br><span class="line">                sb.append(cacheData.getTenant()).append(LINE_SEPARATOR);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cacheData.isInitializing()) &#123;</span><br><span class="line">                <span class="comment">// It updates when cacheData occours in cacheMap by first time.</span></span><br><span class="line">                inInitializingCacheList</span><br><span class="line">                        .add(GroupKey.getKeyTenant(cacheData.dataId, cacheData.group, cacheData.tenant));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isInitializingCacheList</span> <span class="operator">=</span> !inInitializingCacheList.isEmpty();</span><br><span class="line">    <span class="keyword">return</span> checkUpdateConfigStr(sb.toString(), isInitializingCacheList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fetch the updated dataId list from server.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> probeUpdateString       updated attribute string value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isInitializingCacheList initial cache lists.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The updated dataId list(ps: it maybe null).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException Exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;String&gt; <span class="title function_">checkUpdateConfigStr</span><span class="params">(String probeUpdateString, <span class="type">boolean</span> isInitializingCacheList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">2</span>);</span><br><span class="line">    params.put(Constants.PROBE_MODIFY_REQUEST, probeUpdateString);</span><br><span class="line">    Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 长轮询的超时时间</span></span><br><span class="line">    headers.put(<span class="string">&quot;Long-Pulling-Timeout&quot;</span>, <span class="string">&quot;&quot;</span> + timeout);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// told server do not hang me up if new initializing cacheData added in</span></span><br><span class="line">    <span class="keyword">if</span> (isInitializingCacheList) &#123;</span><br><span class="line">        headers.put(<span class="string">&quot;Long-Pulling-Timeout-No-Hangup&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(probeUpdateString)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// In order to prevent the server from handling the delay of the client&#x27;s long task,</span></span><br><span class="line">        <span class="comment">// increase the client&#x27;s read timeout to avoid this problem.</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">readTimeoutMs</span> <span class="operator">=</span> timeout + (<span class="type">long</span>) Math.round(timeout &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 向服务端发起一个http请求，该请求在服务端配置没有变更的情况下默认会hang住30s</span></span><br><span class="line">        HttpRestResult&lt;String&gt; result = agent</span><br><span class="line">                .httpPost(Constants.CONFIG_CONTROLLER_PATH + <span class="string">&quot;/listener&quot;</span>, headers, params, agent.getEncode(),</span><br><span class="line">                        readTimeoutMs);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (result.ok()) &#123;</span><br><span class="line">            setHealthServer(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 响应状态是成功则解析响应体得到 dataId、group、tenant 等信息并返回</span></span><br><span class="line">            <span class="keyword">return</span> parseUpdateDataIdResponse(result.getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setHealthServer(<span class="literal">false</span>);</span><br><span class="line">            LOGGER.error(<span class="string">&quot;[&#123;&#125;] [check-update] get changed dataId error, code: &#123;&#125;&quot;</span>, agent.getName(),</span><br><span class="line">                    result.getCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        setHealthServer(<span class="literal">false</span>);</span><br><span class="line">        LOGGER.error(<span class="string">&quot;[&quot;</span> + agent.getName() + <span class="string">&quot;] [check-update] get changed dataId exception&quot;</span>, e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端对 listener 接口的请求会进入到服务端的 com.alibaba.nacos.config.server.controller.ConfigController#listener 方法进行处理，该方法主要是调用了 com.alibaba.nacos.config.server.controller.ConfigServletInner#doPollingConfig 方法。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮询接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doPollingConfig</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                              Map&lt;String, String&gt; clientMd5Map, <span class="type">int</span> probeRequestSize)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果支持长轮询则进入长轮询的流程</span></span><br><span class="line">    <span class="keyword">if</span> (LongPollingService.isSupportLongPolling(request)) &#123;</span><br><span class="line">        longPollingService.addLongPollingClient(request, response, clientMd5Map, probeRequestSize);</span><br><span class="line">        <span class="keyword">return</span> HttpServletResponse.SC_OK + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// else 兼容短轮询逻辑</span></span><br><span class="line">    List&lt;String&gt; changedGroups = MD5Util.compareMd5(request, response, clientMd5Map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兼容短轮询result</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">oldResult</span> <span class="operator">=</span> MD5Util.compareMd5OldResult(changedGroups);</span><br><span class="line">    <span class="type">String</span> <span class="variable">newResult</span> <span class="operator">=</span> MD5Util.compareMd5ResultString(changedGroups);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> request.getHeader(Constants.CLIENT_VERSION_HEADER);</span><br><span class="line">    <span class="keyword">if</span> (version == <span class="literal">null</span>) &#123;</span><br><span class="line">        version = <span class="string">&quot;2.0.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">versionNum</span> <span class="operator">=</span> Protocol.getVersionNumber(version);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.0.4版本以前, 返回值放入header中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (versionNum &lt; START_LONGPOLLING_VERSION_NUM) &#123;</span><br><span class="line">        response.addHeader(Constants.PROBE_MODIFY_RESPONSE, oldResult);</span><br><span class="line">        response.addHeader(Constants.PROBE_MODIFY_RESPONSE_NEW, newResult);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;content&quot;</span>, newResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用缓存</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache,no-store&quot;</span>);</span><br><span class="line">    response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">    <span class="keyword">return</span> HttpServletResponse.SC_OK + <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要关注上面的 com.alibaba.nacos.config.server.service.LongPollingService#addLongPollingClient 长轮询流程的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLongPollingClient</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp, Map&lt;String, String&gt; clientMd5Map,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> probeRequestSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> req.getHeader(LongPollingService.LONG_POLLING_HEADER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">noHangUpFlag</span> <span class="operator">=</span> req.getHeader(LongPollingService.LONG_POLLING_NO_HANG_UP_HEADER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> req.getHeader(RequestUtil.CLIENT_APPNAME_HEADER);</span><br><span class="line">    <span class="type">String</span> <span class="variable">tag</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Vipserver-Tag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">delayTime</span> <span class="operator">=</span> SwitchService.getSwitchInteger(SwitchService.FIXED_DELAY_TIME, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提前500ms返回响应，为避免客户端超时 <span class="doctag">@qiaoyi</span>.dingqy 2013.10.22改动  add delay time for LoadBalance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> Math.max(<span class="number">10000</span>, Long.parseLong(str) - delayTime);</span><br><span class="line">    <span class="keyword">if</span> (isFixedPolling()) &#123;</span><br><span class="line">        timeout = Math.max(<span class="number">10000</span>, getFixedPollingInterval());</span><br><span class="line">        <span class="comment">// do nothing but set fix polling timeout</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; changedGroups = MD5Util.compareMd5(req, rsp, clientMd5Map);</span><br><span class="line">        <span class="keyword">if</span> (changedGroups.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            generateResponse(req, rsp, changedGroups);</span><br><span class="line">            LogUtil.clientLog.info(<span class="string">&quot;&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;&quot;</span>,</span><br><span class="line">                System.currentTimeMillis() - start, <span class="string">&quot;instant&quot;</span>, RequestUtil.getRemoteIp(req), <span class="string">&quot;polling&quot;</span>,</span><br><span class="line">                clientMd5Map.size(), probeRequestSize, changedGroups.size());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (noHangUpFlag != <span class="literal">null</span> &amp;&amp; noHangUpFlag.equalsIgnoreCase(TRUE_STR)) &#123;</span><br><span class="line">            LogUtil.clientLog.info(<span class="string">&quot;&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;&quot;</span>, System.currentTimeMillis() - start, <span class="string">&quot;nohangup&quot;</span>,</span><br><span class="line">                RequestUtil.getRemoteIp(req), <span class="string">&quot;polling&quot;</span>, clientMd5Map.size(), probeRequestSize,</span><br><span class="line">                changedGroups.size());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> RequestUtil.getRemoteIp(req);</span><br><span class="line">    <span class="comment">// 一定要由HTTP线程调用，否则离开后容器会立即发送响应</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">AsyncContext</span> <span class="variable">asyncContext</span> <span class="operator">=</span> req.startAsync();</span><br><span class="line">    <span class="comment">// AsyncContext.setTimeout()的超时时间不准，所以只能自己控制</span></span><br><span class="line">    asyncContext.setTimeout(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 ClientLongPolling 的 run 方法会将 ClientLongPolling 实例（携带了本次请求的相关信息）放入 allSubs 中，然后会在29.5s后再执行另一个 Runnable，该 Runnable 用于等待29.5s后依旧没有相应的配置变更时对客户端进行响应，并将相应的 ClientLongPolling 实例从 allSubs 中移出</span></span><br><span class="line">    scheduler.execute(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClientLongPolling</span>(asyncContext, clientMd5Map, ip, probeRequestSize, timeout, appName, tag));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 LongPollingService 实现了 AbstractEventListener，也就是说能接收事件通知，在其 com.alibaba.nacos.config.server.service.LongPollingService#onEvent 方法中可以看到，它关注的是 LocalDataChangeEvent 事件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFixedPolling()) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> LocalDataChangeEvent) &#123;</span><br><span class="line">            <span class="type">LocalDataChangeEvent</span> <span class="variable">evt</span> <span class="operator">=</span> (LocalDataChangeEvent)event;</span><br><span class="line">            scheduler.execute(<span class="keyword">new</span> <span class="title class_">DataChangeTask</span>(evt.groupKey, evt.isBeta, evt.betaIps));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在nacos上修改配置后就会产生 LocalDataChangeEvent 事件，此时 LongPollingService 也就能监听到，当收到该事件时就会遍历 allSubs，找到匹配的请求并将 groupKey 返回给客户端。具体代码在 DataChangeTask 中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataChangeTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ConfigService.getContentBetaMd5(groupKey);</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;ClientLongPolling&gt; iter = allSubs.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">                <span class="type">ClientLongPolling</span> <span class="variable">clientSub</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                <span class="keyword">if</span> (clientSub.clientMd5Map.containsKey(groupKey)) &#123;</span><br><span class="line">                    <span class="comment">// 如果beta发布且不在beta列表直接跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (isBeta &amp;&amp; !betaIps.contains(clientSub.ip)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果tag发布且不在tag列表直接跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(tag) &amp;&amp; !tag.equals(clientSub.tag)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    getRetainIps().put(clientSub.ip, System.currentTimeMillis());</span><br><span class="line">                    iter.remove(); <span class="comment">// 删除订阅关系</span></span><br><span class="line">                    LogUtil.clientLog.info(<span class="string">&quot;&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;|&#123;&#125;&quot;</span>,</span><br><span class="line">                        (System.currentTimeMillis() - changeTime),</span><br><span class="line">                        <span class="string">&quot;in-advance&quot;</span>,</span><br><span class="line">                        RequestUtil.getRemoteIp((HttpServletRequest)clientSub.asyncContext.getRequest()),</span><br><span class="line">                        <span class="string">&quot;polling&quot;</span>,</span><br><span class="line">                        clientSub.clientMd5Map.size(), clientSub.probeRequestSize, groupKey);</span><br><span class="line">                    clientSub.sendResponse(Arrays.asList(groupKey));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            LogUtil.defaultLog.error(<span class="string">&quot;data change error:&quot;</span> + t.getMessage(), t.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataChangeTask(String groupKey) &#123;</span><br><span class="line">        <span class="built_in">this</span>(groupKey, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataChangeTask(String groupKey, <span class="type">boolean</span> isBeta, List&lt;String&gt; betaIps) &#123;</span><br><span class="line">        <span class="built_in">this</span>(groupKey, isBeta, betaIps, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataChangeTask(String groupKey, <span class="type">boolean</span> isBeta, List&lt;String&gt; betaIps, String tag) &#123;</span><br><span class="line">        <span class="built_in">this</span>.groupKey = groupKey;</span><br><span class="line">        <span class="built_in">this</span>.isBeta = isBeta;</span><br><span class="line">        <span class="built_in">this</span>.betaIps = betaIps;</span><br><span class="line">        <span class="built_in">this</span>.tag = tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String groupKey;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">changeTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> isBeta;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; betaIps;</span><br><span class="line">    <span class="keyword">final</span> String tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当客户端收到变更的dataid+group后，就会去服务端获取最新的配置数据，并更新本地数据 cacheData，然后发送数据变更事件，整个流程结束。</p><ul><li>获取服务端最新配置数据的方法：com.alibaba.nacos.client.config.impl.ClientWorker#getServerConfig</li><li>发送数据变更事件的方法：com.alibaba.nacos.client.config.impl.CacheData#checkListenerMd5</li></ul><h2 id="Sentienl"><a href="#Sentienl" class="headerlink" title="Sentienl"></a>Sentienl</h2><p>Sentinel是阿里巴巴开源的一款流量控制和熔断降级框架，主要用于微服务架构中服务的流量控制和熔断降级。其限流实现原理主要分为两个部分：</p><blockquote><p>统计信息收集</p></blockquote><p>Sentinel会在运行过程中对服务的各种统计信息进行收集，包括请求的响应时间、请求通过的QPS（每秒查询率）、线程池队列大小等指标。这些指标通过定义的规则进行分析，判断当前请求是否超过了设定的阈值。</p><blockquote><p>阈值判断</p></blockquote><p>Sentinel根据收集到的统计信息，通过定义的规则对请求进行判断。规则中包括以下几个要素：</p><p>资源名：对哪个资源进行限流<br>流控模式：直接拒绝或者匀速通过<br>流控阈值：单位时间内允许通过的请求个数<br>统计时间窗口：多长时间内统计一次流量，单位秒<br>降级处理：当请求超过阈值时的处理策略，如直接拒绝、返回默认值等<br>Sentinel会根据以上规则进行限流，当请求超过阈值时，根据设置的降级处理策略进行处理，比如直接拒绝请求、返回默认值等。同时，Sentinel还可以进行自适应的流控，根据实际情况调整阈值，保证服务的可用性和稳定性。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="Slot-插槽"><a href="#Slot-插槽" class="headerlink" title="Slot 插槽"></a>Slot 插槽</h4><p>在 Sentinel 里面，所有的资源都对应一个资源名称（resourceName），每次资源调用都会创建一个 Entry 对象。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 SphU API 显式创建。Entry 创建的时候，同时也会创建一系列功能插槽（slot chain），这些插槽有不同的职责，例如:</p><ul><li>NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；</li><li>ClusterBuilderSlot 则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</li><li>StatisticSlot 则用于记录、统计不同纬度的 runtime 指标监控信息；</li><li>FlowSlot 则用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；</li><li>AuthoritySlot 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li><li>DegradeSlot 则通过统计信息以及预设的规则，来做熔断降级；</li><li>SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量；</li></ul><p>Sentinel 提供了插槽接口 ProcessorSlot，其中提供了方法 enrty 处理进入请求 和 exit 处理请求结束操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProcessorSlot</span>&lt;T&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Entrance of this slot.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param           generics parameter, usually is a &#123;<span class="doctag">@link</span> com.alibaba.csp.sentinel.node.Node&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prioritized     whether the entry is prioritized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable blocked exception or unexpected error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, T param, <span class="type">int</span> count, <span class="type">boolean</span> prioritized,</span></span><br><span class="line"><span class="params">               Object... args)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Means finish of &#123;<span class="doctag">@link</span> #entry(Context, ResourceWrapper, Object, int, boolean, Object...)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj             relevant object (e.g. Node)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prioritized     whether the entry is prioritized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable blocked exception or unexpected error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fireEntry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object obj, <span class="type">int</span> count, <span class="type">boolean</span> prioritized,</span></span><br><span class="line"><span class="params">                   Object... args)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Exit of this slot.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Means finish of &#123;<span class="doctag">@link</span> #exit(Context, ResourceWrapper, int, Object...)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context         current &#123;<span class="doctag">@link</span> Context&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceWrapper current resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count           tokens needed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args            parameters of the original call</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fireExit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体的框架如下:</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/3.png" alt="结构图"></p><p>Sentinel 将 SlotChainBuilder 作为 SPI 接口进行扩展，使得 Slot Chain 具备了扩展的能力。您可以自行加入自定义的 slot 并编排 slot 间的顺序，从而可以给 Sentinel 添加自定义的功能。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/4.png" alt="Sentinel图"></p><h4 id="RuleManager-规则管理器"><a href="#RuleManager-规则管理器" class="headerlink" title="RuleManager 规则管理器"></a>RuleManager 规则管理器</h4><p>每个 Slot 插槽背后都对应着一个 RuleManager 的实现类，简单理解就是每个 Slot 有一套规则，规则验证处理由对应的 RuleManager 来进行处理。</p><p>流量控制：FlowSolt 对应 FlowRuleManager</p><p>降级控制：DegradeSlot  对应 DegradeRuleManager</p><p>权限控制：AuthoritySlot 对应 AuthorityRuleManager</p><p>系统规则控制： SystemSlot 对应 SystemRuleManager</p><h4 id="降级控制实现原理"><a href="#降级控制实现原理" class="headerlink" title="降级控制实现原理"></a>降级控制实现原理</h4><ol><li>新增资源配置降级规则，目前对于降级策有如下三种：</li></ol><p>RT：平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt&#x3D;xxx 来配置。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/5.png" alt="平均响应图"></p><p>异常比例：当资源的每秒请求量 &gt;&#x3D; 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/6.png" alt="异常比例图"></p><p>异常数：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/7.png" alt="异常数图"></p><p>限流结果信息</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Blocked by Sentinel (flow limiting)</span><br></pre></td></tr></table></figure><ol start="2"><li>实现逻辑</li></ol><p>在之前我们已经提及 Sentinel 是通过 slot 链来实现的，对于降级功能其提供了 DegradeSlot，实现源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DegradeSlot</span> <span class="keyword">extends</span> <span class="title class_">AbstractLinkedProcessorSlot</span>&lt;DefaultNode&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);</span><br><span class="line">        fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span> &#123;</span><br><span class="line">        fireExit(context, resourceWrapper, count, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码我们可以了解到，限流规则的实现是在 DegradeRuleManager 的checkDegrade中来处理的，限流可以-配置多个规则，依次按照规则来处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkDegrade</span><span class="params">(ResourceWrapper resource, Context context, DefaultNode node, <span class="type">int</span> count)</span></span><br><span class="line">        <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line"> </span><br><span class="line">        Set&lt;DegradeRule&gt; rules = degradeRules.get(resource.getName());</span><br><span class="line">        <span class="keyword">if</span> (rules == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (DegradeRule rule : rules) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!rule.passCheck(context, node, count)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DegradeException</span>(rule.getLimitApp(), rule);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 DegradeRule 的 passCheck 方法中我们可以看到可以根据 RT、异常数和异常比例来进行熔断降级处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">passCheck</span><span class="params">(Context context, DefaultNode node, <span class="type">int</span> acquireCount, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cut.get()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ClusterNode</span> <span class="variable">clusterNode</span> <span class="operator">=</span> ClusterBuilderSlot.getClusterNode(<span class="built_in">this</span>.getResource());</span><br><span class="line">        <span class="keyword">if</span> (clusterNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 请求处理时间</span></span><br><span class="line">        <span class="keyword">if</span> (grade == RuleConstant.DEGRADE_GRADE_RT) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">rt</span> <span class="operator">=</span> clusterNode.avgRt();</span><br><span class="line">            <span class="keyword">if</span> (rt &lt; <span class="built_in">this</span>.count) &#123;</span><br><span class="line">                passCount.set(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Sentinel will degrade the service only if count exceeds.</span></span><br><span class="line">            <span class="keyword">if</span> (passCount.incrementAndGet() &lt; rtSlowRequestAmount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade == RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO) &#123;</span><br><span class="line"><span class="comment">//异常比例</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">exception</span> <span class="operator">=</span> clusterNode.exceptionQps();</span><br><span class="line">            <span class="type">double</span> <span class="variable">success</span> <span class="operator">=</span> clusterNode.successQps();</span><br><span class="line">            <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> clusterNode.totalQps();</span><br><span class="line">            <span class="comment">// If total amount is less than minRequestAmount, the request will pass.</span></span><br><span class="line">            <span class="keyword">if</span> (total &lt; minRequestAmount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// In the same aligned statistic time window,</span></span><br><span class="line">            <span class="comment">// &quot;success&quot; (aka. completed count) = exception count + non-exception count (realSuccess)</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">realSuccess</span> <span class="operator">=</span> success - exception;</span><br><span class="line">            <span class="keyword">if</span> (realSuccess &lt;= <span class="number">0</span> &amp;&amp; exception &lt; minRequestAmount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (exception / success &lt; count) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade == RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT) &#123;</span><br><span class="line"><span class="comment">//异常数</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">exception</span> <span class="operator">=</span> clusterNode.totalException();</span><br><span class="line">            <span class="keyword">if</span> (exception &lt; count) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (cut.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="type">ResetTask</span> <span class="variable">resetTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResetTask</span>(<span class="built_in">this</span>);</span><br><span class="line">            pool.schedule(resetTask, timeWindow, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="流量控制实现原理"><a href="#流量控制实现原理" class="headerlink" title="流量控制实现原理"></a>流量控制实现原理</h4><p>接下来我们了解学习一下 Sentinel 是如何实现流量控制的</p><p>流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p>FlowSlot 会根据预设的规则，结合前面 NodeSelectorSlot、ClusterNodeBuilderSlot、StatisticSlot 统计出来的实时信息进行流量控制。</p><p>限流的直接表现是在执行 Entry nodeA &#x3D; SphU.entry(resourceName) 的时候抛出 FlowException 异常。FlowException 是 BlockException 的子类，您可以捕捉 BlockException 来自定义被限流之后的处理逻辑。</p><p>同一个资源可以创建多条限流规则。FlowSlot 会对该资源的所有限流规则依次遍历，直到有规则触发限流或者所有规则遍历完毕。</p><p>一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><ul><li>resource：资源名，即限流规则的作用对象</li><li>count: 限流阈值</li><li>grade: 限流阈值类型（QPS 或并发线程数）</li><li>limitApp: 流控针对的调用来源，若为 default 则不区分调用来源</li><li>strategy: 调用关系限流策略</li><li>controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）</li></ul><p>流控-QPS配置</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/8.png" alt="QPS配置图"></p><p>流控-线程数配置</p><p><img src="/./2024/05/26/Springcloud%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/9.png" alt="流控图"></p><h5 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h5><p>Sentinel 提供了 FlowSlot 用来进行流量控制，流量规则的最终实现在 FlowRuleChecker 的 checkFlow 中实现的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowSlot</span> <span class="keyword">extends</span> <span class="title class_">AbstractLinkedProcessorSlot</span>&lt;DefaultNode&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FlowRuleChecker checker;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FlowSlot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">FlowRuleChecker</span>());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Package-private for test.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> checker flow rule checker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FlowSlot(FlowRuleChecker checker) &#123;</span><br><span class="line">        AssertUtil.notNull(checker, <span class="string">&quot;flow checker should not be null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.checker = checker;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, <span class="type">int</span> count,</span></span><br><span class="line"><span class="params">                      <span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        checkFlow(resourceWrapper, context, node, count, prioritized);</span><br><span class="line"> </span><br><span class="line">        fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">checkFlow</span><span class="params">(ResourceWrapper resource, Context context, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized)</span></span><br><span class="line">        <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">        checker.checkFlow(ruleProvider, resource, context, node, count, prioritized);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="type">int</span> count, Object... args)</span> &#123;</span><br><span class="line">        fireExit(context, resourceWrapper, count, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Function&lt;String, Collection&lt;FlowRule&gt;&gt; ruleProvider = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Collection&lt;FlowRule&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Collection&lt;FlowRule&gt; <span class="title function_">apply</span><span class="params">(String resource)</span> &#123;</span><br><span class="line">            <span class="comment">// Flow rule map should not be null.</span></span><br><span class="line">            Map&lt;String, List&lt;FlowRule&gt;&gt; flowRules = FlowRuleManager.getFlowRuleMap();</span><br><span class="line">            <span class="keyword">return</span> flowRules.get(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 checkFlow 中会依次获取我们配置的流控规则，然后依次进行流控判断处理，如果被流控则抛出异常 FlowException</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFlow</span><span class="params">(Function&lt;String, Collection&lt;FlowRule&gt;&gt; ruleProvider, ResourceWrapper resource,</span></span><br><span class="line"><span class="params">                          Context context, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized)</span> <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">        <span class="keyword">if</span> (ruleProvider == <span class="literal">null</span> || resource == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;FlowRule&gt; rules = ruleProvider.apply(resource.getName());</span><br><span class="line">        <span class="keyword">if</span> (rules != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (FlowRule rule : rules) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!canPassCheck(rule, context, node, count, prioritized)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowException</span>(rule.getLimitApp(), rule);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在 canPassCheck 中会判断是集群限流还是本地限流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPassCheck</span><span class="params">(<span class="comment">/*@NonNull*/</span> FlowRule rule, Context context, DefaultNode node, <span class="type">int</span> acquireCount,</span></span><br><span class="line"><span class="params">                                                    <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">limitApp</span> <span class="operator">=</span> rule.getLimitApp();</span><br><span class="line">        <span class="keyword">if</span> (limitApp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (rule.isClusterMode()) &#123;</span><br><span class="line">            <span class="keyword">return</span> passClusterCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> passLocalCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果是本地限流则获取节点信息，然后根据流控规则进行流控判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">passLocalCheck</span><span class="params">(FlowRule rule, Context context, DefaultNode node, <span class="type">int</span> acquireCount,</span></span><br><span class="line"><span class="params">                                          <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">selectedNode</span> <span class="operator">=</span> selectNodeByRequesterAndStrategy(rule, context, node);</span><br><span class="line">        <span class="keyword">if</span> (selectedNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> rule.getRater().canPass(selectedNode, acquireCount, prioritized);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当 QPS 超过某个阈值的时候，则采取措施进行流量控制。流量控制的手段包括以下几种：直接拒绝、Warm Up、匀速排队。对应 FlowRule 中的 controlBehavior 字段。</p><p>直接拒绝（RuleConstant.CONTROL_BEHAVIOR_DEFAULT）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。具体的例子参见 FlowQpsDemo。</p><p>Warm Up（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热&#x2F;冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。详细文档可以参考 流量控制 - Warm Up 文档</p><p>目前 Sentinel 对于流量控制提供了如下几种方式：</p><ul><li>直接拒绝（DefaultController）：支持抛出异常<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curCount</span> <span class="operator">=</span> avgUsedTokens(node);</span><br><span class="line">    <span class="keyword">if</span> (curCount + acquireCount &gt; count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prioritized &amp;&amp; grade == RuleConstant.FLOW_GRADE_QPS) &#123;</span><br><span class="line">            <span class="type">long</span> currentTime;</span><br><span class="line">            <span class="type">long</span> waitInMs;</span><br><span class="line">            currentTime = TimeUtil.currentTimeMillis();</span><br><span class="line">            waitInMs = node.tryOccupyNext(currentTime, acquireCount, count);</span><br><span class="line">            <span class="keyword">if</span> (waitInMs &lt; OccupyTimeoutProperty.getOccupyTimeout()) &#123;</span><br><span class="line">                node.addWaitingRequest(currentTime + waitInMs, acquireCount);</span><br><span class="line">                node.addOccupiedPass(acquireCount);</span><br><span class="line">                sleep(waitInMs);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// PriorityWaitException indicates that the request will pass after waiting for &#123;@link @waitInMs&#125;.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PriorityWaitException</span>(waitInMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>匀速排队（RateLimiterController）：判断等待时间，如果等待时间过长也是会限流，并且使用 Thread.sleep 如果配置不正确可能会导致线程过多。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">        <span class="comment">// Pass when acquire count is less or equal than 0.</span></span><br><span class="line">        <span class="keyword">if</span> (acquireCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Reject when count is less or equal than 0.</span></span><br><span class="line">        <span class="comment">// Otherwise,the costTime will be max of long and waitTime will overflow in some cases.</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> TimeUtil.currentTimeMillis();</span><br><span class="line">        <span class="comment">// Calculate the interval between every two requests.</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> Math.round(<span class="number">1.0</span> * (acquireCount) / count * <span class="number">1000</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Expected pass time of this request.</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expectedTime</span> <span class="operator">=</span> costTime + latestPassedTime.get();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (expectedTime &lt;= currentTime) &#123;</span><br><span class="line">            <span class="comment">// Contention may exist here, but it&#x27;s okay.</span></span><br><span class="line">            latestPassedTime.set(currentTime);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Calculate the time to wait.</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> costTime + latestPassedTime.get() - TimeUtil.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (waitTime &gt; maxQueueingTimeMs) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">oldTime</span> <span class="operator">=</span> latestPassedTime.addAndGet(costTime);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    waitTime = oldTime - TimeUtil.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">if</span> (waitTime &gt; maxQueueingTimeMs) &#123;</span><br><span class="line">                        latestPassedTime.addAndGet(-costTime);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// in race condition waitTime may &lt;= 0</span></span><br><span class="line">                    <span class="keyword">if</span> (waitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Thread.sleep(waitTime);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>Warm Up（WarmUpController 和 WarmUpRateLimiterController）：预热启动<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">passQps</span> <span class="operator">=</span> (<span class="type">long</span>) node.passQps();</span><br><span class="line"> </span><br><span class="line">    <span class="type">long</span> <span class="variable">previousQps</span> <span class="operator">=</span> (<span class="type">long</span>) node.previousPassQps();</span><br><span class="line">    syncToken(previousQps);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 开始计算它的斜率</span></span><br><span class="line">    <span class="comment">// 如果进入了警戒线，开始调整他的qps</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">restToken</span> <span class="operator">=</span> storedTokens.get();</span><br><span class="line">    <span class="keyword">if</span> (restToken &gt;= warningToken) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">aboveToken</span> <span class="operator">=</span> restToken - warningToken;</span><br><span class="line">        <span class="comment">// 消耗的速度要比warning快，但是要比慢</span></span><br><span class="line">        <span class="comment">// current interval = restToken*slope+1/count</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">warningQps</span> <span class="operator">=</span> Math.nextUp(<span class="number">1.0</span> / (aboveToken * slope + <span class="number">1.0</span> / count));</span><br><span class="line">        <span class="keyword">if</span> (passQps + acquireCount &lt;= warningQps) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (passQps + acquireCount &lt;= count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Springmvc最热点面试题</title>
      
      <link href="/2024/05/26/Springmvc%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Springmvc%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/./2024/05/26/Springmvc%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="流程图"></p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><strong>用户发送请求至前端控制器DispatcherServlet</strong><ol><li>DispatcherServlet：前端控制器。用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性,系统扩展性提高。由框架实现</li><li>doService doDispatch(request, response);</li></ol></li><li><strong>DispatcherServlet收到请求调用处理器映射器HandlerMapping</strong><ol><li>HandlerMapping：处理器映射器。HandlerMapping负责根据用户请求的url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，根据一定的规则去查找,例如：xml配置方式，实现接口方式，注解方式等。由框架实现</li></ol></li><li><strong>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet</strong></li><li><strong>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</strong><ol><li>Handler：处理器。Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</li><li>将http报文转换为对象<ol><li>HttpMessageConverter接口<ol><li><code>canRead</code> http-&gt;object</li><li><code>canWrite</code> 对象的序列化输出</li></ol></li><li>HttpMessageConverter有很多的实现类，根据HTTP协议的Accept和Content-Type属性，以及参数数据类型来判别使用哪一种HttpMessageConverter</li></ol></li></ol></li><li><strong>执行处理器Handler(Controller，也叫页面控制器)</strong></li><li><strong>Handler执行完成返回ModelAndView</strong></li><li><strong>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</strong><ol><li>HandlAdapter：处理器适配器。通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。由框架实现。</li></ol></li><li><strong>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</strong><ol><li>ModelAndView是springmvc的封装对象，将model和view封装在一起</li></ol></li><li><strong>ViewReslover解析后返回具体View</strong><ol><li>ViewResolver：视图解析器。ViewResolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户</li></ol></li><li><strong>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）</strong><ol><li>View:是springmvc的封装对象，是一个接口, springmvc框架提供了很多的View视图类型，包括：jspview，pdfview,jstlView、freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li></ol></li><li><strong>DispatcherServlet响应用户</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Springboot最热点面试题</title>
      
      <link href="/2024/05/26/Springboot%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Springboot%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot启动流程"><a href="#springboot启动流程" class="headerlink" title="springboot启动流程"></a>springboot启动流程</h2><h3 id="启动类上注解：-SpringBootApplication"><a href="#启动类上注解：-SpringBootApplication" class="headerlink" title="启动类上注解：@SpringBootApplication"></a>启动类上注解：@SpringBootApplication</h3><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>根据Javadoc可知，该注解作用就是将当前的类作为一个JavaConfig，然后触发注解@EnableAutoConfiguration和@ComponentScan的处理，本质上与@Configuration注解没有区别</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>@EnableAutoConfiguration:实现自动装配的核心注解</p><ul><li>@AutoConfigurationPackage<ul><li>注册当前启动类的根 package</li><li>注册 org.springframework.boot.autoconfigure.AutoConfigurationPackages 的 BeanDefinition</li></ul></li><li>@Import(AutoConfigurationImportSelector.class)<ul><li>自动装配核心功能的实现实际是通过 AutoConfigurationImportSelector(加载自动装配类)类</li><li>AutoConfigurationImportSelector 类实现了 ImportSelector接口<ul><li>实现了这个接口中的 selectImports方法<ul><li>方法实现 重要的getAutoConfigurationEntry()方法<ol><li>判断自动装配是否打开，默认是true可以通过application.yml设置</li><li>获取@EnableAutoConfiguration里的exclude和excludeName内容以便排除</li><li>获取需要自动装配的所有配置类，读取META-INF&#x2F;spring.factories druid 数据库连接池的 Spring Boot Starter 就创建了META-INF&#x2F;spring.factories文件</li><li>筛选满足@ConditionalOnXXX注解的类，生效才会被加载</li></ol></li><li>该方法主要用于获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中</li></ul></li></ul></li></ul></li></ul><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>扫描的 Spring 对应的组件，如 @Componet，@Repository</p><ul><li>我们可以通过 basePackages 等属性来细粒度的定制 @ComponentScan 自动扫描的范围，如果不指定，则默认Spring框架实现会从声明 @ComponentScan 所在类的package进行扫描，所以 SpringBoot 的启动类最好是放在根package下，我们自定义的类就放在对应的子package下，这样就可以不指定 basePackages</li></ul><h3 id="启动类中的main方法：org-springframework-boot-SpringApplication-run-java-lang-Class-java-lang-String…"><a href="#启动类中的main方法：org-springframework-boot-SpringApplication-run-java-lang-Class-java-lang-String…" class="headerlink" title="启动类中的main方法：org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String…)"></a>启动类中的main方法：org.springframework.boot.SpringApplication#run(java.lang.Class&lt;?&gt;, java.lang.String…)</h3><ul><li>从spring.factories配置文件中加载EventPublishingRunListener对象，该对象拥有SimpleApplicationEventMulticaster属性，即在SpringBoot启动过程的不同阶段用来发射内置的生命周期事件;<ul><li>spring-bean包下META-INF&#x2F;spring.factories</li></ul></li><li>准备环境变量，包括系统变量，环境变量，命令行参数，默认变量，servlet相关配置变量，随机值以及配置文件（比如application.properties）等;<ul><li>而后就会去创建Environment——这个时候会去加载application配置文件</li></ul></li><li>控制台打印SpringBoot的bannner标志；</li><li>根据不同类型环境创建不同类型的applicationcontext容器，因为这里是servlet环境，所以创建的是AnnotationConfigServletWebServerApplicationContext容器对象；</li><li>从spring.factories配置文件中加载FailureAnalyzers对象,用来报告SpringBoot启动过程中的异常；</li><li>为刚创建的容器对象做一些初始化工作，准备一些容器属性值等，对ApplicationContext应用一些相关的后置处理和调用各个ApplicationContextInitializer的初始化方法来执行一些初始化逻辑等；</li><li>刷新容器，这一步至关重要。比如调用bean factory的后置处理器，注册BeanPostProcessor后置处理器，初始化事件广播器且广播事件，初始化剩下的单例bean和SpringBoot创建内嵌的Tomcat服务器等等重要且复杂的逻辑都在这里实现，主要步骤可见代码的注释，关于这里的逻辑会在以后的spring源码分析专题详细分析；<ul><li>&#x2F;&#x2F; 1）在context刷新前做一些准备工作，比如初始化一些属性设置，属性合法性校验和保存容器中的一些早期事件等；</li><li>&#x2F;&#x2F; 2）让子类刷新其内部bean factory,注意SpringBoot和Spring启动的情况执行逻辑不一样</li><li>&#x2F;&#x2F; 3）对bean factory进行配置，比如配置bean factory的类加载器，后置处理器等</li><li>&#x2F;&#x2F; 4）完成bean factory的准备工作后，此时执行一些后置处理逻辑，子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置<ul><li>&#x2F;&#x2F; 在这一步，所有的bean definitions将会被加载，但此时bean还不会被实例化</li></ul></li><li>&#x2F;&#x2F; 5）执行BeanFactoryPostProcessor的方法即调用bean factory的后置处理器：<ul><li>&#x2F;&#x2F; BeanDefinitionRegistryPostProcessor（触发时机：bean定义注册之前）和BeanFactoryPostProcessor（触发时机：bean定义注册之后bean实例化之前）</li></ul></li><li>&#x2F;&#x2F; 6）注册bean的后置处理器BeanPostProcessor，注意不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的</li><li>&#x2F;&#x2F; 7）初始化国际化MessageSource相关的组件，比如消息绑定，消息解析等</li><li>&#x2F;&#x2F; 8）初始化事件广播器，如果bean factory没有包含事件广播器，那么new一个SimpleApplicationEventMulticaster广播器对象并注册到bean factory中</li><li>&#x2F;&#x2F; 9）AbstractApplicationContext定义了一个模板方法onRefresh，留给子类覆写，比如ServletWebServerApplicationContext覆写了该方法来创建内嵌的tomcat容器</li><li>&#x2F;&#x2F; 10）注册实现了ApplicationListener接口的监听器，之前已经有了事件广播器，此时就可以派发一些early application events</li><li>&#x2F;&#x2F; 11）完成容器bean factory的初始化，并初始化所有剩余的单例bean。这一步非常重要，一些bean postprocessor会在这里调用。</li><li>&#x2F;&#x2F; 12）完成容器的刷新工作，并且调用生命周期处理器的onRefresh()方法，并且发布ContextRefreshedEvent事件</li></ul></li><li>执行刷新容器后的后置处理逻辑，注意这里为空方法；</li><li>调用ApplicationRunner和CommandLineRunner的run方法，我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等;</li><li>报告启动异常，即若启动过程中抛出异常，此时用FailureAnalyzers来报告异常;</li><li>最终返回容器对象，这里调用方法没有声明对象来接收。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   SpringApplication.run(<span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[<span class="number">0</span>], args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">// 新建SpringApplication对象，再调用run方法</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">   <span class="comment">// stopWatch用于统计run启动过程时长</span></span><br><span class="line">   <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">   <span class="comment">// 开始计时</span></span><br><span class="line">   stopWatch.start();</span><br><span class="line">   <span class="comment">// 创建ConfigurableApplicationContext对象</span></span><br><span class="line">   <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">// exceptionReporters集合用来存储SpringApplication启动过程的异常，SpringBootExceptionReporter且通过spring.factories方式来加载</span></span><br><span class="line">   Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">// 配置headless属性</span></span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从spring.factories配置文件中加载到EventPublishingRunListener对象并赋值给SpringApplicationRunListeners</span></span><br><span class="line"><span class="comment">    * # Run Listeners</span></span><br><span class="line"><span class="comment">    * org.springframework.boot.SpringApplicationRunListener=\</span></span><br><span class="line"><span class="comment">    * org.springframework.boot.context.event.EventPublishingRunListener</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">   <span class="comment">// 启动SpringApplicationRunListeners监听</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建ApplicationArguments对象，封装了args参数</span></span><br><span class="line">      <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">      <span class="comment">// 备配置参数有app.properties，外部配置参数比如jvm启动参数等</span></span><br><span class="line">      <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">      <span class="comment">// 配置spring.beaninfo.ignore属性</span></span><br><span class="line">      configureIgnoreBeanInfo(environment);</span><br><span class="line">      <span class="comment">// 打印springboot的bannner</span></span><br><span class="line">      <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">      <span class="comment">// 根据不同类型创建不同类型的spring applicationcontext容器</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 异常报告</span></span><br><span class="line"><span class="comment">       * 从spring.factories配置文件中加载exceptionReporters，其中ConfigurableApplicationContext.class作为FailureAnalyzers构造方法的参数</span></span><br><span class="line"><span class="comment">       * # Error Reporters</span></span><br><span class="line"><span class="comment">       * org.springframework.boot.SpringBootExceptionReporter=\</span></span><br><span class="line"><span class="comment">       * org.springframework.boot.diagnostics.FailureAnalyzers</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">      <span class="comment">// 准备容器事项：调用各个ApplicationContextInitializer的initialize方法</span></span><br><span class="line">      <span class="comment">// 和触发SpringApplicationRunListeners的contextPrepared及contextLoaded方法等</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">      <span class="comment">// 刷新容器，这一步至关重要</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      <span class="comment">// 执行刷新容器后的后置处理逻辑，注意这里为空方法</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      <span class="comment">// 停止stopWatch计时</span></span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="comment">// 打印springboot的启动时常</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 触发SpringApplicationRunListener的started方法，通知spring容器已经启动</span></span><br><span class="line">      listeners.started(context);</span><br><span class="line">      <span class="comment">// 调用ApplicationRunner和CommandLineRunner的run方法，实现spring容器启动后需要做的一些东西</span></span><br><span class="line">      callRunners(context, applicationArguments);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 若上面的方法抛出异常，将异常添加到exceptionReporters集合中，并抛出 IllegalStateException 异常。</span></span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 当容器刷新完毕等，触发SpringApplicationRunListeners数组的running方法</span></span><br><span class="line">      listeners.running(context);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="comment">// 若上面的方法抛出异常，将异常添加到exceptionReporters集合中，并抛出 IllegalStateException 异常。</span></span><br><span class="line">      handleRunFailure(context, ex, exceptionReporters, <span class="literal">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="怎么让Spring把Body变成一个对象"><a href="#怎么让Spring把Body变成一个对象" class="headerlink" title="怎么让Spring把Body变成一个对象"></a>怎么让Spring把Body变成一个对象</h2><ul><li>@RequestBody注解原理</li><li>详细看springmvc的处理流程</li></ul><h2 id="SpringBoot的starter实现原理是什么？"><a href="#SpringBoot的starter实现原理是什么？" class="headerlink" title="SpringBoot的starter实现原理是什么？"></a>SpringBoot的starter实现原理是什么？</h2><p>原理就是因为在@EnableAutoConfiguration注解，会自动的扫描jar包下的META-INF&#x2F;spring.factories文件的配置类，写在这里面的类都是需要被自动加载的</p><p>将configuration类中定义的bean加入spring到容器中。就相当于加载之前我们自己配置组件的xml文件。而现在SpringBoot自己定义了一个默认的值，然后直接加载进入了Spring容器。</p><p>SpringBoot提供的自动配置依赖模块都以spring-boot-starter-为命名前缀，并且这些依赖都在org.springframework.boot下。 所有的spring-boot-starter都有约定俗成的默认配置，但允许调整这些配置调整默认的行为。</p><h2 id="spring-和springboot的区别"><a href="#spring-和springboot的区别" class="headerlink" title="spring 和springboot的区别"></a>spring 和springboot的区别</h2><p>Spring Boot基本上是Spring框架的扩展，它消除了设置Spring应用程序所需的XML配置，为更快，更高效的开发生态系统铺平了道路。</p><p>Spring Boot中的一些特征：</p><ul><li>创建独立的Spring应用。</li><li>嵌入式Tomcat、Jetty、 Undertow容器（无需部署war文件）。</li><li>提供的starters 简化构建配置</li><li>尽可能自动配置spring应用。</li><li>提供生产指标,例如指标、健壮检查和外部化配置</li><li>完全没有代码生成和XML配置要求</li></ul><p>Maven依赖</p><p>首先，让我们看一下使用Spring创建Web应用程序所需的最小依赖项</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与Spring不同，Spring Boot只需要一个依赖项来启动和运行Web应用程序：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行构建期间，所有其他依赖项将自动添加到项目中。</p><p>另一个很好的例子就是测试库。我们通常使用Spring Test，JUnit，Hamcrest和Mockito库。在Spring项目中，我们应该将所有这些库添加为依赖项。但是在Spring Boot中，我们只需要添加spring-boot-starter-test依赖项来自动包含这些库。</p><p>spring在运行前需要使用xml文件做很多配置，而springboot帮我们实现了这些配置的自动加载，基于注解和简单的yml配置即可</p><p>spring的web程序还是打包为war然后再Tomcat里运行，而springboot内嵌了Tomcat直接打成可运行的jar</p><h2 id="Spring-Boot-可执行-Jar-包运行原理"><a href="#Spring-Boot-可执行-Jar-包运行原理" class="headerlink" title="Spring Boot 可执行 Jar 包运行原理"></a>Spring Boot 可执行 Jar 包运行原理</h2><p>Spring Boot 有一个很方便的功能就是可以将应用打成可执行的 Jar。那么大家有没想过这个 Jar 是怎么运行起来的呢？本篇博客就来介绍下 Spring Boot 可执行 Jar 包的运行原理。</p><h3 id="打可执行-Jar-包"><a href="#打可执行-Jar-包" class="headerlink" title="打可执行 Jar 包"></a>打可执行 Jar 包</h3><p>将 Spring Boot 应用打成可执行 Jar包很容易，只需要在 pom 中加上一个 Spring Boot 提供的插件，然后在执行mvn package即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行完mvn package后，我们会在 target 目录下看到两个 jar 文件。myproject-0.0.1-SNAPSHOT.jar 和 myproject-0.0.1-SNAPSHOT.jar.original。第一个 jar 文件就是我们应用的可执行 jar 包，第二个 Jar 文件是应用原始的 jar 包。</p><h3 id="可执行-Jar-包内部结构"><a href="#可执行-Jar-包内部结构" class="headerlink" title="可执行 Jar 包内部结构"></a>可执行 Jar 包内部结构</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">可执行 jar 目录结构</span><br><span class="line">├─BOOT-INF</span><br><span class="line">│  ├─classes</span><br><span class="line">│  └─lib</span><br><span class="line">├─META-INF</span><br><span class="line">│  ├─maven</span><br><span class="line">│  ├─app.properties</span><br><span class="line">│  ├─MANIFEST.MF      </span><br><span class="line">└─org</span><br><span class="line">    └─springframework</span><br><span class="line">        └─boot</span><br><span class="line">            └─loader</span><br><span class="line">                ├─archive</span><br><span class="line">                ├─data</span><br><span class="line">                ├─jar</span><br><span class="line">                └─util</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们先来重点关注两个地方：META-INF 下面的 Jar 包描述文件和 BOOT-INF 这个目录。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Manifest-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attr">Archiver-Version</span>: <span class="string">Plexus Archiver</span></span><br><span class="line"><span class="attr">Built-By</span>: <span class="string">xxxx</span></span><br><span class="line"><span class="attr">Start-Class</span>: <span class="string">com.xxxx.AppServer</span></span><br><span class="line"><span class="attr">Spring-Boot-Classes</span>: <span class="string">BOOT-INF/classes/</span></span><br><span class="line"><span class="attr">Spring-Boot-Lib</span>: <span class="string">BOOT-INF/lib/</span></span><br><span class="line"><span class="attr">Spring-Boot-Version</span>: <span class="string">2.1.6.RELEASE</span></span><br><span class="line"><span class="attr">Created-By</span>: <span class="string">Apache Maven 3.3.9</span></span><br><span class="line"><span class="attr">Build-Jdk</span>: <span class="string">1.8.0_73</span></span><br><span class="line"><span class="attr">Main-Class</span>: <span class="string">org.springframework.boot.loader.JarLauncher</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面我们看到一个熟悉的配置Main-Class: org.springframework.boot.loader.JarLauncher。我们大概能猜到这个类是整个系统的入口。</p><p>再看下 BOOT-INF 这个目录下面，我们会发现里面是我们项目打出来的 class 文件和项目依赖的 Jar 包。看到这里，你可能已经猜到 Spring Boot 是怎么启动项目的了。</p><h3 id="JarLauncher"><a href="#JarLauncher" class="headerlink" title="JarLauncher"></a>JarLauncher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JarLauncher</span> <span class="keyword">extends</span> <span class="title class_">ExecutableArchiveLauncher</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOT_INF_CLASSES</span> <span class="operator">=</span> <span class="string">&quot;BOOT-INF/classes/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOT_INF_LIB</span> <span class="operator">=</span> <span class="string">&quot;BOOT-INF/lib/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JarLauncher</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">JarLauncher</span><span class="params">(Archive archive)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(archive);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isNestedArchive</span><span class="params">(Archive.Entry entry)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getName().equals(BOOT_INF_CLASSES);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entry.getName().startsWith(BOOT_INF_LIB);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//项目入口，重点在launch这个方法中</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">JarLauncher</span>().launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//launch方法</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    JarFile.registerUrlProtocolHandler();</span><br><span class="line">    <span class="comment">//创建LaunchedURLClassLoader。如果根类加载器和扩展类加载器没有加载到某个类的话，就会通过LaunchedURLClassLoader这个加载器来加载类。这个加载器会从Boot-INF下面的class目录和lib目录下加载类。</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> createClassLoader(getClassPathArchives());</span><br><span class="line">    <span class="comment">//这个方法会读取jar描述文件中的Start-Class属性，然后通过反射调用到这个类的main方法。</span></span><br><span class="line">    launch(args, getMainClass(), classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单总结</p><ul><li>Spring Boot 可执行 Jar 包的入口点是 JarLauncher 的 main 方法；</li><li>这个方法的执行逻辑是先创建一个 LaunchedURLClassLoader，这个加载器加载类的逻辑是：先判断根类加载器和扩展类加载器能否加载到某个类，如果都加载不到就从 Boot-INF 下面的 class 和 lib 目录下去加载；</li><li>读取Start-Class属性，通过反射机制调用启动类的 main 方法，这样就顺利调用到我们开发的 Spring Boot 主启动类的 main 方法了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Spring最热点面试题</title>
      
      <link href="/2024/05/26/Spring%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/05/26/Spring%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/./2024/05/26/Spring%E6%9C%80%E7%83%AD%E7%82%B9%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="结构图"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h3><p>核心容器(Core Container)</p><ul><li><code>spring-beans</code> 该模块是依赖注入IoC与DI的最基本实现</li><li><code>spring-core</code> 该模块是Bean工厂与bean的装配</li><li><code>spring-context</code> 该模块构架于核心模块之上，它扩展了 BeanFactory，为它添加了 Bean 生命周期控制、框架事件体系以及资源加载透明化等功能。ApplicationContext 是该模块的核心接口，它的超类是<br>BeanFactory。与BeanFactory 不同，ApplicationContext 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态</li><li><code>spring-context-indexer</code> 该模块是 Spring 的类管理组件和 Classpath 扫描</li><li><code>spring-context-support</code> 该模块是对 Spring IOC 容器的扩展支持，以及 IOC 子容器</li><li><code>spring-expression</code> 该模块是Spring表达式语言块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等</li></ul><h3 id="Data-Access-Integration"><a href="#Data-Access-Integration" class="headerlink" title="Data Access&#x2F;Integration"></a>Data Access&#x2F;Integration</h3><p>数据访问&#x2F;集成</p><ul><li><code>spring-jdbc</code> 该模块提供了 JDBC抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析</li><li><code>spring-tx</code> 该模块支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的 POJO 对象。编程式事务需要自己写beginTransaction()、commit()、rollback()<br>等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细</li><li><code>spring-orm</code> 该模块提供了对流行的对象关系映射 API的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理</li><li><code>spring-oxm</code> 该模块提供了对 OXM 实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等</li><li><code>spring-jms</code> 该模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了 spring-messaging 模块</li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>网络部分</p><ul><li><code>spring-web</code> 该模块为 Spring 提供了最基础 Web 支持，主要建立于核心容器之上，通过 Servlet 或者 Listeners 来初始化 IOC 容器，也包含一些与 Web 相关的支持</li><li><code>spring-webmvc</code> 该模块众所周知是一个的 Web-Servlet 模块，实现了 Spring MVC（model-view-Controller）的 Web 应用</li><li><code>spring-websocket</code> 该模块主要是与 Web 前端的全双工通讯的协议</li><li><code>spring-webflux</code> 该模块是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</li></ul><h3 id="面向切面编程-AOP和Aspects"><a href="#面向切面编程-AOP和Aspects" class="headerlink" title="面向切面编程(AOP和Aspects)"></a>面向切面编程(AOP和Aspects)</h3><ul><li><code>spring-aop</code> 该模块是Spring的另一个核心模块，是 AOP 主要的实现模块</li><li><code>spring-aspects</code> 该模块提供了对 AspectJ 的集成，主要是为 Spring AOP提供多种 AOP 实现方法，如前置方法后置方法等</li></ul><h3 id="设备-Instrumentation"><a href="#设备-Instrumentation" class="headerlink" title="设备(Instrumentation)"></a>设备(Instrumentation)</h3><ul><li><code>spring-instrument</code> 该模块是基于JAVA SE 中的”java.lang.instrument”进行设计的，应该算是 AOP的一个支援模块，主要作用是在 JVM<br>启用时，生成一个代理类，程序员通过代理类在运行时修改类的字节，从而改变一个类的功能，实现 AOP 的功能</li></ul><h3 id="消息-Messaging"><a href="#消息-Messaging" class="headerlink" title="消息(Messaging)"></a>消息(Messaging)</h3><ul><li><code>spring-messaging</code> 是从 Spring4 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用</li></ul><h3 id="测试-Test"><a href="#测试-Test" class="headerlink" title="测试(Test)"></a>测试(Test)</h3><ul><li><code>spring-test</code> 主要为测试提供支持的，通过 JUnit 和 TestNG 组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring 上下文，也提供了用于单独测试代码的模拟对象（mock object）</li></ul><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC是什么？"><a href="#IOC是什么？" class="headerlink" title="IOC是什么？"></a>IOC是什么？</h3><p>控制反转即IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。</p><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><h3 id="使用IOC的好处"><a href="#使用IOC的好处" class="headerlink" title="使用IOC的好处"></a>使用IOC的好处</h3><ul><li>不用自己组装，拿来就用。</li><li>享受单例的好处，效率高，不浪费空间</li><li>便于单元测试，方便切换mock组件</li><li>便于进行AOP操作，对于使用者是透明的</li><li>统一配置，便于修改</li></ul><h2 id="BeanFactory-和-ApplicationContext有什么区别"><a href="#BeanFactory-和-ApplicationContext有什么区别" class="headerlink" title="BeanFactory 和 ApplicationContext有什么区别"></a>BeanFactory 和 ApplicationContext有什么区别</h2><p>BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是BeanFactory的子接口。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>BeanFactory：是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。</p><p>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：</p><ul><li>继承MessageSource，因此支持国际化。</li><li>统一的资源文件访问方式。</li><li>提供在监听器中注册bean的事件。</li><li>同时加载多个配置文件。</li><li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。</li></ul><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())<br>，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。</p><p>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。<br>ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</p><p>相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。</p><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><p>BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</p><h3 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h3><p>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</p><h3 id="Spring-IoC的初始化过程"><a href="#Spring-IoC的初始化过程" class="headerlink" title="Spring IoC的初始化过程"></a>Spring IoC的初始化过程</h3><h4 id="IOC粗略总结"><a href="#IOC粗略总结" class="headerlink" title="IOC粗略总结"></a>IOC粗略总结</h4><ol><li>首先入口是xml或者注解或者其他形式，要实现beanDefinationReader接口，然后 读取的时候，会将他们解析为bean的定义信息；</li><li>beanFactory在加载bean信息实例化（底层用的反射）之前，spring加了一个接口beanFactoryPostProcessor,用作扩展用。</li><li>beanFactory内部实例化bean之后，在要初始化bean对象之前，增加了一个一系列aware接口，将他的容器，以及工厂都暴露出来供使用者做扩展用。</li><li>经过一些列容器以及容器对象的注入之后，在初始化之前，spring又增加了一个接口 beanPostProcessor,该接口是可以作用于所有创建的bean,在初始化前后，均能通过重写该接口获取bean对象进行定制操作。</li><li>经过实现初始化接口完成初始化功能。</li><li>经过实现销毁接口disposableBean结束其生命。</li></ol><h4 id="重要的组件"><a href="#重要的组件" class="headerlink" title="重要的组件"></a>重要的组件</h4><ul><li><code>BeanDefinition</code> 描述bean的属性的接口，例如bean的scope是单例还是多例，构造方法，有哪些property value，依赖等，相当于对这个bean的一份身份描述<ul><li><h2 id="Bean配置-–-BeanDefinition-–-Bean对象"><a href="#Bean配置-–-BeanDefinition-–-Bean对象" class="headerlink" title="Bean配置 –&gt; BeanDefinition –&gt; Bean对象"></a>Bean配置 –&gt; BeanDefinition –&gt; Bean对象</h2>懒加载情况下，refresh只是把BeanDefinition注册到BeanFactory中，而不是把Bean注册到BeanFactory中。在调用上下文的getBean的时候才会去根据BeanDefinition生成具体的bean对象</li></ul></li><li><code>BeanDefinitionMap</code></li><li><code>BeanFactory</code><ul><li>spring的基础bean容器</li><li>相当于存放所有bean的容器</li></ul></li><li><code>ApplicationContext</code><ul><li>BeanFactory 的子接口，在 BeanFactory 的基础上构建，是相对比较高级的 IoC 容器实现。包含 BeanFactory<br>的所有功能，还提供了其他高级的特性，比如：事件发布、国际化信息支持、统一资源加载策略等。正常情况下，我们都是使用的 ApplicationContext</li><li>相当于丰富了beanfactory的功能，这里理解为上下文就好</li></ul></li><li><code>FactoryBean</code></li></ul><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>首先抛开其他组件的启动，我们只需要引入spring-context就可以启动一个容器了</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而在springboot出来之前最常见的加载bean的方式是读取配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationfile.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里ApplicationContext是一个接口，主要的实现类有：</p><ul><li>ClassPathXmlApplicationContext 需要一个 xml 配置文件在系统中的路径</li><li>FileSystemXmlApplicationContext 需要一个 xml 配置文件在系统中的路径</li><li>AnnotationConfigApplicationContext 基于注解，大势所趋</li></ul><p>下面的分析都基于 ClassPathXmlApplicationContext 进行分析，因为比较好理解点</p><p>在 resources 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml就可以了,对应的类实现一个：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.javadoop.example.MessageServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 用我们的配置文件来启动一个 ApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;context 启动成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span></span><br><span class="line">        <span class="type">MessageService</span> <span class="variable">messageService</span> <span class="operator">=</span> context.getBean(MessageService.class);</span><br><span class="line">        <span class="comment">// 这句将输出: hello world</span></span><br><span class="line">        System.out.println(messageService.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法中的refresh()方法是启动加载整个容器的关键方法</p><p>方法在springboot容器启动时也会加载,方法为</p><ul><li>org.springframework.boot.SpringApplication#run</li><li>org.springframework.boot.SpringApplication#refreshContext</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span><span class="keyword">throws</span> BeansException,IllegalStateException&#123;</span><br><span class="line">    <span class="comment">// 1. 首先是一个synchronized加锁，当然要加锁，不然你先调一次refresh()然后这次还没处理完又调一次，就会乱套了；</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor)&#123;</span><br><span class="line">        <span class="comment">// 2. 这个方法是做准备工作的，记录容器的启动时间、标记“已启动”状态、处理配置文件中的占位符，可以点进去看看，这里就不多说了。</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 这个就很重要了，这一步是把配置文件解析成一个个Bean，并且注册到BeanFactory中，注意这里只是注册进去，并没有初始化。先继续往下看，等会展开这个方法详细解读</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory=obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 这个方法的作用是：设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean，这里都是spring里面的特殊处理，然后继续往下看</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 5. 方法是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化，具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类，来完成一些其他的操作。</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 6. 接下来是这个方法是调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法；</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 7. 然后这个方法注册 BeanPostProcessor 的实现类，和上面的BeanFactoryPostProcessor 是有区别的，这个方法调用的其实是PostProcessorRegistrationDelegate类的registerBeanPostProcessors方法；</span></span><br><span class="line">            <span class="comment">// 这个类里面有个内部类BeanPostProcessorChecker，BeanPostProcessorChecker里面有两个方法postProcessBeforeInitialization和postProcessAfterInitialization，这两个方法分别在 Bean 初始化之前和初始化之后得到执行。</span></span><br><span class="line">            <span class="comment">// 然后回到refresh()方法中继续往下看</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 8. 方法是初始化当前 ApplicationContext 的 MessageSource，国际化处理，继续往下</span></span><br><span class="line">            initMessageSource();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 9. 方法初始化当前 ApplicationContext 的事件广播器继续往下</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 10. 方法初始化一些特殊的 Bean（在初始化 singleton beans 之前）；继续往下</span></span><br><span class="line">            onRefresh();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 11. 方法注册事件监听器，监听器需要实现 ApplicationListener 接口；继续往下</span></span><br><span class="line">            registerListeners();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 12. 重点到了 初始化所有的 singleton beans（单例bean），懒加载（non-lazy-init）的除外，这个方法也是等会细说</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 13. 方法是最后一步，广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(BeansException ex)&#123;</span><br><span class="line">            <span class="keyword">if</span>(logger.isWarnEnabled())&#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span>+<span class="string">&quot;cancelling refresh attempt: &quot;</span>+ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            <span class="comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span></span><br><span class="line">            destroyBeans();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-bean的生命周期"><a href="#Spring-bean的生命周期" class="headerlink" title="Spring bean的生命周期"></a>Spring bean的生命周期</h3><p>Spring Bean的生命周期分为四个阶段和多个扩展点。扩展点又可以分为影响多个Bean和影响单个Bean。整理如下：</p><p>四个阶段</p><ul><li>实例化 Instantiation</li><li>属性赋值 Populate</li><li>初始化 Initialization</li><li>销毁 Destruction</li></ul><p>多个扩展点</p><ul><li>影响多个Bean<ul><li>BeanPostProcessor(作用于初始化阶段的前后)</li><li>InstantiationAwareBeanPostProcessor(作用于实例化阶段的前后)</li></ul></li><li>影响单个Bean<ul><li>Aware(Aware类型的接口的作用就是让我们能够拿到Spring容器中的一些资源)<ul><li>Aware Group1<ul><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ul></li><li>Aware Group2<ul><li>EnvironmentAware</li><li>EmbeddedValueResolverAware(实现该接口能够获取Spring EL解析器，用户的自定义注解需要支持spel表达式的时候可以使用)</li><li>ApplicationContextAware(ResourceLoaderAware\ApplicationEventPublisherAware\MessageSourceAware)</li></ul></li></ul></li><li>生命周期(实例化和属性赋值都是Spring帮助我们做的，能够自己实现的有初始化和销毁两个生命周期阶段)<ul><li>InitializingBean</li><li>DisposableBean</li></ul></li></ul></li></ul><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><p>Spring Bean 中所说的作用域，在配置文件中即是“scope”</p><p>在面向对象程序设计中作用域一般指对象或变量之间的可见范围。</p><p>而在Spring容器中是指其创建的Bean对象相对于其他Bean对象的请求可见范围。</p><p>在Spring 容器当中，一共提供了5种作用域类型，在配置文件中，通过属性scope来设置bean的作用域范围</p><h4 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当Bean的作用域为singleton的时候,Spring容器中只会存在一个共享的Bean实例，所有对Bean的请求只要id与bean的定义相匹配，则只会返回bean的同一实例。单一实例会被存储在单例缓存中，为Spring的缺省作用域。</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot; prototype &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每次对该Bean请求的时候，Spring IoC都会创建一个新的作用域。</p><p>对于有状态的Bean应该使用prototype，对于无状态的Bean则使用singleton</p><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot; request &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Request作用域针对的是每次的Http请求，Spring容器会根据相关的Bean的</p><p>定义来创建一个全新的Bean实例。而且该Bean只在当前request内是有效的。</p><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot; session &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对http session起作用，Spring容器会根据该Bean的定义来创建一个全新的Bean的实例。而且该Bean只在当前http session内是有效的。</p><h4 id="global-session"><a href="#global-session" class="headerlink" title="global session"></a>global session</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.lovepi.UserInfo&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;globalSession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似标准的http session作用域，不过仅仅在基于portlet的web应用当中才有意义。Portlet规范定义了全局的Session的概念。他被所有构成某个portlet外部应用中的各种不同的portlet所共享。在global<br>session作用域中所定义的bean被限定于全局的portlet session的生命周期范围之内。</p><h3 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h3><h4 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h4><p>Spring 解决循环依赖的核心就是提前暴露对象，而提前暴露的对象就是放置于第二级缓存中。下表是三级缓存的说明：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>singletonObjects</td><td>一级缓存，存放完整的 Bean。</td></tr><tr><td>earlySingletonObjects</td><td>二级缓存，存放提前暴露的Bean，Bean 是不完整的，未完成属性注入和执行 init 方法。</td></tr><tr><td>singletonFactories</td><td>三级缓存，存放的是 Bean 工厂，主要是生产 Bean，存放到二级缓存中。</td></tr></tbody></table><p>所有被Spring 管理的 Bean，最终都会存放在 singletonObjects 中，这里面存放的 Bean 是经历了所有生命周期的（除了销毁的生命周期），完整的，可以给用户使用的。</p><p>earlySingletonObjects 存放的是已经被实例化，但是还没有注入属性和执行 init 方法的 Bean。</p><p>singletonFactories 存放的是生产 Bean 的工厂。</p><p>Bean 都已经实例化了，为什么还需要一个生产 Bean 的工厂呢？这里实际上是跟 AOP 有关，如果项目中不需要为 Bean 进行代理，那么这个 Bean 工厂就会直接返回一开始实例化的对象，如果需要使用 AOP 进行代理，那么这个工厂就会发挥重要的作用了，这也是本文需要重点关注的问题之一。</p><h4 id="解决循环依赖"><a href="#解决循环依赖" class="headerlink" title="解决循环依赖"></a>解决循环依赖</h4><p>Spring 是如何通过上面介绍的三级缓存来解决循环依赖的呢？这里只用 A，B 形成的循环依赖来举例：</p><ol><li>实例化 A，此时 A 还未完成属性填充和初始化方法（@PostConstruct）的执行，A 只是一个半成品。</li><li>为 A 创建一个 Bean 工厂，并放入到  singletonFactories 中。</li><li>发现 A 需要注入 B 对象，但是一级、二级、三级缓存均为发现对象 B。</li><li>实例化 B，此时 B 还未完成属性填充和初始化方法（@PostConstruct）的执行，B 只是一个半成品。</li><li>为 B 创建一个 Bean 工厂，并放入到  singletonFactories 中。</li><li>发现 B 需要注入 A 对象，此时在一级、二级未发现对象 A，但是在三级缓存中发现了对象 A，从三级缓存中得到对象 A，并将对象 A 放入二级缓存中，同时删除三级缓存中的对象 A。（注意，此时的 A 还是一个半成品，并没有完成属性填充和执行初始化方法）</li><li>将对象 A 注入到对象 B 中。</li><li>对象 B 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 B。（此时对象 B 已经是一个成品）</li><li>对象 A 得到对象 B，将对象 B 注入到对象 A 中。（对象 A 得到的是一个完整的对象 B）</li><li>对象 A 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 A。</li></ol><h2 id="Spring框架中的单例bean是否线程安全"><a href="#Spring框架中的单例bean是否线程安全" class="headerlink" title="Spring框架中的单例bean是否线程安全"></a>Spring框架中的单例bean是否线程安全</h2><p>Spring框架中的单例bean是线程安全的吗？它是如何处理线程并发问题的?</p><p>不是，Spring框架中的单例bean不是线程安全的。</p><p>spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。实际上大部分 spring bean 是无状态的（比如 dao 类），在某种程度上来说 bean 也是安全的，但如果 bean<br>有状态的话（比如 view model ）就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了， 保证线程安全了。</p><ul><li>有状态就是有数据存储功能。</li><li>无状态就是不会保存数据。</li></ul><p>Spring如何处理线程并发问题?</p><p>一般只有无状态的Bean才可以在多线程下共享，大部分是无状态的Bean。当存有状态的Bean的时候，spring一般是使用ThreadLocal进行处理，解决线程安全问题。</p><p>ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。 同步机制采用了“时间换空间”的方式，仅提供一份变量，不同的线程获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了“空间换时间”的方式。<br>ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，所以没有相同变量的访问冲突问题。所以在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP(Aspect-Oriented Programming)<br>，一般称为面向切面编程，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理等。</p><h3 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h3><p>原理是在IOC过程中，创建bean实例时，最后都会对bean进行处理来实现增强，对于AOP来说就是创建代理类</p><ul><li>底层是动态代理技术<ul><li>JDK动态代理(基于接口)</li><li>CGLib动态代理(基于类)</li><li>在Spring AOP中，如果使用的是单例，推荐使用CGLib代理</li></ul></li></ul><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>(一）实现原理</p><p>JDK的动态代理是基于反射实现。JDK通过反射，生成一个代理类，这个代理类实现了原来那个类的全部接口，并对接口中定义的所有方法进行了代理。当我们通过代理对象执行原来那个类的方法时，代理类底层会通过反射机制，回调我们实现的InvocationHandler接口的invoke方法。并且这个代理类是Proxy类的子类（记住这个结论，后面测试要用）。这就是JDK动态代理大致的实现方式。</p><p>（二）优点</p><p>JDK动态代理是JDK原生的，不需要任何依赖即可使用；</p><p>通过反射机制生成代理类的速度要比CGLib操作字节码生成代理类的速度更快；</p><p>（三）缺点</p><p>如果要使用JDK动态代理，被代理的类必须实现了接口，否则无法代理；</p><p>JDK动态代理无法为没有在接口中定义的方法实现代理，假设我们有一个实现了接口的类，我们为它的一个不属于接口中的方法配置了切面，Spring仍然会使用JDK的动态代理，但是由于配置了切面的方法不属于接口，为这个方法配置的切面将不会被织入。</p><p>JDK动态代理执行代理方法时，需要通过反射机制进行回调，此时方法执行的效率比较低；</p><h3 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h3><p>（一）实现原理</p><p>CGLib实现动态代理的原理是，底层采用了ASM字节码生成框架，直接对需要代理的类的字节码进行操作，生成这个类的一个子类，并重写了类的所有可以重写的方法，在重写的过程中，将我们定义的额外的逻辑（简单理解为Spring中的切面）织入到方法中，对方法进行了增强。而通过字节码操作生成的代理类，和我们自己编写并编译后的类没有太大区别。</p><p>（二）优点</p><p>使用CGLib代理的类，不需要实现接口，因为CGLib生成的代理类是直接继承自需要被代理的类；</p><p>CGLib生成的代理类是原来那个类的子类，这就意味着这个代理类可以为原来那个类中，所有能够被子类重写的方法进行代理；</p><p>CGLib生成的代理类，和我们自己编写并编译的类没有太大区别，对方法的调用和直接调用普通类的方式一致，所以CGLib执行代理方法的效率要高于JDK的动态代理；</p><p>（三）缺点</p><p>由于CGLib的代理类使用的是继承，这也就意味着如果需要被代理的类是一个final类，则无法使用CGLib代理；</p><p>由于CGLib实现代理方法的方式是重写父类的方法，所以无法对final方法，或者private方法进行代理，因为子类无法重写这些方法；</p><p>CGLib生成代理类的方式是通过操作字节码，这种方式生成代理类的速度要比JDK通过反射生成代理类的速度更慢；</p><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><h4 id="连接点-Join-point"><a href="#连接点-Join-point" class="headerlink" title="连接点(Join point)"></a>连接点(Join point)</h4><p>能够被拦截的地方</p><h4 id="切点-Poincut"><a href="#切点-Poincut" class="headerlink" title="切点(Poincut)"></a>切点(Poincut)</h4><p>具体定位的连接点</p><h4 id="增强-通知-Advice"><a href="#增强-通知-Advice" class="headerlink" title="增强&#x2F;通知(Advice)"></a>增强&#x2F;通知(Advice)</h4><p>表示添加到切点的一段逻辑代码，并定位连接点的方位信息</p><h4 id="织入-Weaving"><a href="#织入-Weaving" class="headerlink" title="织入(Weaving)"></a>织入(Weaving)</h4><p>将增强&#x2F;通知添加到目标类的具体连接点上的过程。</p><h4 id="引入-引介-Introduction"><a href="#引入-引介-Introduction" class="headerlink" title="引入&#x2F;引介(Introduction)"></a>引入&#x2F;引介(Introduction)</h4><p>允许我们向现有的类添加新方法或属性。是一种特殊的增强！</p><h4 id="切面-Aspect"><a href="#切面-Aspect" class="headerlink" title="切面(Aspect)"></a>切面(Aspect)</h4><p>切面由切点和增强&#x2F;通知组成，它既包括了横切逻辑的定义、也包括了连接点的定义</p><h3 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h3><ul><li>基于代理的经典SpringAOP：需要实现接口，手动创建代理</li><li>纯POJO切面：使用XML配置，aop命名空间</li><li>@AspectJ注解驱动的切面：使用注解的方式，这是最简洁和最方便的！</li></ul><h2 id="怎么定义一个注解"><a href="#怎么定义一个注解" class="headerlink" title="怎么定义一个注解"></a>怎么定义一个注解</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>java.lang.annotation 提供了四种元注解，专门注解其他的注解（在自定义注解的时候，需要使用到元注解）：</p><ul><li>@Documented – 注解是否将包含在JavaDoc中</li><li>@Retention – 什么时候使用该注解</li><li>@Target – 注解用于什么地方</li><li>@Inherited – 是否允许子类继承该注解</li></ul><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>定义该注解的生命周期</p><ul><li>RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。</li><li>RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式</li><li>RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</li></ul><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType 参数包括</p><ul><li>ElementType.CONSTRUCTOR: 用于描述构造器</li><li>ElementType.FIELD: 成员变量、对象、属性（包括enum实例）</li><li>ElementType.LOCAL_VARIABLE: 用于描述局部变量</li><li>ElementType.METHOD: 用于描述方法</li><li>ElementType.PACKAGE: 用于描述包</li><li>ElementType.PARAMETER: 用于描述参数</li><li>ElementType.TYPE: 用于描述类、接口(包括注解类型) 或enum声明</li></ul><h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><p>一个简单的Annotations 标记注解，表示是否将注解信息添加在java文档中。</p><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>定义该注释和子类的关系</p><p>@Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited 修饰的annotation 类型被用于一个class，则这个annotation 将被用于该class<br>的子类。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>自定义一个检查是否登录的注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckLogin &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckLoginAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* *..controller..*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">CheckLogin</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(CheckLogin.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取类上注解</span></span><br><span class="line">            annotation = joinPoint.getTarget().getClass().getAnnotation(CheckLogin.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到请求的属性</span></span><br><span class="line">            <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span></span><br><span class="line">                    (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">            <span class="comment">//获取到请求对象</span></span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">ssoToken</span> <span class="operator">=</span> HttpUtil.getSsoToken(request);</span><br><span class="line">            <span class="keyword">if</span> (ssoToken != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">loginUserTokenKey</span> <span class="operator">=</span> AuthRedisKeyUtil.getLoginUserTokenKey(ssoToken);</span><br><span class="line">                <span class="keyword">if</span> (redisTemplate.hasKey(loginUserTokenKey)) &#123;</span><br><span class="line">                    <span class="comment">//通过</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginException</span>(<span class="string">&quot;登录已过期&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalRequestException</span>(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckLogin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">queryRegulation</span><span class="params">(Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//....业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="Spring-支持两种方式的事务管理"><a href="#Spring-支持两种方式的事务管理" class="headerlink" title="Spring 支持两种方式的事务管理"></a>Spring 支持两种方式的事务管理</h3><h4 id="1、编程式事务管理"><a href="#1、编程式事务管理" class="headerlink" title="1、编程式事务管理"></a>1、编程式事务管理</h4><ul><li>TransactionTemplate</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span>&#123;</span><br><span class="line">    transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//...业务代码</span></span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    status.setRollbackOnly();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TransactionManager</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction2</span><span class="params">()</span>&#123;</span><br><span class="line">        TransactionStatus status=transactionManager.getTransaction(<span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>());</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//...业务代码</span></span><br><span class="line">            transactionManager.commit(status);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            transactionManager.rollback(status);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、注解"><a href="#2、注解" class="headerlink" title="2、注解"></a>2、注解</h4><ul><li>@Transactional</li></ul><h3 id="事务的传播性-Propagation"><a href="#事务的传播性-Propagation" class="headerlink" title="事务的传播性 Propagation"></a>事务的传播性 Propagation</h3><p>① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</p><p>② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</p><p>③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</p><p>④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</p><p>⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。</p><h3 id="spring事务失效的场景"><a href="#spring事务失效的场景" class="headerlink" title="spring事务失效的场景"></a>spring事务失效的场景</h3><ol><li><p>非被Spring管理的Bean上的事务： 如果你在一个非被Spring容器管理的Bean（例如通过new关键字直接创建的对象）上使用事务注解，事务将不会生效。Spring的事务管理是基于AOP（面向切面编程）实现的，因此只能在由Spring容器管理的Bean上起作用。</p></li><li><p>未捕获的异常： 如果在事务内发生未捕获的运行时异常，事务将回滚。但是，如果异常被捕获并在方法内处理，事务可能不会回滚。确保在事务边界内处理异常或者允许异常传播到事务管理器以便正确回滚。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transactionalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// some code that may throw an exception</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// handle the exception (not recommended within a transaction)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套事务问题： Spring事务支持嵌套事务，但是嵌套事务的行为取决于底层事务管理器的支持。如果使用的事务管理器不支持嵌套事务，嵌套事务可能会被忽略，导致事务行为不一致。</p></li><li><p>方法调用问题： Spring事务是通过AOP实现的，它依赖于代理对象来拦截方法调用并处理事务。如果你在同一个类内部调用一个带有事务注解的方法，事务可能不会起作用，因为代理对象无法拦截内部方法的调用。确保事务注解生效，要么调用方法是通过代理对象，要么通过self-invocation，例如通过this关键字。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        innerMethod(); <span class="comment">// Transactional annotation may not work here</span></span><br><span class="line">        <span class="built_in">this</span>.innerMethod(); <span class="comment">// Transactional annotation should work here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// some transactional logic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>异步方法问题： 如果使用了异步方法（通过@Async注解），事务可能会失效。在异步方法内，事务上下文可能无法正确传播，导致事务不起作用。要在异步方法中使用事务，可以使用TransactionContext传播方式。</p></li></ol><h2 id="spring使用的设计模式"><a href="#spring使用的设计模式" class="headerlink" title="spring使用的设计模式"></a>spring使用的设计模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p><strong>实现方式：</strong></p><p>BeanFactory。Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定。</p><p><strong>实现原理：</strong></p><p>bean容器的启动阶段：</p><p>读取bean的xml配置文件,将bean元素分别转换成一个BeanDefinition对象。<br>然后通过BeanDefinitionRegistry将这些bean注册到beanFactory中，保存在它的一个ConcurrentHashMap中。<br>将BeanDefinition注册到了beanFactory之后，在这里Spring为我们提供了一个扩展的切口，允许我们通过实现接口BeanFactoryPostProcessor<br>在此处来插入我们定义的代码。典型的例子就是：PropertyPlaceholderConfigurer，我们一般在配置数据库的dataSource时使用到的占位符的值，就是它注入进去的。</p><p>容器中bean的实例化阶段：</p><p>实例化阶段主要是通过反射或者CGLIB对bean进行实例化，在这个阶段Spring又给我们暴露了很多的扩展点：</p><p>各种的Aware接口 ，比如 BeanFactoryAware，对于实现了这些Aware接口的bean，在实例化bean时Spring会帮我们注入对应的BeanFactory的实例。 BeanPostProcessor接口<br>，实现了BeanPostProcessor接口的bean，在实例化bean时Spring会帮我们调用接口中的方法。 InitializingBean接口<br>，实现了InitializingBean接口的bean，在实例化bean时Spring会帮我们调用接口中的方法。 DisposableBean接口<br>，实现了DisposableBean接口的bean，在该bean死亡时Spring会帮我们调用接口中的方法。</p><p><strong>设计意义：</strong></p><p>松耦合。<br>可以将原来硬编码的依赖，通过Spring这个beanFactory这个工厂来注入依赖，也就是说原来只有依赖方和被依赖方，现在我们引入了第三方——spring这个beanFactory，由它来解决bean之间的依赖问题，达到了松耦合的效果.</p><p>bean的额外处理。 通过Spring接口的暴露，在实例化bean的阶段我们可以进行一些额外的处理，这些额外的处理只需要让bean实现对应的接口即可，那么spring就会在bean的生命周期调用我们实现的接口来处理该bean。[非常重要]</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p><strong>实现方式：</strong></p><p>FactoryBean接口。</p><p><strong>实现原理：</strong></p><p>实现了FactoryBean接口的bean是一类叫做factory的bean。其特点是，spring会在使用getBean()调用获得该bean时，会自动调用该bean的getObject()<br>方法，所以返回的不是factory这个bean，而是这个bean.getOjbect()方法的返回值。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>Spring依赖注入Bean实例默认是单例的。</p><p>Spring的依赖注入（包括lazy-init方式）都是发生在AbstractBeanFactory的getBean里。getBean的doGetBean方法调用getSingleton进行bean的创建。</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p><strong>实现方式：</strong></p><p>SpringMVC中的适配器HandlerAdatper。</p><p><strong>实现原理：</strong></p><p>HandlerAdatper根据Handler规则执行不同的Handler。</p><p><strong>实现过程：</strong></p><p>DispatcherServlet根据HandlerMapping返回的handler，向HandlerAdatper发起请求，处理Handler。</p><p>HandlerAdapter根据规则找到对应的Handler并让其执行，执行完毕后Handler会向HandlerAdapter返回一个ModelAndView，最后由HandlerAdapter向DispatchServelet返回一个ModelAndView。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p><strong>实现方式：</strong></p><p>Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。</p><p><strong>实质：</strong></p><p>动态地给一个对象添加一些额外的职责。</p><p>就增加功能来说，Decorator模式相比生成子类更为灵活。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><strong>实现方式：</strong></p><p>AOP底层，就是动态代理模式的实现。</p><p><strong>动态代理：</strong></p><p>在内存中构建的，不需要手动编写代理类</p><h2 id="spring中properties和yml的加载顺序"><a href="#spring中properties和yml的加载顺序" class="headerlink" title="spring中properties和yml的加载顺序"></a>spring中properties和yml的加载顺序</h2><p>相同内容properties和yml的加载顺序是properties优先</p><h2 id="使用-Autowired注解自动装配的过程是怎样的？"><a href="#使用-Autowired注解自动装配的过程是怎样的？" class="headerlink" title="使用@Autowired注解自动装配的过程是怎样的？"></a>使用@Autowired注解自动装配的过程是怎样的？</h2><p>使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，&lt;context:annotation-config &#x2F;&gt;。</p><p>在启动spring<br>IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：</p><ul><li>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；</li><li>如果查询的结果不止一个，那么@Autowired会根据名称来查找；</li><li>如果上述查找的结果为空，那么会抛出异常。解决方法是，使用required&#x3D;false。</li></ul><h2 id="Autowired和-Resource之间的区别"><a href="#Autowired和-Resource之间的区别" class="headerlink" title="@Autowired和@Resource之间的区别"></a>@Autowired和@Resource之间的区别</h2><p>@Autowired可用于：构造函数、成员变量、Setter方法</p><p>@Autowired和@Resource之间的区别</p><ul><li>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。</li><li>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。</li></ul><h2 id="Spring中BeanFactory与FactoryBean的区别"><a href="#Spring中BeanFactory与FactoryBean的区别" class="headerlink" title="Spring中BeanFactory与FactoryBean的区别"></a>Spring中BeanFactory与FactoryBean的区别</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>BeanFactory是一个接口，它是Spring中工厂的顶层规范，是SpringIoc容器的核心接口，它定义了getBean()、containsBean()等管理Bean的通用方法。Spring的容器都是它的具体实现如：</p><ul><li>DefaultListableBeanFactory</li><li>XmlBeanFactory</li><li>ApplicationContext</li></ul><p>这些实现类又从不同的维度分别有不同的扩展。</p><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>首先它是一个Bean，但又不仅仅是一个Bean。它是一个能生产或修饰对象生成的工厂Bean，类似于设计模式中的工厂模式和装饰器模式。它能在需要的时候生产一个对象，且不仅仅限于它自身，它能返回任何Bean的实例。</p><p>FactoryBean表现的是一个工厂的职责。 即一个Bean A如果实现了FactoryBean接口，那么A就变成了一个工厂，根据A的名称获取到的实际上是工厂调用getObject()<br>返回的对象，而不是A本身，如果要获取工厂A自身的实例，那么需要在名称前面加上’&amp;’符号。</p><ul><li>getObject(‘name’)返回工厂中的实例</li><li>getObject(‘&amp;name’)返回工厂本身的实例</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Hello World</title>
      
      <link href="/2024/05/26/hello-world/"/>
      <url>/2024/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>写代码神器</title>
      
      <link href="/2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/"/>
      <url>/2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Cursor是一个基于人工智能的编程辅助工具，它可以帮助你快速地生成、修改、优化和测试代码。Cursor使用了最先进的自然语言处理技术，能够理解你的编程意图和需求，并根据你的上下文和目标，生成符合你期望的代码。Cursor不仅可以生成代码，还可以检测和修复代码中的错误，提高代码的质量和效率。Cursor还可以根据你的代码生成相应的文档、注释和测试用例，让你的编程过程更加轻松和高效。</p><p><img src="/./2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/1.png" alt="首页"></p><p>Cursor的用途和优势</p><p>Cursor可以应用于多种编程场景和语言，无论你是一个新手还是一个专家，Cursor都可以为你提供强大的编程支持。Cursor的主要用途和优势有：</p><p>代码生成：Cursor可以根据你的自然语言描述或者部分代码，生成完整的代码片段或者函数。你可以使用Cursor来快速实现你的编程想法，或者填补你的代码空缺。Cursor支持多种编程语言，如Python, Java, C++, JavaScript等，你可以根据你的需要选择合适的语言。</p><p>代码修改：Cursor可以根据你的修改意图和需求，对你的代码进行修改和优化。你可以使用Cursor来修改你的代码逻辑、参数、变量名等，或者对你的代码进行重构、简化和美化。Cursor可以保证修改后的代码的正确性和一致性，避免引入新的错误。</p><p>代码测试：Cursor可以根据你的代码，生成相应的测试用例和测试代码。你可以使用Cursor来测试你的代码的功能、性能、安全性等，或者对你的代码进行覆盖率、静态分析等检查。Cursor可以帮助你提高你的代码的可靠性和稳定性，发现和解决潜在的问题。</p><p>代码文档：Cursor可以根据你的代码，生成相应的文档和注释。你可以使用Cursor来生成你的代码的说明、用法、参数、返回值等，或者对你的代码添加有意义的注释。Cursor可以帮助你提高你的代码的可读性和可维护性，方便你和他人理解和使用你的代码。</p><p><img src="/./2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/2.png" alt="编辑页"></p><p>Cursor的使用方法</p><p>Cursor的使用方法非常简单和方便，你只需要在你的编程环境中安装Cursor的插件，然后就可以通过自然语言或者部分代码来引导Cursor为你生成、修改、测试或者文档化你的代码。Cursor的使用方法如下：</p><p>代码生成：你可以在你的代码编辑器中输入你的自然语言描述或者部分代码，然后按下Ctrl+Enter键，Cursor就会为你生成相应的代码。例如，你可以输入“定义一个Python函数，计算两个数的最大公约数”，然后按下Ctrl+Enter键，Cursor就会为你生成如下的代码：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><p>def gcd(a, b):</p><h1 id="使用辗转相除法计算两个数的最大公约数"><a href="#使用辗转相除法计算两个数的最大公约数" class="headerlink" title="使用辗转相除法计算两个数的最大公约数"></a>使用辗转相除法计算两个数的最大公约数</h1><p>while b !&#x3D; 0:<br>a, b &#x3D; b, a % b<br>return a<br>代码修改：你可以在你的代码编辑器中选中你想要修改的代码，然后输入你的修改意图或者需求，然后按下Ctrl+Enter键，Cursor就会为你修改相应的代码。例如，你可以选中上面的代码，然后输入“使用递归的方式实现”，然后按下Ctrl+Enter键，Cursor就会为你修改如下的代码：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><p>def gcd(a, b):</p><h1 id="使用递归的方式计算两个数的最大公约数"><a href="#使用递归的方式计算两个数的最大公约数" class="headerlink" title="使用递归的方式计算两个数的最大公约数"></a>使用递归的方式计算两个数的最大公约数</h1><p>if b &#x3D;&#x3D; 0:<br>return a<br>else:<br>return gcd(b, a % b)<br>代码测试：你可以在你的代码编辑器中选中你想要测试的代码，然后输入你的测试目标或者条件，然后按下Ctrl+Enter键，Cursor就会为你生成相应的测试用例和测试代码。例如，你可以选中上面的代码，然后输入“测试函数的正确性和性能”，然后按下Ctrl+Enter键，Cursor就会为你生成如下的测试用例和测试代码：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><p>import unittest<br>import timeit</p><p>class TestGcd(unittest.TestCase):</p><h1 id="测试gcd函数的正确性和性能"><a href="#测试gcd函数的正确性和性能" class="headerlink" title="测试gcd函数的正确性和性能"></a>测试gcd函数的正确性和性能</h1><p>def test_correctness(self):</p><h1 id="测试gcd函数的正确性"><a href="#测试gcd函数的正确性" class="headerlink" title="测试gcd函数的正确性"></a>测试gcd函数的正确性</h1><p>self.assertEqual(gcd(12, 18), 6)<br>self.assertEqual(gcd(24, 36), 12)<br>self.assertEqual(gcd(17, 23), 1)</p><p>def test_performance(self):</p><h1 id="测试gcd函数的性能"><a href="#测试gcd函数的性能" class="headerlink" title="测试gcd函数的性能"></a>测试gcd函数的性能</h1><p>t &#x3D; timeit.timeit(“gcd(123456789, 987654321)”, setup&#x3D;”from <strong>main</strong> import gcd”, number&#x3D;1000)<br>print(f”Average time for 1000 calls: {t&#x2F;1000:.6f} seconds”)</p><p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>unittest.main()<br>代码文档：你可以在你的代码编辑器中选中你想要文档化的代码，然后输入你的文档目的或者格式，然后按下Ctrl+Enter键，Cursor就会为你生成相应的文档和注释。例如，你可以选中上面的代码，然后输入“生成Markdown格式的文档”，然后按下Ctrl+Enter键，Cursor就会为你生成如下的文档和注释：</p><p>Python<br>AI 生成的代码。仔细查看和使用。 有关常见问题解答的详细信息.</p><h1 id="gcd函数"><a href="#gcd函数" class="headerlink" title="gcd函数"></a>gcd函数</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>gcd函数用于计算两个数的最大公约数。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>a: 第一个数，必须是整数。</li><li>b: 第二个数，必须是整数。</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回两个数的最大公约数，是一个整数。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(<span class="number">12</span>, <span class="number">18</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(<span class="number">24</span>, <span class="number">36</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(<span class="number">17</span>, <span class="number">23</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gcd函数使用了递归的方式实现，如果两个数较大，可能会导致栈溢出的风险。可以考虑使用循环的方式改进。</p><p>Cursor的优势和特点</p><p>Cursor的优势和特点有：</p><ul><li>基于人工智能：Cursor使用了最先进的自然语言处理技术，能够理解你的编程意图和需求，并根据你的上下文和目标，生成符合你期望的代码。Cursor不仅可以生成代码，还可以检测和修复代码中的错误，提高代码的质量和效率。Cursor还可以根据你的代码生成相应的文档、注释和测试用例，让你的编程过程更加轻松和高效。</li><li>基于文本：Cursor使用了基于文本的交互方式，你只需要通过自然语言或者部分代码来引导Cursor为你生成、修改、测试或者文档化你的代码。你不需要学习任何复杂的语法或者命令，只需要用你熟悉的语言来表达你的编程想法和需求，Cursor就可以为你完成你的编程任务。</li><li>基于插件：Cursor使用了基于插件的集成方式，你只需要在你的编程环境中安装Cursor的插件，然后就可以在你的代码编辑器中直接使用Cursor的功能。你不需要切换到任何其他的平台或者工具，只需要在你的代码编辑器中按下Ctrl+Enter键，Cursor就可以为你生成、修改、测试或者文档化你的代码。</li></ul><p><img src="/./2024/05/26/%E5%86%99%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8/2.png" alt="搜索页"></p><p>Cursor的未来展望</p><p>Cursor是一个基于人工智能的编程辅助工具，它可以帮助你快速地生成、修改、优化和测试代码。Cursor使用了最先进的自然语言</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发神器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
